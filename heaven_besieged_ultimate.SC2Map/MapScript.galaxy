//==================================================================================================
// 
// Generated Map Script
// 
// Name:   Heaven Besieged: Ultimate
// 
//==================================================================================================
include "TriggerLibs/NativeLib"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Global Structures
//--------------------------------------------------------------------------------------------------
struct gs_GameData {
    bool lv_reducedMode;
    bool lv_gameStarted;
    playergroup lv_humansPlaying;
    playergroup lv_playerGroupHeaven;
    playergroup lv_playerGroupHell;
    playergroup lv_playerGroupHellTUTORIAL;
    playergroup lv_primeEvils;
    playergroup lv_goodArmyPlayers;
    playergroup lv_playerGroupObservers;
    fixed lv_godTime;
    bool lv_godhasArrived;
    timer lv_godTimer;
    int lv_godTimerWindow;
    int lv_timerWindowDialog;
    unitgroup[16] lv_claimedTroops;
    unitgroup[4] lv_playerEvilHordeGroup;
    unitgroup[5] lv_playerGrigoriAmount;
    unit lv_nydusAsta;
    unit lv_nydusSatan;
    unit lv_nydusAsmo;
    bool lv_healDev;
    bool lv_healAsmo;
    bool lv_healAsta;
    int lv_votekickYesVoteAmount;
    int lv_votekickNoVoteAmount;
    int lv_votekickAbstainedAmount;
    bool lv_votekickVotekickInProgress;
    int lv_votekickDialog;
    int lv_votekickYESButton;
    int lv_votekickNOButton;
    int lv_votekickABSTAINButton;
    int lv_tieYesCount;
    int lv_tieNoCount;
    int lv_tieAbstainCount;
    bool lv_tieTriggered;
    int lv_tieHeavenRejectCount;
    int lv_tieHellRejectCount;
    int lv_tieDialog;
    int lv_tieYes;
    int lv_tieNo;
    int lv_tieAbstain;
    int lv_pushCommandTooltip;
    playergroup lv_pushCommandNoobs;
    int[11] lv_rolesOwners;
    unitgroup[11] lv_rolesUnits;
    int[8] lv_pingsHeavenPoV;
    int[5] lv_pingsHellPoV;
    int[2] lv_objectivesHellPrimary;
    int[2] lv_objectivesHellSecondary;
    int[2] lv_objectivesHeavenPrimary;
    int[2] lv_objectivesHeavenSecondary;
    bool lv_heavenHasWon;
    bool lv_hellHasWon;
    int[11] lv_aftermathRoleLabels;
    int lv_aftermathEXITButton;
    int[11] lv_aftermathKudosButton;
    int[11] lv_aftermathKudosIcon;
    int[11] lv_aftermathShowKudos;
    int lv_aftermathDialog;
    int lv_aftermathKudosHolderDialog;
};

struct gs_PlayerData {
    bool lv_isPlayerKickable;
    bool lv_hasPlayerVoted;
    bool lv_hasPlayerAlreadyInitiatedAKick;
    int lv_totalGames;
    bool lv_tiehasPlayerVoted;
    bool lv_tiehasPlayerAlreadyInitatedATie;
    int lv_currentRole;
    int lv_timeSinceAction;
    int lv_aftermathHeroesTotal;
    int lv_aftermathSurvivingHeroes;
    text lv_aftermathSurvivingHeroesTooltip;
    int lv_aftermathElitesTotal;
    int lv_aftermathSurvivingElites;
    int lv_aftermathHeroesKilled;
    text lv_aftermathHeroesKilledTooltipNormal;
    text lv_aftermathHeroesKilledTooltipPrimes;
    text lv_aftermathHeroesKilledTooltipZadMoloch;
    int lv_aftermathZadMolochKilled;
    int lv_aftermathPrimesKilled;
    int lv_aftermathElitesKilled;
    int lv_aftermathTrashKilled;
    int lv_aftermathPortalsKilled;
    int lv_aftermathAvailableKudos;
    int lv_aftermathLatestToastPanelID;
    int[10] lv_aftermathToastPanels;
    fixed[10] lv_aftermathToastPanelsDuration;
    int[11] lv_aftermathPlayerStatsLabels;
};

struct gs_Syntax {
    int lv_roleMessiah;
    int lv_roleMichael;
    int lv_roleUriel;
    int lv_roleJehoel;
    int lv_roleSeraphiel;
    int lv_roleZadkiel;
    int lv_roleDevil;
    int lv_roleAsmodeus;
    int lv_roleAstaroth;
    int lv_roleMoloch;
    string[11] lv_roleNames;
    int lv_unitCustomValueOriginalRole;
    int lv_unitCustomValueOriginalPlayer;
    int lv_unitCustomValueCurrentRole;
    int lv_pingsGateway;
    int lv_pingsCitadel;
    int lv_pingsBenediction;
    int lv_pingsEnclave;
    int lv_pingsThrone;
    int lv_pingsDevilHellgate;
    int lv_pingsAsmodeusHellgate;
    int lv_pingsAstarothHellgate;
    int lv_pushButtonMessiah;
    int lv_pushButtonJehoel;
    int lv_pushButtonZadkiel;
    int lv_pushButtonDevil;
    int lv_pushButtonAsmodeus;
    int lv_pushButtonAstaroth;
    int lv_pushButtonMoloch;
};

struct gs_CinematicData {
    actor[52] lv_cinematicActors;
    int lv_cinematicTextDialog;
    int lv_cinematicTextLabel;
    unitgroup lv_cinematicUnits;
    int[11] lv_cinematicTags;
};

struct gs_RoleSelectorData {
    bool lv_roleSelectDone;
    int lv_duration;
    int lv_dialog;
    bool[15] lv_rOLEUNOCCUPIED;
    int[15] lv_roleIcon;
    int[7][15] lv_roleRating;
    int[7][15] lv_roleRatingTooltip;
    int[15] lv_roleLabelBackground;
    int[15] lv_roleLabelDefault;
    int[15] lv_roleLabelAssigned;
    int[15] lv_roleButton;
    int[15] lv_roleButtonIconHover;
    int[15] lv_roleTakenStatus;
    int lv_confirmButton;
    int lv_countdownLabel;
    int lv_observeButton;
    int[7] lv_pushButton;
    int[14] lv_playerNameLabel;
    int[7][14] lv_playerNameRatingLabel;
    int[7][14] lv_playerNameRatingLabelTooltip;
    int[15] lv_roleReadyMark;
    int[14] lv_playerNameReadyMark;
    bool[15] lv_playerReady;
    int[15] lv_playerPushPower;
    bool[15] lv_playerCanBePushed;
    int[15] lv_playerNoobPushPower;
    text[15] lv_ratingText;
    int[15] lv_gENERALPlayerRoles;
    int[15] lv_gENERALPlayerRating;
    int lv_gENERALMenuUIPanel;
    int lv_gENERALIdleButton;
    int lv_gENERALChatInput;
    int lv_gENERALChatDisplay;
};

struct gs_CustomControlGroupsData {
    int[3] lv_dialog;
    int lv_title;
    int[3] lv_toggleBox;
    int lv_save;
    int[11] lv_cCGRoles;
    int[11] lv_cCGGroups;
    int[11][10] lv_cCGOptionsText;
    int[11] lv_cCGOptionsBackground;
    int[11][10][3] lv_cCGOptionsButtons;
    int[11][10] lv_cCGOptionsIcons;
    fixed lv_cCGIconFade;
    int[15] lv_selectedRole;
    int[15] lv_selectedGroup;
    int[15][11][11] lv_savedGroups;
    int[15] lv_selection;
};

struct gs_DeathMessages {
    text lv_alignment;
    unit lv_killer;
    unit lv_victim;
    text lv_basicUnit;
    text lv_specialUnit;
    text lv_heavenBasicHero;
    text lv_heavenSpecialHero;
    text lv_hellBasicHero;
    text lv_hellSpecialHero;
    text lv_killedByGod;
    text lv_messiahJk1;
    text lv_sandalphonJk1;
    text lv_gabrielJk1;
    text lv_dumaJk1;
    text lv_urielSrs1;
    text lv_urielJk1;
    text lv_donatelloJk1;
    text lv_seraphielSrs1;
    text lv_nathanielJk1;
    text lv_michaelJk1;
    text lv_michaelJk2;
    text lv_raphaelJk1;
    text lv_jehoelSrs1;
    text lv_metatronSrs1;
    text lv_zadkielJk1;
    text lv_asmodeusJk1;
    text lv_devilSrs1;
    text lv_astarothJk1;
    text lv_azazelJk1;
    text lv_sammyazzaSrs1;
    text lv_beelzebubJk1;
    text lv_mammonJk1;
    text lv_berithJk1;
    text lv_abaddonSrs1;
    text lv_molochJk1;
};

struct gs_TextTags {
    int lv_hellgateDevil;
    int lv_hellgateAsmodeus;
    int lv_hellgateAstaroth;
    int[4] lv_portalTags;
};

struct gs_TutorialData {
    int lv_phase0Dialog;
    int[4] lv_phase0ObjectivesLabels;
    int[4] lv_phase0ObjectivesCheckmarks;
    int lv_portalTextTag;
    int lv_heavensGateTextTag;
    int lv_currentStep;
    bool lv_unleashedMinions;
    bool lv_phase0Step2Pinginginprogress;
};

struct gs_BankData {
    bank[16] lv_playerBanks;
    int lv_statisticsDialog;
    int lv_statisticsDialogMinimized;
    int lv_statisticsItem;
    int lv_statisticsItemNames;
    int lv_statisticsPanel;
    int lv_statisticsButtonToMinimize;
    int lv_statisticsButtonToMaximize;
    int lv_indepthStatisticsDialog;
    int lv_indepthRoleList;
    int lv_indepthList;
    int lv_indepthCloseButton;
    int lv_indepthTitleLabel;
    bool lv_statsdisabled;
    int[16][11] lv_gamesStarted;
    int[16][11] lv_wins;
    int[16][11] lv_losses;
    int[16][11] lv_heroKills;
    int[16][11] lv_heroLosses;
    int[16][11] lv_assists;
    int[16][11] lv_smileyKills;
    int[16][11] lv_kudosRecieved;
    int[16][11][11] lv_controlGroups;
    text[11] lv_statsListStrings;
    bool[16] lv_bankUpdated;
};

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
gs_GameData gv_gameData;
gs_PlayerData[16] gv_playerData;
gs_Syntax gv_syn;
gs_CinematicData gv_cinematic;
gs_RoleSelectorData gv_roleSelect;
gs_CustomControlGroupsData gv_cCGData;
int gv_voteyes;
int gv_voteno;
timer gv_votetimer;
int gv_votetimerwindow;
int gv_reducedVoteNo;
int gv_reducedVoteYes;
timer gv__35minuterealtimer;
gs_DeathMessages gv_deathMessages;
gs_TextTags gv_textTags;
fixed gv_zadXPMax;
fixed gv_moloXPMax;
gs_TutorialData[3] gv_tutorialData;
int gv_raphGolCount;
bool gv_seraphielSnipeCasting;
playergroup gv_funGroup;
unitgroup gv_perdGroup;
gs_BankData gv_banks;

void InitGlobals () {
    int init_i;
    int init_i1;
    int init_j1;
    int init_k1;

    gv_gameData.lv_humansPlaying = PlayerGroupEmpty();
    gv_gameData.lv_playerGroupHeaven = PlayerGroupEmpty();
    gv_gameData.lv_playerGroupHell = PlayerGroupEmpty();
    gv_gameData.lv_playerGroupHellTUTORIAL = PlayerGroupEmpty();
    gv_gameData.lv_primeEvils = PlayerGroupEmpty();
    gv_gameData.lv_goodArmyPlayers = PlayerGroupEmpty();
    gv_gameData.lv_playerGroupObservers = PlayerGroupEmpty();
    gv_gameData.lv_godTime = 28.0;
    gv_gameData.lv_godTimer = TimerCreate();
    gv_gameData.lv_godTimerWindow = c_timerWindowNone;
    gv_gameData.lv_timerWindowDialog = c_invalidDialogId;
    for (init_i1 = 0; init_i1 <= 15; init_i1 += 1) {
        gv_gameData.lv_claimedTroops[init_i1] = UnitGroupEmpty();
    }
    for (init_i1 = 0; init_i1 <= 3; init_i1 += 1) {
        gv_gameData.lv_playerEvilHordeGroup[init_i1] = UnitGroupEmpty();
    }
    for (init_i1 = 0; init_i1 <= 4; init_i1 += 1) {
        gv_gameData.lv_playerGrigoriAmount[init_i1] = UnitGroupEmpty();
    }
    gv_gameData.lv_nydusAsta = UnitFromId(670);
    gv_gameData.lv_nydusSatan = UnitFromId(648);
    gv_gameData.lv_nydusAsmo = UnitFromId(629);
    gv_gameData.lv_healDev = true;
    gv_gameData.lv_healAsmo = true;
    gv_gameData.lv_healAsta = true;
    gv_gameData.lv_votekickDialog = c_invalidDialogId;
    gv_gameData.lv_votekickYESButton = c_invalidDialogControlId;
    gv_gameData.lv_votekickNOButton = c_invalidDialogControlId;
    gv_gameData.lv_votekickABSTAINButton = c_invalidDialogControlId;
    gv_gameData.lv_tieDialog = c_invalidDialogId;
    gv_gameData.lv_tieYes = c_invalidDialogControlId;
    gv_gameData.lv_tieNo = c_invalidDialogControlId;
    gv_gameData.lv_tieAbstain = c_invalidDialogControlId;
    gv_gameData.lv_pushCommandTooltip = c_invalidDialogId;
    gv_gameData.lv_pushCommandNoobs = PlayerGroupEmpty();
    for (init_i1 = 0; init_i1 <= 10; init_i1 += 1) {
        gv_gameData.lv_rolesOwners[init_i1] = -1;
    }
    for (init_i1 = 0; init_i1 <= 10; init_i1 += 1) {
        gv_gameData.lv_rolesUnits[init_i1] = UnitGroupEmpty();
    }
    for (init_i1 = 0; init_i1 <= 7; init_i1 += 1) {
        gv_gameData.lv_pingsHeavenPoV[init_i1] = c_invalidPingId;
    }
    for (init_i1 = 0; init_i1 <= 4; init_i1 += 1) {
        gv_gameData.lv_pingsHellPoV[init_i1] = c_invalidPingId;
    }
    for (init_i1 = 0; init_i1 <= 1; init_i1 += 1) {
        gv_gameData.lv_objectivesHellPrimary[init_i1] = c_invalidObjectiveId;
    }
    for (init_i1 = 0; init_i1 <= 1; init_i1 += 1) {
        gv_gameData.lv_objectivesHellSecondary[init_i1] = c_invalidObjectiveId;
    }
    for (init_i1 = 0; init_i1 <= 1; init_i1 += 1) {
        gv_gameData.lv_objectivesHeavenPrimary[init_i1] = c_invalidObjectiveId;
    }
    for (init_i1 = 0; init_i1 <= 1; init_i1 += 1) {
        gv_gameData.lv_objectivesHeavenSecondary[init_i1] = c_invalidObjectiveId;
    }
    for (init_i1 = 0; init_i1 <= 10; init_i1 += 1) {
        gv_gameData.lv_aftermathRoleLabels[init_i1] = c_invalidDialogControlId;
    }
    gv_gameData.lv_aftermathEXITButton = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= 10; init_i1 += 1) {
        gv_gameData.lv_aftermathKudosButton[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 10; init_i1 += 1) {
        gv_gameData.lv_aftermathKudosIcon[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 10; init_i1 += 1) {
        gv_gameData.lv_aftermathShowKudos[init_i1] = c_invalidDialogControlId;
    }
    gv_gameData.lv_aftermathDialog = c_invalidDialogId;
    gv_gameData.lv_aftermathKudosHolderDialog = c_invalidDialogId;
    for (init_i = 0; init_i <= 15; init_i += 1) {
        gv_playerData[init_i].lv_aftermathAvailableKudos = 3;
        for (init_i1 = 0; init_i1 <= 9; init_i1 += 1) {
            gv_playerData[init_i].lv_aftermathToastPanels[init_i1] = c_invalidDialogControlId;
        }
        for (init_i1 = 0; init_i1 <= 10; init_i1 += 1) {
            gv_playerData[init_i].lv_aftermathPlayerStatsLabels[init_i1] = c_invalidDialogControlId;
        }
    }
    gv_syn.lv_roleMichael = 1;
    gv_syn.lv_roleUriel = 2;
    gv_syn.lv_roleJehoel = 3;
    gv_syn.lv_roleSeraphiel = 4;
    gv_syn.lv_roleZadkiel = 5;
    gv_syn.lv_roleDevil = 6;
    gv_syn.lv_roleAsmodeus = 7;
    gv_syn.lv_roleAstaroth = 8;
    gv_syn.lv_roleMoloch = 9;
    for (init_i1 = 0; init_i1 <= 10; init_i1 += 1) {
        gv_syn.lv_roleNames[init_i1] = "";
    }
    gv_syn.lv_unitCustomValueOriginalRole = 62;
    gv_syn.lv_unitCustomValueOriginalPlayer = 63;
    gv_syn.lv_unitCustomValueCurrentRole = 61;
    gv_syn.lv_pingsCitadel = 1;
    gv_syn.lv_pingsBenediction = 2;
    gv_syn.lv_pingsEnclave = 3;
    gv_syn.lv_pingsThrone = 4;
    gv_syn.lv_pingsDevilHellgate = 5;
    gv_syn.lv_pingsAsmodeusHellgate = 6;
    gv_syn.lv_pingsAstarothHellgate = 7;
    gv_syn.lv_pushButtonJehoel = 1;
    gv_syn.lv_pushButtonZadkiel = 2;
    gv_syn.lv_pushButtonDevil = 3;
    gv_syn.lv_pushButtonAsmodeus = 4;
    gv_syn.lv_pushButtonAstaroth = 5;
    gv_syn.lv_pushButtonMoloch = 6;
    gv_cinematic.lv_cinematicTextDialog = c_invalidDialogId;
    gv_cinematic.lv_cinematicTextLabel = c_invalidDialogControlId;
    gv_cinematic.lv_cinematicUnits = UnitGroupEmpty();
    for (init_i1 = 0; init_i1 <= 10; init_i1 += 1) {
        gv_cinematic.lv_cinematicTags[init_i1] = c_textTagNone;
    }
    gv_roleSelect.lv_duration = 68;
    gv_roleSelect.lv_dialog = c_invalidDialogId;
    for (init_i1 = 0; init_i1 <= 14; init_i1 += 1) {
        gv_roleSelect.lv_rOLEUNOCCUPIED[init_i1] = true;
    }
    for (init_i1 = 0; init_i1 <= 14; init_i1 += 1) {
        gv_roleSelect.lv_roleIcon[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 6; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= 14; init_j1 += 1) {
            gv_roleSelect.lv_roleRating[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= 6; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= 14; init_j1 += 1) {
            gv_roleSelect.lv_roleRatingTooltip[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= 14; init_i1 += 1) {
        gv_roleSelect.lv_roleLabelBackground[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 14; init_i1 += 1) {
        gv_roleSelect.lv_roleLabelDefault[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 14; init_i1 += 1) {
        gv_roleSelect.lv_roleLabelAssigned[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 14; init_i1 += 1) {
        gv_roleSelect.lv_roleButton[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 14; init_i1 += 1) {
        gv_roleSelect.lv_roleButtonIconHover[init_i1] = c_invalidDialogControlId;
    }
    gv_roleSelect.lv_confirmButton = c_invalidDialogControlId;
    gv_roleSelect.lv_countdownLabel = c_invalidDialogControlId;
    gv_roleSelect.lv_observeButton = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= 6; init_i1 += 1) {
        gv_roleSelect.lv_pushButton[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 13; init_i1 += 1) {
        gv_roleSelect.lv_playerNameLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 6; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= 13; init_j1 += 1) {
            gv_roleSelect.lv_playerNameRatingLabel[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= 6; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= 13; init_j1 += 1) {
            gv_roleSelect.lv_playerNameRatingLabelTooltip[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= 14; init_i1 += 1) {
        gv_roleSelect.lv_roleReadyMark[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 13; init_i1 += 1) {
        gv_roleSelect.lv_playerNameReadyMark[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 14; init_i1 += 1) {
        gv_roleSelect.lv_playerCanBePushed[init_i1] = true;
    }
    for (init_i1 = 0; init_i1 <= 14; init_i1 += 1) {
        gv_roleSelect.lv_gENERALPlayerRoles[init_i1] = 11;
    }
    gv_roleSelect.lv_gENERALMenuUIPanel = c_invalidDialogControlId;
    gv_roleSelect.lv_gENERALIdleButton = c_invalidDialogControlId;
    gv_roleSelect.lv_gENERALChatInput = c_invalidDialogControlId;
    gv_roleSelect.lv_gENERALChatDisplay = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= 2; init_i1 += 1) {
        gv_cCGData.lv_dialog[init_i1] = c_invalidDialogId;
    }
    gv_cCGData.lv_title = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= 2; init_i1 += 1) {
        gv_cCGData.lv_toggleBox[init_i1] = c_invalidDialogControlId;
    }
    gv_cCGData.lv_save = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= 10; init_i1 += 1) {
        gv_cCGData.lv_cCGRoles[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 10; init_i1 += 1) {
        gv_cCGData.lv_cCGGroups[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 10; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= 9; init_j1 += 1) {
            gv_cCGData.lv_cCGOptionsText[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= 10; init_i1 += 1) {
        gv_cCGData.lv_cCGOptionsBackground[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 10; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= 9; init_j1 += 1) {
            for (init_k1 = 0; init_k1 <= 2; init_k1 += 1) {
                gv_cCGData.lv_cCGOptionsButtons[init_i1][init_j1][init_k1] = c_invalidDialogControlId;
            }
        }
    }
    for (init_i1 = 0; init_i1 <= 10; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= 9; init_j1 += 1) {
            gv_cCGData.lv_cCGOptionsIcons[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    gv_cCGData.lv_cCGIconFade = 55.0;
    for (init_i1 = 0; init_i1 <= 14; init_i1 += 1) {
        gv_cCGData.lv_selectedGroup[init_i1] = 1;
    }
    for (init_i1 = 0; init_i1 <= 14; init_i1 += 1) {
        gv_cCGData.lv_selection[init_i1] = c_invalidDialogControlId;
    }
    gv_votetimer = TimerCreate();
    gv_votetimerwindow = c_timerWindowNone;
    gv_reducedVoteNo = c_invalidDialogControlId;
    gv_reducedVoteYes = c_invalidDialogControlId;
    gv__35minuterealtimer = TimerCreate();
    gv_textTags.lv_hellgateDevil = c_textTagNone;
    gv_textTags.lv_hellgateAsmodeus = c_textTagNone;
    gv_textTags.lv_hellgateAstaroth = c_textTagNone;
    for (init_i1 = 0; init_i1 <= 3; init_i1 += 1) {
        gv_textTags.lv_portalTags[init_i1] = c_textTagNone;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_tutorialData[init_i].lv_phase0Dialog = c_invalidDialogId;
        for (init_i1 = 0; init_i1 <= 3; init_i1 += 1) {
            gv_tutorialData[init_i].lv_phase0ObjectivesLabels[init_i1] = c_invalidDialogControlId;
        }
        for (init_i1 = 0; init_i1 <= 3; init_i1 += 1) {
            gv_tutorialData[init_i].lv_phase0ObjectivesCheckmarks[init_i1] = c_invalidDialogControlId;
        }
        gv_tutorialData[init_i].lv_portalTextTag = c_textTagNone;
        gv_tutorialData[init_i].lv_heavensGateTextTag = c_textTagNone;
    }
    gv_funGroup = PlayerGroupActive();
    gv_perdGroup = UnitGroupEmpty();
    gv_banks.lv_statisticsDialog = c_invalidDialogId;
    gv_banks.lv_statisticsDialogMinimized = c_invalidDialogId;
    gv_banks.lv_statisticsItem = c_invalidDialogControlId;
    gv_banks.lv_statisticsItemNames = c_invalidDialogControlId;
    gv_banks.lv_statisticsPanel = c_invalidDialogControlId;
    gv_banks.lv_statisticsButtonToMinimize = c_invalidDialogControlId;
    gv_banks.lv_statisticsButtonToMaximize = c_invalidDialogControlId;
    gv_banks.lv_indepthStatisticsDialog = c_invalidDialogId;
    gv_banks.lv_indepthRoleList = c_invalidDialogControlId;
    gv_banks.lv_indepthList = c_invalidDialogControlId;
    gv_banks.lv_indepthCloseButton = c_invalidDialogControlId;
    gv_banks.lv_indepthTitleLabel = c_invalidDialogControlId;
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
int gf_DuckGetRoleIdFromLobby (string lp_role);
bool gf_ScrubList (int lp_playerNumber);
void gf_DuckRoleSelectorSubRankIconTemplateRole (int lp_x, int lp_y, int lp_roleID, int lp_dialog);
void gf_DuckRoleSelectorSubRankIconTemplateName (int lp_x, int lp_y, int lp_slotID, int lp_dialog);
void gf_DuckRoleSelectPhaseCountdown ();
void gf_DuckRoleSelectorPutPlayerstoLobbyRoles ();
void gf_CreateDialogImageForPanel (int lp_panel, int lp_x, int lp_y, int lp_anchor, int lp_sizeX, int lp_sizeY, bool lp_sizeToParent, fixed lp_fade, string lp_file, text lp_tooltip, bool lp_desaturationFlag, color lp_desatuationColor);
void gf_DuckRoleSelectorClearRole (int lp_playerID, int lp_roleID);
void gf_DuckRoleSelectorFinishFuseSystemData ();
int gf_DuckTransformDataForIntegration (int lp_duckRoleValue);
void gf_DuckRoleSelectorAssignPlayertoRole (int lp_playerID, int lp_roleID);
void gf_CreatePushButton (int lp_distanceCoefficient);
playergroup gf_PlayerswithStarCount (int lp_numStars);
void gf_UpdateCCGDialogs (int lp_player, int lp_role, int lp_group);
int gf_GetIntfromCCGString (string lp_cCGString, int lp_controlGroupNumber);
string gf_CreateCCGString (int lp_addedInteger, string lp_existingString);
void gf_AddHeroGlowtoAllHeroics ();
int gf_CreateObjectivePing (unit lp_tARGETUNIT, playergroup lp_pLAYERGROUP, text lp_tOOLTIP);
unitgroup gf_ControlGroupFromInteger (int lp_cCGValue, int lp_role, int lp_controlGroup);
void gf_CreateAftermathDialog ();
void gf_CreateKudosToastPanel (int lp_rOLE, int lp_pLAYER);
void gf_AftermathShowToasttoPlayer (int lp_sOURCEPLAYER, int lp_tARGETPLAYER);
void gf_AftermathExpireToast (int lp_pANEL);
void gf_AftermathGameEndingCooldown (int lp_item);
void gf_AftermathAcknowledgeplayer (int lp_sourcePlayer, int lp_targetPlayer);
void gf_AftermathGrayOutLeavers (int lp_pLAYER);
void gf_AftermathDialogPlayerRow (int lp_roleID, int lp_dIALOG, int lp_anchorParentItem);
void gf_AftermathFinalizePlayerStats ();
void gf_AftermathDialogCollumns (int lp_dIALOG, int lp_anchorParentItem);
void gf_HeavenVictoryTriggeredByPrimeDeath (bool lp_tEAMLEFT);
void gf_HellVictoryTriggeredByThroneDeath (bool lp_tEAMLEFT);
void gf_FinishGame ();
void gf_FinishGameforPlayer (int lp_player);
void gf_DeathMessageRefresh ();
void gf_ScoreboardRefresh (bool lp_primeKilled, unit lp_unit, int lp_player);
void gf_AddHeroKillScoreAftermathIconTooltip (unit lp_dYINGHERO, int lp_kILLINGPLAYER);
void gf_CreateObjectives ();
void gf_UpdateObjectivePrimeCount ();
void gf_UpdateObjectiveGodTimer ();
void gf_UpdateObjectiveGodhasReturned ();
void gf_UpdateObjectiveHellgateCount ();
void gf_TUTORIALInitilizePRIMETutorial (int lp_rOLE);
void gf_TUTORIALPhase0Controller (int lp_iD, int lp_rOLE);
void gf_TUTORIALSetPhaseStep (int lp_iD, int lp_rOLE, int lp_nEXTSTEP);
void gf_TUTORIALP0S2DisplayRallyDirectionPing (int lp_rOLE);
void gf_TutorialInitialObjective ();
void gf_TutorialGateisDown ();
void gf_TUTORIALPauseUnitControl (bool lp_fREEZE, unitgroup lp_group);
fixed gf_GetAPCUnitRange (unit lp_u);
bool gf_IsPlayerGood (int lp_playa);
void gf_TakeUntakeGiveAftermathStatTracking (int lp_currentOwner, int lp_nextOwner, unit lp_uNIT);
int gf_ColorID_To_Color (int lp_iD);
void gf_CreateTieDialog ();
bool gf_TieVoteProcessandOutcome ();
text gf_HandleLeaversGetforcestext (int lp_pLAYER);
bool gf_isRoleGood2 (int lp_role);
string gf_numberwithspaces (int lp_num);
void gf_RefreshCCG (int lp_player);
text gf_GetRoleNameColored (int lp_role);
void gf_UpdateStatsDisplay ();
bool gf_CheckAdminList (int lp_playerNumber);
void gf_CreateVotekickDialog (int lp_targetPlayer);
bool gf_VotekickingProcessOutcome ();
void gf_KickMoveUnits (int lp_kickedPlayer);
int gf_GetRoleNumber (string lp_role);

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_MainInitialization;
trigger gt_InitializeVariables;
trigger gt_LagHack;
trigger gt_initHumansPlaying;
trigger gt_ColorFixSaveUnitGroupsPrepareunitsforCinematic;
trigger gt_NewInitializationHookup;
trigger gt_DisplayPlayerHandles;
trigger gt_RemoveReducedModeBlockers;
trigger gt_PreloadUnits;
trigger gt_TESTMODE;
trigger gt_HelpCommand;
trigger gt_AllyOnCommand;
trigger gt_AllyOffCommand;
trigger gt_ExpCommand;
trigger gt_ResOnCommand;
trigger gt_ResurrectCommand;
trigger gt_ResOffCommand;
trigger gt_SpawnGod;
trigger gt_IntroCinematic;
trigger gt_CinematicTextTags;
trigger gt_CleanupCinematic;
trigger gt_DuckRoleSelectorDialogV2;
trigger gt_DuckRoleSelectorSelectSlotPressConfirmPressObserve;
trigger gt_DuckRoleSelectorHighlightIcons;
trigger gt_DuckRankTable;
trigger gt_DuckPlayerLeavesDuringSelection;
trigger gt_DPPushButtons3;
trigger gt_CCGDialogs;
trigger gt_CCGToggle;
trigger gt_CCGUseButton;
trigger gt_ReducedMode;
trigger gt_RoleSelectorFinished2;
trigger gt_StartActualGame;
trigger gt_Tips;
trigger gt_MoveNydusForwardTip;
trigger gt_RoleInitialization;
trigger gt_CommandGroups;
trigger gt_CustomControlGroups;
trigger gt_IntroText;
trigger gt_CreateRaphaelCargo;
trigger gt_AftermathDialogResponses;
trigger gt_CreateGodTimerWindow;
trigger gt_Justtobesure;
trigger gt_SpawnGateway;
trigger gt_SpawnEnclave;
trigger gt_SpawnCitadel;
trigger gt_PostGodSpawnThrone;
trigger gt_EliteSpawnSatan;
trigger gt_EliteSpawnAsmo;
trigger gt_EliteSpawnAsta;
trigger gt_TheMessiahDiesDP;
trigger gt_GabrielDies;
trigger gt_DumaDies;
trigger gt_UrielDies;
trigger gt_DonatelloDies;
trigger gt_SeraphielDies;
trigger gt_NathanielDies;
trigger gt_MichaelDies;
trigger gt_RaphaelDies;
trigger gt_JehoelDies;
trigger gt_MetatronDies;
trigger gt_ZadkielDiesDP;
trigger gt_MolochDiesDP;
trigger gt_AzazelDies;
trigger gt_SammyazzaDies;
trigger gt_BerithalwaysDies;
trigger gt_AbaddonDies;
trigger gt_BeelzebubDies;
trigger gt_MammonDies;
trigger gt_AsmodeusDies;
trigger gt_DevilDies;
trigger gt_AstarothDies;
trigger gt_GodDies;
trigger gt_HellgatedeathDevil;
trigger gt_HellgatedeathAsmodeus;
trigger gt_HellgatedeathAstaroth;
trigger gt_HellgatedeathMoloch;
trigger gt_DieBene;
trigger gt_DieGateway;
trigger gt_DieCitadel;
trigger gt_DieEnclave;
trigger gt_DieThrone;
trigger gt_GodReturns;
trigger gt_TextTags;
trigger gt_BenedictionZapper;
trigger gt_DuckIdleButtonRally;
trigger gt_periodicAPMcheck;
trigger gt_XPdisplayMoloch;
trigger gt_XPdisplayZadkiel;
trigger gt_NewInit2;
trigger gt_NewUpdateZad2;
trigger gt_NewUpdateMolo2;
trigger gt_ReanimateMoloch;
trigger gt_ReanimateZad;
trigger gt_StopRedirect2;
trigger gt_AttackRedirectInitial;
trigger gt_AttackRedirectFinal;
trigger gt_HandleCargoLoadUnload;
trigger gt_No4GolRaph;
trigger gt_RaphGolCountDown;
trigger gt_DonatellorepairAutocasttoggle;
trigger gt_GabrielHolyStorm;
trigger gt_MolochTransferLife;
trigger gt_DonatelloStopBeams;
trigger gt_Removeimmobilzeonmoveorder;
trigger gt_MolochLifeStealFreebie;
trigger gt_RemoveSeraphielConcentrating;
trigger gt_RemoveSeraphielConcentrating2;
trigger gt_SeraphielSnipeIssue;
trigger gt_LeapAttackArea;
trigger gt_HarpyLandFail;
trigger gt_PredatorVisiblityPeriodic;
trigger gt_PredatorCloakCooldown;
trigger gt_SammyHallucinations;
trigger gt_SammySiege;
trigger gt_PlagueHeal;
trigger gt_DonaCleanse;
trigger gt_DRHFungal;
trigger gt_Tumorcolorfix;
trigger gt_PopulateNyduses;
trigger gt_SetNydusVarDevil;
trigger gt_SetNydusVarAsmo;
trigger gt_SetNydusVarAsta;
trigger gt_InitNydusRally;
trigger gt_NydusAutoCast;
trigger gt_SendtoHeal;
trigger gt_HealGoodPeriodic;
trigger gt_HealGoodPeriodic2;
trigger gt_HealGoodPeriodic22;
trigger gt_HealGoodPeriodic222;
trigger gt_HeroHeal;
trigger gt_HeroHeal2;
trigger gt_HeroHeal3;
trigger gt_HeroHeal4;
trigger gt_LongerHealCD;
trigger gt_HealEvilPeriodicDevil;
trigger gt_HealEvilPeriodicAsmo;
trigger gt_HealEvilPeriodicAsta;
trigger gt_HealEvilDevil;
trigger gt_HealEvilAsmo;
trigger gt_HealEvilAsta;
trigger gt_HealOrganic;
trigger gt_HealMechanic;
trigger gt_UntakeAllTEXTCOMMAND;
trigger gt_UntakeTEXTCOMMAND;
trigger gt_TakeTEXTCOMMAND;
trigger gt_GiveTeal;
trigger gt_GiveWhite;
trigger gt_GiveBrown;
trigger gt_GiveGreen;
trigger gt_GivePurple;
trigger gt_GiveGray;
trigger gt_GiveRed;
trigger gt_GiveOrange;
trigger gt_GiveYellow;
trigger gt_GivePink;
trigger gt_TieTextTrigger;
trigger gt_TieDialogClicked;
trigger gt_Mute;
trigger gt_Unmute;
trigger gt_PerdTurretInit;
trigger gt_PerdTurrets;
trigger gt_BerithDeath;
trigger gt_Badkids;
trigger gt_Forwabbit;
trigger gt_HandleInitialLeavers;
trigger gt_HandleLeavers;
trigger gt_BankInitialize;
trigger gt_SetupStatsDisplayDialogs;
trigger gt_HeroDeathBankUpdate;
trigger gt_PeriodicBankSave;
trigger gt_BankMinimize;
trigger gt_IndepthClose;
trigger gt_IndepthOpen;
trigger gt_ListSelectionRedirectNames;
trigger gt_ListSelectionRedirectRoles;
trigger gt_ListSelectionRedirectRoles2;
trigger gt_IncrementGamesPlayed;
trigger gt_DecreaseGamesPlayedTie;
trigger gt_Votekick;
trigger gt_ANYDIALOGITEMISUSEDVotekicking;

//--------------------------------------------------------------------------------------------------
// Custom Script: Bootstrap
//--------------------------------------------------------------------------------------------------
include "scripts/main"

//--------------------------------------------------------------------------------------------------
// Custom Script Initialization
//--------------------------------------------------------------------------------------------------
void InitCustomScript () {
    main();
}

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
int gf_DuckGetRoleIdFromLobby (string lp_role) {
    // Automatic Variable Declarations
    string auto8F19AFFE_val;

    // Implementation
    auto8F19AFFE_val = lp_role;
    if (auto8F19AFFE_val == "0001") {
        return 1;
    }
    else if (auto8F19AFFE_val == "0002") {
        return 2;
    }
    else if (auto8F19AFFE_val == "0003") {
        return 3;
    }
    else if (auto8F19AFFE_val == "0004") {
        return 4;
    }
    else if (auto8F19AFFE_val == "0005") {
        return 5;
    }
    else if (auto8F19AFFE_val == "0006") {
        return 6;
    }
    else if (auto8F19AFFE_val == "0007") {
        return 7;
    }
    else if (auto8F19AFFE_val == "0008") {
        return 8;
    }
    else if (auto8F19AFFE_val == "0009") {
        return 9;
    }
    else if (auto8F19AFFE_val == "0010") {
        return 10;
    }
    else if (auto8F19AFFE_val == "0021") {
        return 12;
    }
    else if (auto8F19AFFE_val == "0023") {
        return 12;
    }
    else if (auto8F19AFFE_val == "0022") {
        return 12;
    }
    else {
        return 11;
    }
}

bool gf_ScrubList (int lp_playerNumber) {
    // Automatic Variable Declarations
    // Implementation
    if (((PlayerHandle(lp_playerNumber) == "1-S2-1-7857814"))) {
        return true;
    }
    else {
        return false;
    }
}

void gf_DuckRoleSelectorSubRankIconTemplateRole (int lp_x, int lp_y, int lp_roleID, int lp_dialog) {
    // Variable Declarations
    int lv_panel;
    fixed lv_debugFade;
    int lv_size;
    int lv_starSize;
    int lv_adminStarSize;
    int lv_poopSize;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_panel = c_invalidDialogControlId;
    lv_debugFade = 100.0;
    lv_size = 36;
    lv_starSize = 18;
    lv_adminStarSize = 24;
    lv_poopSize = 36;

    // Implementation
    libNtve_gf_CreateDialogItemImage(lp_dialog, 40, 40, c_anchorTopLeft, lp_x, lp_y, StringToText(""), "Assets\\Textures\\ui_help_frame_tips_checkmark_terran.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_roleSelect.lv_roleReadyMark[lp_roleID] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 513, PlayerGroupAll());
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 20.0);
    DialogControlCreate(lp_dialog, c_triggerControlTypePanel);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, lp_x, lp_y);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), lv_size, lv_size);
    lv_panel = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 513, PlayerGroupAll());
    gv_roleSelect.lv_roleRating[0][lp_roleID] = lv_panel;
    gf_CreateDialogImageForPanel(lv_panel, 0, 0, c_anchorCenter, 0, 0, true, lv_debugFade, "Assets\\Textures\\white.dds", StringExternal("Param/Value/3780FC75"), false, Color(150*100/255,150*100/255,30*100/255));
    gv_roleSelect.lv_roleRatingTooltip[0][lp_roleID] = DialogControlLastCreated();
    DialogControlCreateInPanel(lv_panel, c_triggerControlTypeLabel);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 40, 40);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 12, 0);
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/D316633F"), PlayerGroupAll());
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(149*100/255,150*100/255,151*100/255), PlayerGroupAll());
    DialogControlCreate(lp_dialog, c_triggerControlTypePanel);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, lp_x, lp_y);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), lv_size, lv_size);
    lv_panel = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 513, PlayerGroupAll());
    gv_roleSelect.lv_roleRating[1][lp_roleID] = lv_panel;
    gf_CreateDialogImageForPanel(lv_panel, 0, 0, c_anchorCenter, 0, 0, true, lv_debugFade, "Assets\\Textures\\white.dds", StringExternal("Param/Value/45563EBD"), false, Color(150*100/255,150*100/255,30*100/255));
    gv_roleSelect.lv_roleRatingTooltip[1][lp_roleID] = DialogControlLastCreated();
    gf_CreateDialogImageForPanel(lv_panel, 0, 0, c_anchorCenter, lv_starSize, lv_starSize, false, 0.0, "Assets\\Textures\\ui_achievement.dds", null, true, Color(150*100/255,150*100/255,30*100/255));
    DialogControlCreate(lp_dialog, c_triggerControlTypePanel);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, lp_x, lp_y);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), lv_size, lv_size);
    lv_panel = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 513, PlayerGroupAll());
    gv_roleSelect.lv_roleRating[2][lp_roleID] = lv_panel;
    gf_CreateDialogImageForPanel(lv_panel, 0, 0, c_anchorCenter, 0, 0, true, lv_debugFade, "Assets\\Textures\\white.dds", StringExternal("Param/Value/2B75CA03"), false, Color(150*100/255,150*100/255,30*100/255));
    gv_roleSelect.lv_roleRatingTooltip[2][lp_roleID] = DialogControlLastCreated();
    gf_CreateDialogImageForPanel(lv_panel, 0, 0, c_anchorTop, lv_starSize, lv_starSize, false, 0.0, "Assets\\Textures\\ui_achievement.dds", null, true, Color(150*100/255,150*100/255,30*100/255));
    gf_CreateDialogImageForPanel(lv_panel, 0, 0, c_anchorBottom, lv_starSize, lv_starSize, false, 0.0, "Assets\\Textures\\ui_achievement.dds", null, true, Color(150*100/255,150*100/255,30*100/255));
    DialogControlCreate(lp_dialog, c_triggerControlTypePanel);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, lp_x, lp_y);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), lv_size, lv_size);
    lv_panel = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 513, PlayerGroupAll());
    gv_roleSelect.lv_roleRating[3][lp_roleID] = lv_panel;
    gf_CreateDialogImageForPanel(lv_panel, 0, 0, c_anchorCenter, 0, 0, true, lv_debugFade, "Assets\\Textures\\white.dds", StringExternal("Param/Value/32BEBF80"), false, Color(150*100/255,150*100/255,30*100/255));
    gv_roleSelect.lv_roleRatingTooltip[3][lp_roleID] = DialogControlLastCreated();
    gf_CreateDialogImageForPanel(lv_panel, 0, 0, c_anchorTop, lv_starSize, lv_starSize, false, 0.0, "Assets\\Textures\\ui_achievement.dds", null, true, Color(150*100/255,150*100/255,30*100/255));
    gf_CreateDialogImageForPanel(lv_panel, 0, 0, c_anchorBottomLeft, lv_starSize, lv_starSize, false, 0.0, "Assets\\Textures\\ui_achievement.dds", null, true, Color(150*100/255,150*100/255,30*100/255));
    gf_CreateDialogImageForPanel(lv_panel, 0, 0, c_anchorBottomRight, lv_starSize, lv_starSize, false, 0.0, "Assets\\Textures\\ui_achievement.dds", null, true, Color(150*100/255,150*100/255,30*100/255));
    DialogControlCreate(lp_dialog, c_triggerControlTypePanel);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, lp_x, lp_y);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), lv_size, lv_size);
    lv_panel = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 513, PlayerGroupAll());
    gv_roleSelect.lv_roleRating[4][lp_roleID] = lv_panel;
    gf_CreateDialogImageForPanel(lv_panel, 0, 0, c_anchorCenter, 0, 0, true, lv_debugFade, "Assets\\Textures\\white.dds", StringExternal("Param/Value/024DD15A"), false, Color(150*100/255,150*100/255,30*100/255));
    gv_roleSelect.lv_roleRatingTooltip[4][lp_roleID] = DialogControlLastCreated();
    gf_CreateDialogImageForPanel(lv_panel, 0, 0, c_anchorTop, lv_starSize, lv_starSize, false, 0.0, "Assets\\Textures\\ui_achievement.dds", null, true, Color(150*100/255,150*100/255,30*100/255));
    gf_CreateDialogImageForPanel(lv_panel, 0, 0, c_anchorLeft, lv_starSize, lv_starSize, false, 0.0, "Assets\\Textures\\ui_achievement.dds", null, true, Color(150*100/255,150*100/255,30*100/255));
    gf_CreateDialogImageForPanel(lv_panel, 0, 0, c_anchorRight, lv_starSize, lv_starSize, false, 0.0, "Assets\\Textures\\ui_achievement.dds", null, true, Color(150*100/255,150*100/255,30*100/255));
    gf_CreateDialogImageForPanel(lv_panel, 0, 0, c_anchorBottom, lv_starSize, lv_starSize, false, 0.0, "Assets\\Textures\\ui_achievement.dds", null, true, Color(150*100/255,150*100/255,30*100/255));
    DialogControlCreate(lp_dialog, c_triggerControlTypePanel);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, lp_x, lp_y);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), lv_size, lv_size);
    lv_panel = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 513, PlayerGroupAll());
    gv_roleSelect.lv_roleRating[5][lp_roleID] = lv_panel;
    gf_CreateDialogImageForPanel(lv_panel, 0, 0, c_anchorCenter, 0, 0, true, lv_debugFade, "Assets\\Textures\\white.dds", StringExternal("Param/Value/46C8E5D1"), false, Color(150*100/255,150*100/255,30*100/255));
    gv_roleSelect.lv_roleRatingTooltip[5][lp_roleID] = DialogControlLastCreated();
    gf_CreateDialogImageForPanel(lv_panel, 0, 0, c_anchorTopLeft, lv_starSize, lv_starSize, false, 0.0, "Assets\\Textures\\ui_achievement.dds", null, true, Color(0,66*100/255,100));
    gf_CreateDialogImageForPanel(lv_panel, 0, 0, c_anchorTopRight, lv_starSize, lv_starSize, false, 0.0, "Assets\\Textures\\ui_achievement.dds", null, true, Color(0,66*100/255,100));
    gf_CreateDialogImageForPanel(lv_panel, 0, 0, c_anchorBottomLeft, lv_starSize, lv_starSize, false, 0.0, "Assets\\Textures\\ui_achievement.dds", null, true, Color(0,66*100/255,100));
    gf_CreateDialogImageForPanel(lv_panel, 0, 0, c_anchorBottomRight, lv_starSize, lv_starSize, false, 0.0, "Assets\\Textures\\ui_achievement.dds", null, true, Color(0,66*100/255,100));
    gf_CreateDialogImageForPanel(lv_panel, 0, 0, c_anchorCenter, lv_adminStarSize, lv_adminStarSize, false, 0.0, "Assets\\Textures\\ui_achievement.dds", null, true, Color(150*100/255,150*100/255,30*100/255));
    DialogControlCreate(lp_dialog, c_triggerControlTypePanel);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, lp_x, lp_y);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), lv_size, lv_size);
    lv_panel = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 513, PlayerGroupAll());
    gv_roleSelect.lv_roleRating[6][lp_roleID] = lv_panel;
    gf_CreateDialogImageForPanel(lv_panel, 0, 0, c_anchorCenter, 0, 0, true, lv_debugFade, "Assets\\Textures\\white.dds", StringExternal("Param/Value/BB605BCE"), false, Color(150*100/255,150*100/255,30*100/255));
    gv_roleSelect.lv_roleRatingTooltip[6][lp_roleID] = DialogControlLastCreated();
    gf_CreateDialogImageForPanel(lv_panel, 0, 0, c_anchorCenter, lv_poopSize, lv_poopSize, false, 0.0, "ForIchi (1).dds", null, false, Color(100,100,100));
}

void gf_DuckRoleSelectorSubRankIconTemplateName (int lp_x, int lp_y, int lp_slotID, int lp_dialog) {
    // Variable Declarations
    int lv_panel;
    fixed lv_debugFade;
    int lv_size;
    int lv_starSize;
    int lv_adminStarSize;
    int lv_poopSize;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_panel = c_invalidDialogControlId;
    lv_debugFade = 100.0;
    lv_size = 36;
    lv_starSize = 18;
    lv_adminStarSize = 24;
    lv_poopSize = 36;

    // Implementation
    libNtve_gf_CreateDialogItemImage(lp_dialog, 40, 40, c_anchorTopLeft, lp_x, lp_y, StringToText(""), "Assets\\Textures\\ui_help_frame_tips_checkmark_terran.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_roleSelect.lv_playerNameReadyMark[lp_slotID] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 513, PlayerGroupAll());
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 20.0);
    DialogControlCreate(lp_dialog, c_triggerControlTypePanel);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, lp_x, lp_y);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), lv_size, lv_size);
    lv_panel = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 513, PlayerGroupAll());
    gv_roleSelect.lv_playerNameRatingLabel[0][lp_slotID] = lv_panel;
    gf_CreateDialogImageForPanel(lv_panel, 0, 0, c_anchorCenter, 0, 0, true, lv_debugFade, "Assets\\Textures\\white.dds", StringExternal("Param/Value/0AC80BA9"), false, Color(150*100/255,150*100/255,30*100/255));
    gv_roleSelect.lv_playerNameRatingLabelTooltip[0][lp_slotID] = DialogControlLastCreated();
    DialogControlCreateInPanel(lv_panel, c_triggerControlTypeLabel);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 40, 40);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 12, 0);
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/383597E8"), PlayerGroupAll());
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(149*100/255,150*100/255,151*100/255), PlayerGroupAll());
    DialogControlCreate(lp_dialog, c_triggerControlTypePanel);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, lp_x, lp_y);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), lv_size, lv_size);
    lv_panel = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 513, PlayerGroupAll());
    gv_roleSelect.lv_playerNameRatingLabel[1][lp_slotID] = lv_panel;
    gf_CreateDialogImageForPanel(lv_panel, 0, 0, c_anchorCenter, 0, 0, true, lv_debugFade, "Assets\\Textures\\white.dds", StringExternal("Param/Value/08BD1EFE"), false, Color(150*100/255,150*100/255,30*100/255));
    gv_roleSelect.lv_playerNameRatingLabelTooltip[1][lp_slotID] = DialogControlLastCreated();
    gf_CreateDialogImageForPanel(lv_panel, 0, 0, c_anchorCenter, lv_starSize, lv_starSize, false, 0.0, "Assets\\Textures\\ui_achievement.dds", null, true, Color(150*100/255,150*100/255,30*100/255));
    DialogControlCreate(lp_dialog, c_triggerControlTypePanel);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, lp_x, lp_y);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), lv_size, lv_size);
    lv_panel = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 513, PlayerGroupAll());
    gv_roleSelect.lv_playerNameRatingLabel[2][lp_slotID] = lv_panel;
    gf_CreateDialogImageForPanel(lv_panel, 0, 0, c_anchorCenter, 0, 0, true, lv_debugFade, "Assets\\Textures\\white.dds", StringExternal("Param/Value/C0AEB81D"), false, Color(150*100/255,150*100/255,30*100/255));
    gv_roleSelect.lv_playerNameRatingLabelTooltip[2][lp_slotID] = DialogControlLastCreated();
    gf_CreateDialogImageForPanel(lv_panel, 0, 0, c_anchorTop, lv_starSize, lv_starSize, false, 0.0, "Assets\\Textures\\ui_achievement.dds", null, true, Color(150*100/255,150*100/255,30*100/255));
    gf_CreateDialogImageForPanel(lv_panel, 0, 0, c_anchorBottom, lv_starSize, lv_starSize, false, 0.0, "Assets\\Textures\\ui_achievement.dds", null, true, Color(150*100/255,150*100/255,30*100/255));
    DialogControlCreate(lp_dialog, c_triggerControlTypePanel);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, lp_x, lp_y);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), lv_size, lv_size);
    lv_panel = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 513, PlayerGroupAll());
    gv_roleSelect.lv_playerNameRatingLabel[3][lp_slotID] = lv_panel;
    gf_CreateDialogImageForPanel(lv_panel, 0, 0, c_anchorCenter, 0, 0, true, lv_debugFade, "Assets\\Textures\\white.dds", StringExternal("Param/Value/834D5A1A"), false, Color(150*100/255,150*100/255,30*100/255));
    gv_roleSelect.lv_playerNameRatingLabelTooltip[3][lp_slotID] = DialogControlLastCreated();
    gf_CreateDialogImageForPanel(lv_panel, 0, 0, c_anchorTop, lv_starSize, lv_starSize, false, 0.0, "Assets\\Textures\\ui_achievement.dds", null, true, Color(150*100/255,150*100/255,30*100/255));
    gf_CreateDialogImageForPanel(lv_panel, 0, 0, c_anchorBottomLeft, lv_starSize, lv_starSize, false, 0.0, "Assets\\Textures\\ui_achievement.dds", null, true, Color(150*100/255,150*100/255,30*100/255));
    gf_CreateDialogImageForPanel(lv_panel, 0, 0, c_anchorBottomRight, lv_starSize, lv_starSize, false, 0.0, "Assets\\Textures\\ui_achievement.dds", null, true, Color(150*100/255,150*100/255,30*100/255));
    DialogControlCreate(lp_dialog, c_triggerControlTypePanel);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, lp_x, lp_y);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), lv_size, lv_size);
    lv_panel = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 513, PlayerGroupAll());
    gv_roleSelect.lv_playerNameRatingLabel[4][lp_slotID] = lv_panel;
    gf_CreateDialogImageForPanel(lv_panel, 0, 0, c_anchorCenter, 0, 0, true, lv_debugFade, "Assets\\Textures\\white.dds", StringExternal("Param/Value/645FCC41"), false, Color(150*100/255,150*100/255,30*100/255));
    gv_roleSelect.lv_playerNameRatingLabelTooltip[4][lp_slotID] = DialogControlLastCreated();
    gf_CreateDialogImageForPanel(lv_panel, 0, 0, c_anchorTop, lv_starSize, lv_starSize, false, 0.0, "Assets\\Textures\\ui_achievement.dds", null, true, Color(150*100/255,150*100/255,30*100/255));
    gf_CreateDialogImageForPanel(lv_panel, 0, 0, c_anchorLeft, lv_starSize, lv_starSize, false, 0.0, "Assets\\Textures\\ui_achievement.dds", null, true, Color(150*100/255,150*100/255,30*100/255));
    gf_CreateDialogImageForPanel(lv_panel, 0, 0, c_anchorRight, lv_starSize, lv_starSize, false, 0.0, "Assets\\Textures\\ui_achievement.dds", null, true, Color(150*100/255,150*100/255,30*100/255));
    gf_CreateDialogImageForPanel(lv_panel, 0, 0, c_anchorBottom, lv_starSize, lv_starSize, false, 0.0, "Assets\\Textures\\ui_achievement.dds", null, true, Color(150*100/255,150*100/255,30*100/255));
    DialogControlCreate(lp_dialog, c_triggerControlTypePanel);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, lp_x, lp_y);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), lv_size, lv_size);
    lv_panel = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 513, PlayerGroupAll());
    gv_roleSelect.lv_playerNameRatingLabel[5][lp_slotID] = lv_panel;
    gf_CreateDialogImageForPanel(lv_panel, 0, 0, c_anchorCenter, 0, 0, true, lv_debugFade, "Assets\\Textures\\white.dds", StringExternal("Param/Value/62D12D2E"), false, Color(150*100/255,150*100/255,30*100/255));
    gv_roleSelect.lv_playerNameRatingLabelTooltip[5][lp_slotID] = DialogControlLastCreated();
    gf_CreateDialogImageForPanel(lv_panel, 0, 0, c_anchorTopLeft, lv_starSize, lv_starSize, false, 0.0, "Assets\\Textures\\ui_achievement.dds", null, true, Color(0,66*100/255,100));
    gf_CreateDialogImageForPanel(lv_panel, 0, 0, c_anchorTopRight, lv_starSize, lv_starSize, false, 0.0, "Assets\\Textures\\ui_achievement.dds", null, true, Color(0,66*100/255,100));
    gf_CreateDialogImageForPanel(lv_panel, 0, 0, c_anchorBottomLeft, lv_starSize, lv_starSize, false, 0.0, "Assets\\Textures\\ui_achievement.dds", null, true, Color(0,66*100/255,100));
    gf_CreateDialogImageForPanel(lv_panel, 0, 0, c_anchorBottomRight, lv_starSize, lv_starSize, false, 0.0, "Assets\\Textures\\ui_achievement.dds", null, true, Color(0,66*100/255,100));
    gf_CreateDialogImageForPanel(lv_panel, 0, 0, c_anchorCenter, lv_adminStarSize, lv_adminStarSize, false, 0.0, "Assets\\Textures\\ui_achievement.dds", null, true, Color(150*100/255,150*100/255,30*100/255));
    DialogControlCreate(lp_dialog, c_triggerControlTypePanel);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, lp_x, lp_y);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), lv_size, lv_size);
    lv_panel = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 513, PlayerGroupAll());
    gv_roleSelect.lv_playerNameRatingLabel[6][lp_slotID] = lv_panel;
    gf_CreateDialogImageForPanel(lv_panel, 0, 0, c_anchorCenter, 0, 0, true, lv_debugFade, "Assets\\Textures\\white.dds", StringExternal("Param/Value/9F8D5ED5"), false, Color(150*100/255,150*100/255,30*100/255));
    gv_roleSelect.lv_playerNameRatingLabelTooltip[6][lp_slotID] = DialogControlLastCreated();
    gf_CreateDialogImageForPanel(lv_panel, 0, 0, c_anchorCenter, lv_poopSize, lv_poopSize, false, 0.0, "ForIchi (1).dds", null, false, Color(100,100,100));
}

trigger auto_gf_DuckRoleSelectPhaseCountdown_Trigger = null;

void gf_DuckRoleSelectPhaseCountdown () {
    if (auto_gf_DuckRoleSelectPhaseCountdown_Trigger == null) {
        auto_gf_DuckRoleSelectPhaseCountdown_Trigger = TriggerCreate("auto_gf_DuckRoleSelectPhaseCountdown_TriggerFunc");
    }

    TriggerExecute(auto_gf_DuckRoleSelectPhaseCountdown_Trigger, false, false);
}

bool auto_gf_DuckRoleSelectPhaseCountdown_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    while ((gv_roleSelect.lv_duration > 0) && (gv_roleSelect.lv_roleSelectDone == false)) {
        TextExpressionSetToken("Param/Expression/6BE80014", "A", StringExternal("Param/Value/F3411FA9"));
        TextExpressionSetToken("Param/Expression/6BE80014", "B", IntToText(gv_roleSelect.lv_duration));
        TextExpressionSetToken("Param/Expression/6BE80014", "C", StringExternal("Param/Value/51EDFA7C"));
        libNtve_gf_SetDialogItemText(gv_roleSelect.lv_countdownLabel, TextExpressionAssemble("Param/Expression/6BE80014"), PlayerGroupAll());
        gv_roleSelect.lv_duration -= 1;
        Wait(1.0, c_timeReal);
    }
    gf_DuckRoleSelectorFinishFuseSystemData();
    return true;
}

void gf_DuckRoleSelectorPutPlayerstoLobbyRoles () {
    // Automatic Variable Declarations
    playergroup autoFE1D28B7_g;
    int autoFE1D28B7_var;

    // Implementation
    autoFE1D28B7_g = PlayerGroupActive();
    autoFE1D28B7_var = -1;
    while (true) {
        autoFE1D28B7_var = PlayerGroupNextPlayer(autoFE1D28B7_g, autoFE1D28B7_var);
        if (autoFE1D28B7_var < 0) { break; }
        gf_DuckRoleSelectorAssignPlayertoRole(autoFE1D28B7_var, gf_DuckGetRoleIdFromLobby(GameAttributePlayerValue("1", autoFE1D28B7_var)));
    }
}

void gf_CreateDialogImageForPanel (int lp_panel, int lp_x, int lp_y, int lp_anchor, int lp_sizeX, int lp_sizeY, bool lp_sizeToParent, fixed lp_fade, string lp_file, text lp_tooltip, bool lp_desaturationFlag, color lp_desatuationColor) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlCreateInPanel(lp_panel, c_triggerControlTypeImage);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), lp_anchor, lp_x, lp_y);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), lp_sizeX, lp_sizeY);
    DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), lp_sizeToParent);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), lp_file, PlayerGroupAll());
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, lp_fade);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), lp_tooltip, PlayerGroupAll());
    libNtve_gf_SetDialogItemDesaturated(DialogControlLastCreated(), lp_desaturationFlag, PlayerGroupAll());
    libNtve_gf_SetDialogItemDesaturationColor(DialogControlLastCreated(), (lp_desatuationColor), PlayerGroupAll());
}

void gf_DuckRoleSelectorClearRole (int lp_playerID, int lp_roleID) {
    // Variable Declarations
    int lv_cycle;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_roleID == 11)) {
        DialogControlSetVisible(gv_roleSelect.lv_playerNameReadyMark[lp_playerID], PlayerGroupAll(), false);
        DialogControlSetVisible(gv_roleSelect.lv_playerNameLabel[lp_playerID], PlayerGroupAll(), false);
        gv_roleSelect.lv_gENERALPlayerRoles[lp_playerID] = 0;
        while ((lv_cycle <= 6)) {
            DialogControlSetVisible(gv_roleSelect.lv_playerNameRatingLabel[lv_cycle][lp_playerID], PlayerGroupAll(), false);
            lv_cycle += 1;
        }
        return ;
    }

    if ((lp_roleID == 12)) {
        gv_roleSelect.lv_gENERALPlayerRoles[lp_playerID] = 0;
        gv_roleSelect.lv_playerReady[lp_playerID] = false;
        libNtve_gf_SetDialogItemText(gv_roleSelect.lv_confirmButton, StringExternal("Param/Value/A60518A7"), PlayerGroupSingle(lp_playerID));
        DialogControlSetEnabled(gv_roleSelect.lv_confirmButton, PlayerGroupSingle(lp_playerID), true);
        return ;
    }

    if ((gv_roleSelect.lv_roleTakenStatus[lp_roleID] > 0)) {
        gv_roleSelect.lv_gENERALPlayerRoles[gv_roleSelect.lv_roleTakenStatus[lp_roleID]] = 0;
        gv_roleSelect.lv_roleTakenStatus[lp_roleID] = 0;
    }

    DialogControlSetEnabled(gv_roleSelect.lv_roleButton[lp_roleID], PlayerGroupAll(), true);
    DialogControlSetVisible(gv_roleSelect.lv_roleButton[lp_roleID], PlayerGroupAll(), true);
    DialogControlSetVisible(gv_roleSelect.lv_roleButtonIconHover[lp_roleID], PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemDesaturated(gv_roleSelect.lv_roleIcon[lp_roleID], true, PlayerGroupAll());
    DialogControlFadeTransparency(gv_roleSelect.lv_roleLabelDefault[lp_roleID], PlayerGroupAll(), 0.0, 55.0);
    DialogControlFadeTransparency(gv_roleSelect.lv_roleIcon[lp_roleID], PlayerGroupAll(), 0.0, 55.0);
    DialogControlSetVisible(gv_roleSelect.lv_roleLabelDefault[lp_roleID], PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemColor(gv_roleSelect.lv_roleLabelDefault[lp_roleID], Color(149*100/255,150*100/255,151*100/255), PlayerGroupAll());
    DialogControlSetVisible(gv_roleSelect.lv_roleLabelAssigned[lp_roleID], PlayerGroupAll(), false);
    while ((lv_cycle <= 6)) {
        DialogControlSetVisible(gv_roleSelect.lv_roleRating[lv_cycle][lp_roleID], PlayerGroupAll(), false);
        lv_cycle += 1;
    }
    DialogControlSetVisible(gv_roleSelect.lv_roleReadyMark[lp_roleID], PlayerGroupAll(), false);
}

void gf_DuckRoleSelectorFinishFuseSystemData () {
    // Variable Declarations
    int lv_cycle;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_cycle = 1;

    // Implementation
    if ((gv_roleSelect.lv_roleSelectDone == true)) {
        return ;
    }

    gv_roleSelect.lv_roleSelectDone = true;
    while ((lv_cycle <= 13)) {
        gv_playerData[lv_cycle].lv_currentRole = gf_DuckTransformDataForIntegration(gv_roleSelect.lv_gENERALPlayerRoles[lv_cycle]);
        lv_cycle += 1;
    }
    TriggerExecute(gt_RoleSelectorFinished2, true, false);
    TriggerEnable(gt_DuckPlayerLeavesDuringSelection, false);
}

int gf_DuckTransformDataForIntegration (int lp_duckRoleValue) {
    // Variable Declarations
    int lv_intanjirRoleValue;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_intanjirRoleValue = (lp_duckRoleValue-1);
    if (((lp_duckRoleValue == 2) || (lp_duckRoleValue == 4))) {
        lv_intanjirRoleValue = lp_duckRoleValue;
        return lv_intanjirRoleValue;
    }
    else if (((lp_duckRoleValue == 3) || (lp_duckRoleValue == 5))) {
        lv_intanjirRoleValue = (lp_duckRoleValue - 2);
        return lv_intanjirRoleValue;
    }
    else if ((lp_duckRoleValue == 11)) {
        lv_intanjirRoleValue = -1;
        return lv_intanjirRoleValue;
    }
    else if ((lp_duckRoleValue == 12)) {
        lv_intanjirRoleValue = -2;
        return lv_intanjirRoleValue;
    }
    return lv_intanjirRoleValue;
}

void gf_DuckRoleSelectorAssignPlayertoRole (int lp_playerID, int lp_roleID) {
    // Variable Declarations
    int lv_cycle;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    gv_roleSelect.lv_gENERALPlayerRoles[lp_playerID] = lp_roleID;
    if ((lp_roleID == 11)) {
        DialogControlSetVisible(gv_roleSelect.lv_playerNameLabel[lp_playerID], PlayerGroupAll(), true);
        libNtve_gf_SetDialogItemText(gv_roleSelect.lv_observeButton, StringExternal("Param/Value/71CCCDDF"), PlayerGroupSingle(lp_playerID));
        while ((lv_cycle <= 5)) {
            DialogControlSetVisible(gv_roleSelect.lv_playerNameRatingLabel[lv_cycle][lp_playerID], PlayerGroupAll(), false);
            lv_cycle += 1;
        }
        DialogControlSetVisible(gv_roleSelect.lv_playerNameRatingLabel[gv_roleSelect.lv_gENERALPlayerRating[lp_playerID]][lp_playerID], PlayerGroupAll(), true);
        libNtve_gf_SetDialogItemTooltip(gv_roleSelect.lv_playerNameRatingLabelTooltip[gv_roleSelect.lv_gENERALPlayerRating[lp_playerID]][lp_playerID], gv_roleSelect.lv_ratingText[lp_playerID], PlayerGroupAll());
        if ((gv_roleSelect.lv_playerReady[lp_playerID] == true)) {
            DialogControlSetVisible(gv_roleSelect.lv_playerNameReadyMark[lp_playerID], PlayerGroupAll(), true);
        }

        return ;
    }

    if ((lp_roleID == 12)) {
        DialogControlSetVisible(gv_roleSelect.lv_playerNameLabel[lp_playerID], PlayerGroupAll(), false);
        libNtve_gf_SetDialogItemText(gv_roleSelect.lv_observeButton, StringExternal("Param/Value/83421DEF"), PlayerGroupSingle(lp_playerID));
        while ((lv_cycle <= 5)) {
            DialogControlSetVisible(gv_roleSelect.lv_playerNameRatingLabel[lv_cycle][lp_playerID], PlayerGroupAll(), false);
            lv_cycle += 1;
        }
        DialogControlSetVisible(gv_roleSelect.lv_playerNameReadyMark[lp_playerID], PlayerGroupAll(), false);
        gv_roleSelect.lv_playerReady[lp_playerID] = true;
        libNtve_gf_SetDialogItemText(gv_roleSelect.lv_confirmButton, StringExternal("Param/Value/EED4251B"), PlayerGroupSingle(lp_playerID));
        DialogControlSetEnabled(gv_roleSelect.lv_confirmButton, PlayerGroupSingle(lp_playerID), false);
        return ;
    }

    libNtve_gf_SetDialogItemText(gv_roleSelect.lv_observeButton, StringExternal("Param/Value/8BA849F9"), PlayerGroupSingle(lp_playerID));
    libNtve_gf_SetDialogItemDesaturated(gv_roleSelect.lv_roleIcon[lp_roleID], false, PlayerGroupAll());
    DialogControlFadeTransparency(gv_roleSelect.lv_roleIcon[lp_roleID], PlayerGroupAll(), 0.0, 0.0);
    DialogControlSetEnabled(gv_roleSelect.lv_roleButton[lp_roleID], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_roleSelect.lv_roleButton[lp_roleID], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_roleSelect.lv_roleButtonIconHover[lp_roleID], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_roleSelect.lv_roleLabelDefault[lp_roleID], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_roleSelect.lv_roleLabelAssigned[lp_roleID], PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemText(gv_roleSelect.lv_roleLabelAssigned[lp_roleID], PlayerName(lp_playerID), PlayerGroupAll());
    gv_roleSelect.lv_roleTakenStatus[lp_roleID] = lp_playerID;
    while ((lv_cycle <= 5)) {
        DialogControlSetVisible(gv_roleSelect.lv_roleRating[lv_cycle][lp_roleID], PlayerGroupAll(), false);
        lv_cycle += 1;
    }
    DialogControlSetVisible(gv_roleSelect.lv_roleRating[gv_roleSelect.lv_gENERALPlayerRating[lp_playerID]][lp_roleID], PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemTooltip(gv_roleSelect.lv_roleRatingTooltip[gv_roleSelect.lv_gENERALPlayerRating[lp_playerID]][lp_roleID], gv_roleSelect.lv_ratingText[lp_playerID], PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_roleSelect.lv_roleLabelAssigned[lp_roleID], gv_roleSelect.lv_ratingText[lp_playerID], PlayerGroupAll());
    if ((gv_roleSelect.lv_playerReady[lp_playerID] == true)) {
        DialogControlSetVisible(gv_roleSelect.lv_roleReadyMark[lp_roleID], PlayerGroupAll(), true);
    }

}

void gf_CreatePushButton (int lp_distanceCoefficient) {
    // Variable Declarations
    int lv_initialOffset;

    // Automatic Variable Declarations
    int auto96A2C39C_val;

    // Variable Initialization
    lv_initialOffset = 60;

    // Implementation
    if ((lp_distanceCoefficient >= 6)) {
        lv_initialOffset = 80;
    }
    else {
        lv_initialOffset = 60;
    }
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 165, 55, c_anchorTopLeft, 350, ((lp_distanceCoefficient * 65)+lv_initialOffset), StringToText(""), StringExternal("Param/Value/31BDCE68"), "Assets\\Textures\\ui_battlenet_glue_minibutton_blue_normaloverpressedover.dds");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_battlenet_glue_minibutton_blue_normalpressed.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeNormal, PlayerGroupAll());
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize20Bold", PlayerGroupAll());
    auto96A2C39C_val = lp_distanceCoefficient;
    if (auto96A2C39C_val == gv_syn.lv_roleMessiah) {
        gv_roleSelect.lv_pushButton[gv_syn.lv_pushButtonMessiah] = DialogControlLastCreated();
    }
    else if (auto96A2C39C_val == 4) {
        gv_roleSelect.lv_pushButton[gv_syn.lv_pushButtonJehoel] = DialogControlLastCreated();
    }
    else if (auto96A2C39C_val == gv_syn.lv_roleZadkiel) {
        gv_roleSelect.lv_pushButton[gv_syn.lv_pushButtonZadkiel] = DialogControlLastCreated();
    }
    else if (auto96A2C39C_val == gv_syn.lv_roleDevil) {
        gv_roleSelect.lv_pushButton[gv_syn.lv_pushButtonDevil] = DialogControlLastCreated();
    }
    else if (auto96A2C39C_val == gv_syn.lv_roleAsmodeus) {
        gv_roleSelect.lv_pushButton[gv_syn.lv_pushButtonAsmodeus] = DialogControlLastCreated();
    }
    else if (auto96A2C39C_val == gv_syn.lv_roleAstaroth) {
        gv_roleSelect.lv_pushButton[gv_syn.lv_pushButtonAstaroth] = DialogControlLastCreated();
    }
    else if (auto96A2C39C_val == gv_syn.lv_roleMoloch) {
        gv_roleSelect.lv_pushButton[gv_syn.lv_pushButtonMoloch] = DialogControlLastCreated();
    }
    else {
        return ;
    }
}

playergroup gf_PlayerswithStarCount (int lp_numStars) {
    // Variable Declarations
    playergroup lv_starGroup;
    int lv_index;

    // Automatic Variable Declarations
    const int auto11DECB69_ae = 10;
    const int auto11DECB69_ai = 1;

    // Variable Initialization
    lv_starGroup = PlayerGroupEmpty();

    // Implementation
    lv_index = 1;
    for ( ; ( (auto11DECB69_ai >= 0 && lv_index <= auto11DECB69_ae) || (auto11DECB69_ai < 0 && lv_index >= auto11DECB69_ae) ) ; lv_index += auto11DECB69_ai ) {
        if ((gv_roleSelect.lv_gENERALPlayerRating[lv_index] == lp_numStars)) {
            PlayerGroupAdd(lv_starGroup, lv_index);
        }

    }
    return lv_starGroup;
}

void gf_UpdateCCGDialogs (int lp_player, int lp_role, int lp_group) {
    // Variable Declarations
    int lv_value;
    int lv_remainingValue;
    int lv_decrement;
    int lv_choice;
    int lv_i;
    int lv_j;

    // Automatic Variable Declarations
    const int auto1D9A1F03_ae = 9;
    const int auto1D9A1F03_ai = 1;
    const int auto6C84B580_ae = 8;
    const int auto6C84B580_ai = 1;
    const int auto2D8F60EE_ae = 8;
    const int auto2D8F60EE_ai = 1;

    // Variable Initialization
    lv_value = gv_cCGData.lv_savedGroups[lp_player][lp_role][lp_group];
    lv_remainingValue = gv_cCGData.lv_savedGroups[lp_player][lp_role][lp_group];
    lv_decrement = 256;

    // Implementation
    lv_i = 0;
    for ( ; ( (auto1D9A1F03_ai >= 0 && lv_i <= auto1D9A1F03_ae) || (auto1D9A1F03_ai < 0 && lv_i >= auto1D9A1F03_ae) ) ; lv_i += auto1D9A1F03_ai ) {
        libNtve_gf_SetDialogItemImage(gv_cCGData.lv_cCGGroups[lv_i], "Assets\\Textures\\ui_gamemenu_menubutton_normalpressed_terran.dds", PlayerGroupSingle(lp_player));
        libNtve_gf_SetDialogItemImage(gv_cCGData.lv_cCGRoles[lv_i], "Assets\\Textures\\ui_battlenet_glue_minibutton_green_normalpressed.dds", PlayerGroupSingle(lp_player));
        lv_j = 0;
        for ( ; ( (auto6C84B580_ai >= 0 && lv_j <= auto6C84B580_ae) || (auto6C84B580_ai < 0 && lv_j >= auto6C84B580_ae) ) ; lv_j += auto6C84B580_ai ) {
            DialogControlSetVisible(gv_cCGData.lv_cCGOptionsText[lv_i][lv_j], PlayerGroupSingle(lp_player), false);
            DialogControlSetVisible(gv_cCGData.lv_cCGOptionsIcons[lv_i][lv_j], PlayerGroupSingle(lp_player), false);
            DialogControlSetVisible(gv_cCGData.lv_cCGOptionsButtons[lv_i][lv_j][0], PlayerGroupSingle(lp_player), false);
            DialogControlSetVisible(gv_cCGData.lv_cCGOptionsButtons[lv_i][lv_j][1], PlayerGroupSingle(lp_player), false);
            DialogControlSetVisible(gv_cCGData.lv_cCGOptionsBackground[lv_j], PlayerGroupSingle(lp_player), false);
        }
    }
    lv_choice = 0;
    for ( ; ( (auto2D8F60EE_ai >= 0 && lv_choice <= auto2D8F60EE_ae) || (auto2D8F60EE_ai < 0 && lv_choice >= auto2D8F60EE_ae) ) ; lv_choice += auto2D8F60EE_ai ) {
        DialogControlSetVisible(gv_cCGData.lv_cCGOptionsText[lp_role][lv_choice], PlayerGroupSingle(lp_player), true);
        DialogControlSetVisible(gv_cCGData.lv_cCGOptionsIcons[lp_role][lv_choice], PlayerGroupSingle(lp_player), true);
        if ((gv_cCGData.lv_cCGOptionsText[lp_role][lv_choice] != c_invalidDialogControlId)) {
            DialogControlSetVisible(gv_cCGData.lv_cCGOptionsBackground[lv_choice], PlayerGroupSingle(lp_player), true);
        }

        if ((lv_remainingValue >= lv_decrement)) {
            DialogControlSetVisible(gv_cCGData.lv_cCGOptionsButtons[lp_role][lv_choice][1], PlayerGroupSingle(lp_player), true);
            DialogControlFadeTransparency(gv_cCGData.lv_cCGOptionsIcons[lp_role][lv_choice], PlayerGroupSingle(lp_player), 0.0, 0.0);
            libNtve_gf_SetDialogItemDesaturated(gv_cCGData.lv_cCGOptionsIcons[lp_role][lv_choice], false, PlayerGroupSingle(lp_player));
            libNtve_gf_SetDialogItemColor(gv_cCGData.lv_cCGOptionsBackground[lv_choice], Color(150*100/255,150*100/255,30*100/255), PlayerGroupSingle(lp_player));
            lv_remainingValue = (lv_remainingValue - lv_decrement);
        }
        else {
            DialogControlSetVisible(gv_cCGData.lv_cCGOptionsButtons[lp_role][lv_choice][0], PlayerGroupSingle(lp_player), true);
            DialogControlFadeTransparency(gv_cCGData.lv_cCGOptionsIcons[lp_role][lv_choice], PlayerGroupSingle(lp_player), 0.0, gv_cCGData.lv_cCGIconFade);
            libNtve_gf_SetDialogItemDesaturated(gv_cCGData.lv_cCGOptionsIcons[lp_role][lv_choice], true, PlayerGroupSingle(lp_player));
            libNtve_gf_SetDialogItemColor(gv_cCGData.lv_cCGOptionsBackground[lv_choice], Color(100,100,100), PlayerGroupSingle(lp_player));
        }
        lv_decrement = (lv_decrement / 2);
    }
    libNtve_gf_SetDialogItemImage(gv_cCGData.lv_cCGGroups[lp_group], "Assets\\Textures\\ui_gamemenu_menubutton_normaloverpressedover_terran.dds", PlayerGroupSingle(lp_player));
    libNtve_gf_SetDialogItemImage(gv_cCGData.lv_cCGRoles[lp_role], "Assets\\Textures\\ui_battlenet_glue_minibutton_green_normaloverpressedover.dds", PlayerGroupSingle(lp_player));
    TextExpressionSetToken("Param/Expression/B823F970", "A", StringToText(gv_syn.lv_roleNames[gv_cCGData.lv_selectedRole[lp_player]]));
    TextExpressionSetToken("Param/Expression/B823F970", "B", IntToText(gv_cCGData.lv_selectedGroup[lp_player]));
    libNtve_gf_SetDialogItemText(gv_cCGData.lv_selection[lp_player], TextExpressionAssemble("Param/Expression/B823F970"), PlayerGroupSingle(lp_player));
}

int gf_GetIntfromCCGString (string lp_cCGString, int lp_controlGroupNumber) {
    // Variable Declarations
    string lv_cCGStringwithSpaces;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_cCGStringwithSpaces = "";

    // Implementation
    lv_cCGStringwithSpaces = StringReplaceWord(lp_cCGString, ",", " ", c_stringReplaceAll, c_stringCase);
    return StringToInt(StringWord(lv_cCGStringwithSpaces, lp_controlGroupNumber));
}

string gf_CreateCCGString (int lp_addedInteger, string lp_existingString) {
    // Automatic Variable Declarations
    // Implementation
    return (lp_existingString + IntToString(lp_addedInteger) + ",");
}

void gf_AddHeroGlowtoAllHeroics () {
    // Automatic Variable Declarations
    unitgroup autoF1C5B74D_g;
    int autoF1C5B74D_u;
    unit autoF1C5B74D_var;

    // Implementation
    autoF1C5B74D_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoF1C5B74D_u = UnitGroupCount(autoF1C5B74D_g, c_unitCountAll);
    for (;; autoF1C5B74D_u -= 1) {
        autoF1C5B74D_var = UnitGroupUnitFromEnd(autoF1C5B74D_g, autoF1C5B74D_u);
        if (autoF1C5B74D_var == null) { break; }
        if ((UnitGetType(autoF1C5B74D_var) == "Loki")) {
            libNtve_gf_SendActorMessageToUnit(autoF1C5B74D_var, "Create SystemHeroicGlowMessiahUnit");
        }

        if (((UnitGetType(autoF1C5B74D_var) == "Mutalisk") || (UnitGetType(autoF1C5B74D_var) == "Ultralisk") || (UnitGetType(autoF1C5B74D_var) == "Infestor") || (UnitGetType(autoF1C5B74D_var) == "Odin") || (UnitGetType(autoF1C5B74D_var) == "Sentry") || (UnitGetType(autoF1C5B74D_var) == "Colossus") || (UnitGetType(autoF1C5B74D_var) == "Metatron") || (UnitGetType(autoF1C5B74D_var) == "HelsAngelAssault") || (UnitGetType(autoF1C5B74D_var) == "Hellion"))) {
            libNtve_gf_SendActorMessageToUnit(autoF1C5B74D_var, "Create SystemHeroicGlowHugeUnit");
        }

        if (((UnitGetType(autoF1C5B74D_var) == "Karass") || (UnitGetType(autoF1C5B74D_var) == "Lurker") || (UnitGetType(autoF1C5B74D_var) == "Hydralisk2") || (UnitGetType(autoF1C5B74D_var) == "KerriganChar") || (UnitGetType(autoF1C5B74D_var) == "Zeratul") || (UnitGetType(autoF1C5B74D_var) == "Stalker") || (UnitGetType(autoF1C5B74D_var) == "WarPig") || (UnitGetType(autoF1C5B74D_var) == "MedivacAPC") || (UnitGetType(autoF1C5B74D_var) == "PrisonZealot") || (UnitGetType(autoF1C5B74D_var) == "Donatello") || (UnitGetType(autoF1C5B74D_var) == "Nova") || (UnitGetType(autoF1C5B74D_var) == "DarkTemplar"))) {
            libNtve_gf_SendActorMessageToUnit(autoF1C5B74D_var, "Create SystemHeroicGlowMediumUnit");
        }

    }
}

int gf_CreateObjectivePing (unit lp_tARGETUNIT, playergroup lp_pLAYERGROUP, text lp_tOOLTIP) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_CreatePingFacingAngle(lp_pLAYERGROUP, "PingObjective", UnitGetPosition(lp_tARGETUNIT), ColorWithAlpha(100.00, 100.00, 100.00, 0.00), 0.0, 0.0);
    PingSetScale(PingLastCreated(), 0.8);
    PingSetUnit(PingLastCreated(), lp_tARGETUNIT);
    PingSetTooltip(PingLastCreated(), lp_tOOLTIP);
    return PingLastCreated();
}

unitgroup gf_ControlGroupFromInteger (int lp_cCGValue, int lp_role, int lp_controlGroup) {
    // Variable Declarations
    unitgroup lv_returnUnitGroup;
    unit lv_dummyUnit;
    int lv_tempValue;
    int lv_magnitude;

    // Automatic Variable Declarations
    int auto99790A44_val;
    int auto891BB2F7_val;
    int auto298E8C9E_val;
    int autoD4A0C86B_val;
    int auto06111F05_val;
    int autoAEA6C199_val;
    int auto99D8EBB0_val;
    int auto0D0B509C_val;
    int auto41C1959C_val;
    int auto9CAE56A7_val;
    int auto15910559_val;

    // Variable Initialization
    lv_returnUnitGroup = UnitGroupEmpty();
    lv_tempValue = lp_cCGValue;

    // Implementation
    auto99790A44_val = lp_role;
    if (auto99790A44_val == gv_syn.lv_roleMessiah) {
        if ((lp_cCGValue != 0)) {
            lv_magnitude = 256;
            if ((lv_tempValue >= lv_magnitude)) {
                lv_tempValue = (lv_tempValue - lv_magnitude);
                UnitGroupAddUnitGroup(lv_returnUnitGroup, libNtve_gf_ConvertUnitToUnitGroup(UnitFromId(501)));
            }

            lv_magnitude = 128;
            if ((lv_tempValue >= lv_magnitude)) {
                lv_tempValue = (lv_tempValue - lv_magnitude);
                UnitGroupAddUnitGroup(lv_returnUnitGroup, libNtve_gf_ConvertUnitToUnitGroup(UnitFromId(238160895)));
            }

            lv_magnitude = 64;
            if ((lv_tempValue >= lv_magnitude)) {
                lv_tempValue = (lv_tempValue - lv_magnitude);
                UnitGroupAddUnitGroup(lv_returnUnitGroup, libNtve_gf_ConvertUnitToUnitGroup(UnitFromId(622)));
            }

            lv_magnitude = 32;
            if ((lv_tempValue >= lv_magnitude)) {
                lv_tempValue = (lv_tempValue - lv_magnitude);
                UnitGroupAddUnitGroup(lv_returnUnitGroup, UnitGroup("Spectre", gv_gameData.lv_rolesOwners[lp_role], RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            }

            lv_magnitude = 16;
            if ((lv_tempValue >= lv_magnitude)) {
                lv_tempValue = (lv_tempValue - lv_magnitude);
                UnitGroupAddUnitGroup(lv_returnUnitGroup, UnitGroup("ThorAP", gv_gameData.lv_rolesOwners[lp_role], RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
                UnitGroupAddUnitGroup(lv_returnUnitGroup, UnitGroup("Thor", gv_gameData.lv_rolesOwners[lp_role], RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            }

            lv_magnitude = 8;
            if ((lv_tempValue >= lv_magnitude)) {
                lv_tempValue = (lv_tempValue - lv_magnitude);
                UnitGroupAddUnitGroup(lv_returnUnitGroup, UnitGroup("Predator", gv_gameData.lv_rolesOwners[lp_role], RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            }

            lv_magnitude = 4;
            if ((lv_tempValue >= lv_magnitude)) {
                lv_tempValue = (lv_tempValue - lv_magnitude);
                UnitGroupAddUnitGroup(lv_returnUnitGroup, UnitGroup("MissileTurret", gv_gameData.lv_rolesOwners[lp_role], RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
                UnitGroupAddUnitGroup(lv_returnUnitGroup, UnitGroup("Pylon", gv_gameData.lv_rolesOwners[lp_role], RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
                UnitGroupAddUnitGroup(lv_returnUnitGroup, UnitGroup("SiegeTankSkinPreview", gv_gameData.lv_rolesOwners[lp_role], RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
                UnitGroupAddUnitGroup(lv_returnUnitGroup, UnitGroup("SiegeTankSieged", gv_gameData.lv_rolesOwners[lp_role], RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
                UnitGroupAddUnitGroup(lv_returnUnitGroup, UnitGroup("SiegeTank", gv_gameData.lv_rolesOwners[lp_role], RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
                UnitGroupAddUnitGroup(lv_returnUnitGroup, UnitGroup("PhotonCannon", gv_gameData.lv_rolesOwners[lp_role], RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
                UnitGroupAddUnitGroup(lv_returnUnitGroup, UnitGroup("Bunker", gv_gameData.lv_rolesOwners[lp_role], RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
                UnitGroupAddUnitGroup(lv_returnUnitGroup, UnitGroup("PerditionTurret", gv_gameData.lv_rolesOwners[lp_role], RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
                UnitGroupAddUnitGroup(lv_returnUnitGroup, UnitGroup("PerditionTurretUnderground", gv_gameData.lv_rolesOwners[lp_role], RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            }

            lv_magnitude = 2;
            if ((lv_tempValue >= lv_magnitude)) {
                lv_tempValue = (lv_tempValue - lv_magnitude);
                UnitGroupAddUnitGroup(lv_returnUnitGroup, UnitGroup("Ghost", gv_gameData.lv_rolesOwners[lp_role], RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            }

            lv_magnitude = 1;
            if ((lv_tempValue >= lv_magnitude)) {
                lv_tempValue = (lv_tempValue - lv_magnitude);
                UnitGroupAddUnitGroup(lv_returnUnitGroup, libNtve_gf_ConvertUnitToUnitGroup(UnitFromId(22)));
            }

        }
        else {
            auto891BB2F7_val = lp_controlGroup;
            if (auto891BB2F7_val == 1) {
                UnitGroupAddUnitGroup(lv_returnUnitGroup, libNtve_gf_ConvertUnitToUnitGroup(UnitFromId(501)));
            }
            else if (auto891BB2F7_val == 2) {
                UnitGroupAddUnitGroup(lv_returnUnitGroup, libNtve_gf_ConvertUnitToUnitGroup(UnitFromId(238160895)));
            }
            else if (auto891BB2F7_val == 3) {
                UnitGroupAddUnitGroup(lv_returnUnitGroup, libNtve_gf_ConvertUnitToUnitGroup(UnitFromId(622)));
            }
            else if (auto891BB2F7_val == 4) {
                UnitGroupAddUnitGroup(lv_returnUnitGroup, libNtve_gf_ConvertUnitToUnitGroup(UnitFromId(22)));
            }
            else {
            }
        }
        return lv_returnUnitGroup;
    }
    else if (auto99790A44_val == gv_syn.lv_roleMichael) {
        if ((lp_cCGValue != 0)) {
            lv_magnitude = 256;
            if ((lv_tempValue >= lv_magnitude)) {
                lv_tempValue = (lv_tempValue - lv_magnitude);
                UnitGroupAddUnitGroup(lv_returnUnitGroup, libNtve_gf_ConvertUnitToUnitGroup(UnitFromId(729)));
            }

            lv_magnitude = 128;
            if ((lv_tempValue >= lv_magnitude)) {
                lv_tempValue = (lv_tempValue - lv_magnitude);
                UnitGroupAddUnitGroup(lv_returnUnitGroup, libNtve_gf_ConvertUnitToUnitGroup(UnitFromId(211)));
            }

            lv_magnitude = 64;
            if ((lv_tempValue >= lv_magnitude)) {
                lv_tempValue = (lv_tempValue - lv_magnitude);
                UnitGroupAddUnitGroup(lv_returnUnitGroup, UnitGroup("Marine", gv_gameData.lv_rolesOwners[lp_role], RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            }

            lv_magnitude = 32;
            if ((lv_tempValue >= lv_magnitude)) {
                lv_tempValue = (lv_tempValue - lv_magnitude);
                UnitGroupAddUnitGroup(lv_returnUnitGroup, UnitGroup("Firebat", gv_gameData.lv_rolesOwners[lp_role], RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            }

            lv_magnitude = 16;
            if ((lv_tempValue >= lv_magnitude)) {
                lv_tempValue = (lv_tempValue - lv_magnitude);
            }

            lv_magnitude = 8;
            if ((lv_tempValue >= lv_magnitude)) {
                lv_tempValue = (lv_tempValue - lv_magnitude);
            }

            lv_magnitude = 4;
            if ((lv_tempValue >= lv_magnitude)) {
                lv_tempValue = (lv_tempValue - lv_magnitude);
                UnitGroupAddUnitGroup(lv_returnUnitGroup, UnitGroup("MissileTurret", gv_gameData.lv_rolesOwners[lp_role], RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
                UnitGroupAddUnitGroup(lv_returnUnitGroup, UnitGroup("Pylon", gv_gameData.lv_rolesOwners[lp_role], RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
                UnitGroupAddUnitGroup(lv_returnUnitGroup, UnitGroup("SiegeTankSkinPreview", gv_gameData.lv_rolesOwners[lp_role], RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
                UnitGroupAddUnitGroup(lv_returnUnitGroup, UnitGroup("SiegeTankSieged", gv_gameData.lv_rolesOwners[lp_role], RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
                UnitGroupAddUnitGroup(lv_returnUnitGroup, UnitGroup("SiegeTank", gv_gameData.lv_rolesOwners[lp_role], RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
                UnitGroupAddUnitGroup(lv_returnUnitGroup, UnitGroup("PhotonCannon", gv_gameData.lv_rolesOwners[lp_role], RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
                UnitGroupAddUnitGroup(lv_returnUnitGroup, UnitGroup("Bunker", gv_gameData.lv_rolesOwners[lp_role], RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
                UnitGroupAddUnitGroup(lv_returnUnitGroup, UnitGroup("PerditionTurret", gv_gameData.lv_rolesOwners[lp_role], RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
                UnitGroupAddUnitGroup(lv_returnUnitGroup, UnitGroup("PerditionTurretUnderground", gv_gameData.lv_rolesOwners[lp_role], RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            }

            lv_magnitude = 2;
            if ((lv_tempValue >= lv_magnitude)) {
                lv_tempValue = (lv_tempValue - lv_magnitude);
                UnitGroupAddUnitGroup(lv_returnUnitGroup, UnitGroup("Ghost", gv_gameData.lv_rolesOwners[lp_role], RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            }

            lv_magnitude = 1;
            if ((lv_tempValue >= lv_magnitude)) {
                lv_tempValue = (lv_tempValue - lv_magnitude);
                UnitGroupAddUnitGroup(lv_returnUnitGroup, libNtve_gf_ConvertUnitToUnitGroup(UnitFromId(22)));
            }

        }
        else {
            auto298E8C9E_val = lp_controlGroup;
            if (auto298E8C9E_val == 1) {
                UnitGroupAddUnitGroup(lv_returnUnitGroup, libNtve_gf_ConvertUnitToUnitGroup(UnitFromId(729)));
            }
            else if (auto298E8C9E_val == 2) {
                UnitGroupAddUnitGroup(lv_returnUnitGroup, libNtve_gf_ConvertUnitToUnitGroup(UnitFromId(211)));
            }
            else if (auto298E8C9E_val == 4) {
                UnitGroupAddUnitGroup(lv_returnUnitGroup, libNtve_gf_ConvertUnitToUnitGroup(UnitFromId(22)));
            }
            else {
            }
        }
        return lv_returnUnitGroup;
    }
    else if (auto99790A44_val == gv_syn.lv_roleUriel) {
        if ((lp_cCGValue != 0)) {
            lv_magnitude = 256;
            if ((lv_tempValue >= lv_magnitude)) {
                lv_tempValue = (lv_tempValue - lv_magnitude);
                UnitGroupAddUnitGroup(lv_returnUnitGroup, libNtve_gf_ConvertUnitToUnitGroup(UnitFromId(65)));
            }

            lv_magnitude = 128;
            if ((lv_tempValue >= lv_magnitude)) {
                lv_tempValue = (lv_tempValue - lv_magnitude);
                UnitGroupAddUnitGroup(lv_returnUnitGroup, libNtve_gf_ConvertUnitToUnitGroup(UnitFromId(440)));
            }

            lv_magnitude = 64;
            if ((lv_tempValue >= lv_magnitude)) {
                lv_tempValue = (lv_tempValue - lv_magnitude);
                UnitGroupAddUnitGroup(lv_returnUnitGroup, UnitGroup("Goliath", gv_gameData.lv_rolesOwners[lp_role], RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            }

            lv_magnitude = 32;
            if ((lv_tempValue >= lv_magnitude)) {
                lv_tempValue = (lv_tempValue - lv_magnitude);
                UnitGroupAddUnitGroup(lv_returnUnitGroup, UnitGroup("Reaper", gv_gameData.lv_rolesOwners[lp_role], RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            }

            lv_magnitude = 16;
            if ((lv_tempValue >= lv_magnitude)) {
                lv_tempValue = (lv_tempValue - lv_magnitude);
            }

            lv_magnitude = 8;
            if ((lv_tempValue >= lv_magnitude)) {
                lv_tempValue = (lv_tempValue - lv_magnitude);
            }

            lv_magnitude = 4;
            if ((lv_tempValue >= lv_magnitude)) {
                lv_tempValue = (lv_tempValue - lv_magnitude);
                UnitGroupAddUnitGroup(lv_returnUnitGroup, UnitGroup("MissileTurret", gv_gameData.lv_rolesOwners[lp_role], RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
                UnitGroupAddUnitGroup(lv_returnUnitGroup, UnitGroup("Pylon", gv_gameData.lv_rolesOwners[lp_role], RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
                UnitGroupAddUnitGroup(lv_returnUnitGroup, UnitGroup("SiegeTankSkinPreview", gv_gameData.lv_rolesOwners[lp_role], RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
                UnitGroupAddUnitGroup(lv_returnUnitGroup, UnitGroup("SiegeTankSieged", gv_gameData.lv_rolesOwners[lp_role], RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
                UnitGroupAddUnitGroup(lv_returnUnitGroup, UnitGroup("SiegeTank", gv_gameData.lv_rolesOwners[lp_role], RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
                UnitGroupAddUnitGroup(lv_returnUnitGroup, UnitGroup("PhotonCannon", gv_gameData.lv_rolesOwners[lp_role], RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
                UnitGroupAddUnitGroup(lv_returnUnitGroup, UnitGroup("Bunker", gv_gameData.lv_rolesOwners[lp_role], RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
                UnitGroupAddUnitGroup(lv_returnUnitGroup, UnitGroup("PerditionTurret", gv_gameData.lv_rolesOwners[lp_role], RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
                UnitGroupAddUnitGroup(lv_returnUnitGroup, UnitGroup("PerditionTurretUnderground", gv_gameData.lv_rolesOwners[lp_role], RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            }

            lv_magnitude = 2;
            if ((lv_tempValue >= lv_magnitude)) {
                lv_tempValue = (lv_tempValue - lv_magnitude);
                UnitGroupAddUnitGroup(lv_returnUnitGroup, UnitGroup("Ghost", gv_gameData.lv_rolesOwners[lp_role], RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            }

            lv_magnitude = 1;
            if ((lv_tempValue >= lv_magnitude)) {
                lv_tempValue = (lv_tempValue - lv_magnitude);
                UnitGroupAddUnitGroup(lv_returnUnitGroup, libNtve_gf_ConvertUnitToUnitGroup(UnitFromId(22)));
            }

        }
        else {
            autoD4A0C86B_val = lp_controlGroup;
            if (autoD4A0C86B_val == 1) {
                UnitGroupAddUnitGroup(lv_returnUnitGroup, libNtve_gf_ConvertUnitToUnitGroup(UnitFromId(65)));
            }
            else if (autoD4A0C86B_val == 2) {
                UnitGroupAddUnitGroup(lv_returnUnitGroup, libNtve_gf_ConvertUnitToUnitGroup(UnitFromId(440)));
            }
            else if (autoD4A0C86B_val == 4) {
                UnitGroupAddUnitGroup(lv_returnUnitGroup, libNtve_gf_ConvertUnitToUnitGroup(UnitFromId(22)));
            }
            else {
            }
        }
        return lv_returnUnitGroup;
    }
    else if (auto99790A44_val == gv_syn.lv_roleJehoel) {
        if ((lp_cCGValue != 0)) {
            lv_magnitude = 256;
            if ((lv_tempValue >= lv_magnitude)) {
                lv_tempValue = (lv_tempValue - lv_magnitude);
                UnitGroupAddUnitGroup(lv_returnUnitGroup, libNtve_gf_ConvertUnitToUnitGroup(UnitFromId(347)));
            }

            lv_magnitude = 128;
            if ((lv_tempValue >= lv_magnitude)) {
                lv_tempValue = (lv_tempValue - lv_magnitude);
                UnitGroupAddUnitGroup(lv_returnUnitGroup, libNtve_gf_ConvertUnitToUnitGroup(UnitFromId(348)));
            }

            lv_magnitude = 64;
            if ((lv_tempValue >= lv_magnitude)) {
                lv_tempValue = (lv_tempValue - lv_magnitude);
                UnitGroupAddUnitGroup(lv_returnUnitGroup, UnitGroup("Diamondback", gv_gameData.lv_rolesOwners[lp_role], RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            }

            lv_magnitude = 32;
            if ((lv_tempValue >= lv_magnitude)) {
                lv_tempValue = (lv_tempValue - lv_magnitude);
                UnitGroupAddUnitGroup(lv_returnUnitGroup, UnitGroup("Zealot", gv_gameData.lv_rolesOwners[lp_role], RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            }

            lv_magnitude = 16;
            if ((lv_tempValue >= lv_magnitude)) {
                lv_tempValue = (lv_tempValue - lv_magnitude);
            }

            lv_magnitude = 8;
            if ((lv_tempValue >= lv_magnitude)) {
                lv_tempValue = (lv_tempValue - lv_magnitude);
            }

            lv_magnitude = 4;
            if ((lv_tempValue >= lv_magnitude)) {
                lv_tempValue = (lv_tempValue - lv_magnitude);
                UnitGroupAddUnitGroup(lv_returnUnitGroup, UnitGroup("MissileTurret", gv_gameData.lv_rolesOwners[lp_role], RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
                UnitGroupAddUnitGroup(lv_returnUnitGroup, UnitGroup("Pylon", gv_gameData.lv_rolesOwners[lp_role], RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
                UnitGroupAddUnitGroup(lv_returnUnitGroup, UnitGroup("SiegeTankSkinPreview", gv_gameData.lv_rolesOwners[lp_role], RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
                UnitGroupAddUnitGroup(lv_returnUnitGroup, UnitGroup("SiegeTankSieged", gv_gameData.lv_rolesOwners[lp_role], RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
                UnitGroupAddUnitGroup(lv_returnUnitGroup, UnitGroup("SiegeTank", gv_gameData.lv_rolesOwners[lp_role], RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
                UnitGroupAddUnitGroup(lv_returnUnitGroup, UnitGroup("PhotonCannon", gv_gameData.lv_rolesOwners[lp_role], RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
                UnitGroupAddUnitGroup(lv_returnUnitGroup, UnitGroup("Bunker", gv_gameData.lv_rolesOwners[lp_role], RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
                UnitGroupAddUnitGroup(lv_returnUnitGroup, UnitGroup("PerditionTurret", gv_gameData.lv_rolesOwners[lp_role], RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
                UnitGroupAddUnitGroup(lv_returnUnitGroup, UnitGroup("PerditionTurretUnderground", gv_gameData.lv_rolesOwners[lp_role], RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            }

            lv_magnitude = 2;
            if ((lv_tempValue >= lv_magnitude)) {
                lv_tempValue = (lv_tempValue - lv_magnitude);
                UnitGroupAddUnitGroup(lv_returnUnitGroup, UnitGroup("Ghost", gv_gameData.lv_rolesOwners[lp_role], RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            }

            lv_magnitude = 1;
            if ((lv_tempValue >= lv_magnitude)) {
                lv_tempValue = (lv_tempValue - lv_magnitude);
                UnitGroupAddUnitGroup(lv_returnUnitGroup, libNtve_gf_ConvertUnitToUnitGroup(UnitFromId(22)));
            }

        }
        else {
            auto06111F05_val = lp_controlGroup;
            if (auto06111F05_val == 1) {
                UnitGroupAddUnitGroup(lv_returnUnitGroup, libNtve_gf_ConvertUnitToUnitGroup(UnitFromId(347)));
            }
            else if (auto06111F05_val == 2) {
                UnitGroupAddUnitGroup(lv_returnUnitGroup, libNtve_gf_ConvertUnitToUnitGroup(UnitFromId(348)));
            }
            else if (auto06111F05_val == 4) {
                UnitGroupAddUnitGroup(lv_returnUnitGroup, libNtve_gf_ConvertUnitToUnitGroup(UnitFromId(22)));
            }
            else {
            }
        }
        return lv_returnUnitGroup;
    }
    else if (auto99790A44_val == gv_syn.lv_roleSeraphiel) {
        if ((lp_cCGValue != 0)) {
            lv_magnitude = 256;
            if ((lv_tempValue >= lv_magnitude)) {
                lv_tempValue = (lv_tempValue - lv_magnitude);
                UnitGroupAddUnitGroup(lv_returnUnitGroup, libNtve_gf_ConvertUnitToUnitGroup(UnitFromId(313)));
            }

            lv_magnitude = 128;
            if ((lv_tempValue >= lv_magnitude)) {
                lv_tempValue = (lv_tempValue - lv_magnitude);
                UnitGroupAddUnitGroup(lv_returnUnitGroup, libNtve_gf_ConvertUnitToUnitGroup(UnitFromId(330)));
            }

            lv_magnitude = 64;
            if ((lv_tempValue >= lv_magnitude)) {
                lv_tempValue = (lv_tempValue - lv_magnitude);
                UnitGroupAddUnitGroup(lv_returnUnitGroup, UnitGroup("Stalker2", gv_gameData.lv_rolesOwners[lp_role], RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            }

            lv_magnitude = 32;
            if ((lv_tempValue >= lv_magnitude)) {
                lv_tempValue = (lv_tempValue - lv_magnitude);
                UnitGroupAddUnitGroup(lv_returnUnitGroup, UnitGroup("Marauder", gv_gameData.lv_rolesOwners[lp_role], RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            }

            lv_magnitude = 16;
            if ((lv_tempValue >= lv_magnitude)) {
                lv_tempValue = (lv_tempValue - lv_magnitude);
            }

            lv_magnitude = 8;
            if ((lv_tempValue >= lv_magnitude)) {
                lv_tempValue = (lv_tempValue - lv_magnitude);
            }

            lv_magnitude = 4;
            if ((lv_tempValue >= lv_magnitude)) {
                lv_tempValue = (lv_tempValue - lv_magnitude);
                UnitGroupAddUnitGroup(lv_returnUnitGroup, UnitGroup("MissileTurret", gv_gameData.lv_rolesOwners[lp_role], RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
                UnitGroupAddUnitGroup(lv_returnUnitGroup, UnitGroup("Pylon", gv_gameData.lv_rolesOwners[lp_role], RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
                UnitGroupAddUnitGroup(lv_returnUnitGroup, UnitGroup("SiegeTankSkinPreview", gv_gameData.lv_rolesOwners[lp_role], RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
                UnitGroupAddUnitGroup(lv_returnUnitGroup, UnitGroup("SiegeTankSieged", gv_gameData.lv_rolesOwners[lp_role], RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
                UnitGroupAddUnitGroup(lv_returnUnitGroup, UnitGroup("SiegeTank", gv_gameData.lv_rolesOwners[lp_role], RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
                UnitGroupAddUnitGroup(lv_returnUnitGroup, UnitGroup("PhotonCannon", gv_gameData.lv_rolesOwners[lp_role], RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
                UnitGroupAddUnitGroup(lv_returnUnitGroup, UnitGroup("Bunker", gv_gameData.lv_rolesOwners[lp_role], RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
                UnitGroupAddUnitGroup(lv_returnUnitGroup, UnitGroup("PerditionTurret", gv_gameData.lv_rolesOwners[lp_role], RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
                UnitGroupAddUnitGroup(lv_returnUnitGroup, UnitGroup("PerditionTurretUnderground", gv_gameData.lv_rolesOwners[lp_role], RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            }

            lv_magnitude = 2;
            if ((lv_tempValue >= lv_magnitude)) {
                lv_tempValue = (lv_tempValue - lv_magnitude);
                UnitGroupAddUnitGroup(lv_returnUnitGroup, UnitGroup("Ghost", gv_gameData.lv_rolesOwners[lp_role], RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            }

            lv_magnitude = 1;
            if ((lv_tempValue >= lv_magnitude)) {
                lv_tempValue = (lv_tempValue - lv_magnitude);
                UnitGroupAddUnitGroup(lv_returnUnitGroup, libNtve_gf_ConvertUnitToUnitGroup(UnitFromId(22)));
            }

        }
        else {
            autoAEA6C199_val = lp_controlGroup;
            if (autoAEA6C199_val == 1) {
                UnitGroupAddUnitGroup(lv_returnUnitGroup, libNtve_gf_ConvertUnitToUnitGroup(UnitFromId(313)));
            }
            else if (autoAEA6C199_val == 2) {
                UnitGroupAddUnitGroup(lv_returnUnitGroup, libNtve_gf_ConvertUnitToUnitGroup(UnitFromId(330)));
            }
            else if (autoAEA6C199_val == 4) {
                UnitGroupAddUnitGroup(lv_returnUnitGroup, libNtve_gf_ConvertUnitToUnitGroup(UnitFromId(22)));
            }
            else {
            }
        }
        return lv_returnUnitGroup;
    }
    else if (auto99790A44_val == gv_syn.lv_roleZadkiel) {
        if ((lp_cCGValue != 0)) {
            lv_magnitude = 256;
            if ((lv_tempValue >= lv_magnitude)) {
                lv_tempValue = (lv_tempValue - lv_magnitude);
                UnitGroupAddUnitGroup(lv_returnUnitGroup, libNtve_gf_ConvertUnitToUnitGroup(UnitFromId(711)));
            }

            lv_magnitude = 128;
            if ((lv_tempValue >= lv_magnitude)) {
                lv_tempValue = (lv_tempValue - lv_magnitude);
            }

            lv_magnitude = 64;
            if ((lv_tempValue >= lv_magnitude)) {
                lv_tempValue = (lv_tempValue - lv_magnitude);
            }

            lv_magnitude = 32;
            if ((lv_tempValue >= lv_magnitude)) {
                lv_tempValue = (lv_tempValue - lv_magnitude);
            }

            lv_magnitude = 16;
            if ((lv_tempValue >= lv_magnitude)) {
                lv_tempValue = (lv_tempValue - lv_magnitude);
            }

            lv_magnitude = 8;
            if ((lv_tempValue >= lv_magnitude)) {
                lv_tempValue = (lv_tempValue - lv_magnitude);
            }

            lv_magnitude = 4;
            if ((lv_tempValue >= lv_magnitude)) {
                lv_tempValue = (lv_tempValue - lv_magnitude);
            }

            lv_magnitude = 2;
            if ((lv_tempValue >= lv_magnitude)) {
                lv_tempValue = (lv_tempValue - lv_magnitude);
            }

            lv_magnitude = 1;
            if ((lv_tempValue >= lv_magnitude)) {
                lv_tempValue = (lv_tempValue - lv_magnitude);
                UnitGroupAddUnitGroup(lv_returnUnitGroup, libNtve_gf_ConvertUnitToUnitGroup(UnitFromId(22)));
            }

        }
        else {
            auto99D8EBB0_val = lp_controlGroup;
            if (auto99D8EBB0_val == 1) {
                UnitGroupAddUnitGroup(lv_returnUnitGroup, libNtve_gf_ConvertUnitToUnitGroup(UnitFromId(711)));
            }
            else if (auto99D8EBB0_val == 4) {
                UnitGroupAddUnitGroup(lv_returnUnitGroup, libNtve_gf_ConvertUnitToUnitGroup(UnitFromId(22)));
            }
            else {
            }
        }
        return lv_returnUnitGroup;
    }
    else if (auto99790A44_val == gv_syn.lv_roleDevil) {
        if ((lp_cCGValue != 0)) {
            lv_magnitude = 256;
            if ((lv_tempValue >= lv_magnitude)) {
                lv_tempValue = (lv_tempValue - lv_magnitude);
                UnitGroupAddUnitGroup(lv_returnUnitGroup, libNtve_gf_ConvertUnitToUnitGroup(UnitFromId(705)));
            }

            lv_magnitude = 128;
            if ((lv_tempValue >= lv_magnitude)) {
                lv_tempValue = (lv_tempValue - lv_magnitude);
                UnitGroupAddUnitGroup(lv_returnUnitGroup, libNtve_gf_ConvertUnitToUnitGroup(UnitFromId(706)));
            }

            lv_magnitude = 64;
            if ((lv_tempValue >= lv_magnitude)) {
                lv_tempValue = (lv_tempValue - lv_magnitude);
                UnitGroupAddUnitGroup(lv_returnUnitGroup, libNtve_gf_ConvertUnitToUnitGroup(UnitFromId(710)));
            }

            lv_magnitude = 32;
            if ((lv_tempValue >= lv_magnitude)) {
                lv_tempValue = (lv_tempValue - lv_magnitude);
                UnitGroupAddUnitGroup(lv_returnUnitGroup, UnitGroup("Ultralisk2", gv_gameData.lv_rolesOwners[lp_role], RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
                UnitGroupAddUnitGroup(lv_returnUnitGroup, UnitGroup("UltraliskBurrowed2", gv_gameData.lv_rolesOwners[lp_role], RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            }

            lv_magnitude = 16;
            if ((lv_tempValue >= lv_magnitude)) {
                lv_tempValue = (lv_tempValue - lv_magnitude);
                UnitGroupAddUnitGroup(lv_returnUnitGroup, UnitGroup("Hunterling", gv_gameData.lv_rolesOwners[lp_role], RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
                UnitGroupAddUnitGroup(lv_returnUnitGroup, UnitGroup("HunterlingLeaping", gv_gameData.lv_rolesOwners[lp_role], RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            }

            lv_magnitude = 8;
            if ((lv_tempValue >= lv_magnitude)) {
                lv_tempValue = (lv_tempValue - lv_magnitude);
                UnitGroupAddUnitGroup(lv_returnUnitGroup, UnitGroup("Baneling", gv_gameData.lv_rolesOwners[lp_role], RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
                UnitGroupAddUnitGroup(lv_returnUnitGroup, UnitGroup("BanelingBurrowed", gv_gameData.lv_rolesOwners[lp_role], RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            }

            lv_magnitude = 4;
            if ((lv_tempValue >= lv_magnitude)) {
                lv_tempValue = (lv_tempValue - lv_magnitude);
                UnitGroupAddUnitGroup(lv_returnUnitGroup, UnitGroup("NydusCanal", gv_gameData.lv_rolesOwners[lp_role], RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            }

            lv_magnitude = 2;
            if ((lv_tempValue >= lv_magnitude)) {
                lv_tempValue = (lv_tempValue - lv_magnitude);
                UnitGroupAddUnitGroup(lv_returnUnitGroup, UnitGroup("Overseer", gv_gameData.lv_rolesOwners[lp_role], RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
                UnitGroupAddUnitGroup(lv_returnUnitGroup, UnitGroup("Overlord", gv_gameData.lv_rolesOwners[lp_role], RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
                UnitGroupAddUnitGroup(lv_returnUnitGroup, UnitGroup("OverlordCocoon", gv_gameData.lv_rolesOwners[lp_role], RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            }

            lv_magnitude = 1;
            if ((lv_tempValue >= lv_magnitude)) {
                lv_tempValue = (lv_tempValue - lv_magnitude);
                UnitGroupAddUnitGroup(lv_returnUnitGroup, UnitGroup("NydusNetwork2", gv_gameData.lv_rolesOwners[lp_role], RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            }

        }
        else {
            auto0D0B509C_val = lp_controlGroup;
            if (auto0D0B509C_val == 1) {
                UnitGroupAddUnitGroup(lv_returnUnitGroup, libNtve_gf_ConvertUnitToUnitGroup(UnitFromId(705)));
            }
            else if (auto0D0B509C_val == 2) {
                UnitGroupAddUnitGroup(lv_returnUnitGroup, libNtve_gf_ConvertUnitToUnitGroup(UnitFromId(706)));
            }
            else if (auto0D0B509C_val == 3) {
                UnitGroupAddUnitGroup(lv_returnUnitGroup, libNtve_gf_ConvertUnitToUnitGroup(UnitFromId(710)));
            }
            else if (auto0D0B509C_val == 4) {
                UnitGroupAddUnitGroup(lv_returnUnitGroup, libNtve_gf_ConvertUnitToUnitGroup(UnitFromId(648)));
            }
            else if (auto0D0B509C_val == 5) {
                UnitGroupAddUnitGroup(lv_returnUnitGroup, libNtve_gf_ConvertUnitToUnitGroup(UnitFromId(784)));
            }
            else {
            }
        }
        return lv_returnUnitGroup;
    }
    else if (auto99790A44_val == gv_syn.lv_roleAsmodeus) {
        if ((lp_cCGValue != 0)) {
            lv_magnitude = 256;
            if ((lv_tempValue >= lv_magnitude)) {
                lv_tempValue = (lv_tempValue - lv_magnitude);
                UnitGroupAddUnitGroup(lv_returnUnitGroup, libNtve_gf_ConvertUnitToUnitGroup(UnitFromId(692)));
            }

            lv_magnitude = 128;
            if ((lv_tempValue >= lv_magnitude)) {
                lv_tempValue = (lv_tempValue - lv_magnitude);
                UnitGroupAddUnitGroup(lv_returnUnitGroup, libNtve_gf_ConvertUnitToUnitGroup(UnitFromId(703)));
            }

            lv_magnitude = 64;
            if ((lv_tempValue >= lv_magnitude)) {
                lv_tempValue = (lv_tempValue - lv_magnitude);
                UnitGroupAddUnitGroup(lv_returnUnitGroup, libNtve_gf_ConvertUnitToUnitGroup(UnitFromId(704)));
            }

            lv_magnitude = 32;
            if ((lv_tempValue >= lv_magnitude)) {
                lv_tempValue = (lv_tempValue - lv_magnitude);
                UnitGroupAddUnitGroup(lv_returnUnitGroup, UnitGroup("Immortal", gv_gameData.lv_rolesOwners[lp_role], RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            }

            lv_magnitude = 16;
            if ((lv_tempValue >= lv_magnitude)) {
                lv_tempValue = (lv_tempValue - lv_magnitude);
                UnitGroupAddUnitGroup(lv_returnUnitGroup, UnitGroup("VikingAssault", gv_gameData.lv_rolesOwners[lp_role], RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
                UnitGroupAddUnitGroup(lv_returnUnitGroup, UnitGroup("VikingFighter", gv_gameData.lv_rolesOwners[lp_role], RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            }

            lv_magnitude = 8;
            if ((lv_tempValue >= lv_magnitude)) {
                lv_tempValue = (lv_tempValue - lv_magnitude);
                UnitGroupAddUnitGroup(lv_returnUnitGroup, UnitGroup("SiegeBreakerSieged", gv_gameData.lv_rolesOwners[lp_role], RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
                UnitGroupAddUnitGroup(lv_returnUnitGroup, UnitGroup("SiegeBreaker", gv_gameData.lv_rolesOwners[lp_role], RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            }

            lv_magnitude = 4;
            if ((lv_tempValue >= lv_magnitude)) {
                lv_tempValue = (lv_tempValue - lv_magnitude);
                UnitGroupAddUnitGroup(lv_returnUnitGroup, UnitGroup("NydusCanal", gv_gameData.lv_rolesOwners[lp_role], RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            }

            lv_magnitude = 2;
            if ((lv_tempValue >= lv_magnitude)) {
                lv_tempValue = (lv_tempValue - lv_magnitude);
                UnitGroupAddUnitGroup(lv_returnUnitGroup, UnitGroup("Overseer", gv_gameData.lv_rolesOwners[lp_role], RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
                UnitGroupAddUnitGroup(lv_returnUnitGroup, UnitGroup("Overlord", gv_gameData.lv_rolesOwners[lp_role], RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
                UnitGroupAddUnitGroup(lv_returnUnitGroup, UnitGroup("OverlordCocoon", gv_gameData.lv_rolesOwners[lp_role], RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            }

            lv_magnitude = 1;
            if ((lv_tempValue >= lv_magnitude)) {
                lv_tempValue = (lv_tempValue - lv_magnitude);
                UnitGroupAddUnitGroup(lv_returnUnitGroup, UnitGroup("NydusNetwork2", gv_gameData.lv_rolesOwners[lp_role], RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            }

        }
        else {
            auto41C1959C_val = lp_controlGroup;
            if (auto41C1959C_val == 1) {
                UnitGroupAddUnitGroup(lv_returnUnitGroup, libNtve_gf_ConvertUnitToUnitGroup(UnitFromId(692)));
            }
            else if (auto41C1959C_val == 2) {
                UnitGroupAddUnitGroup(lv_returnUnitGroup, libNtve_gf_ConvertUnitToUnitGroup(UnitFromId(703)));
            }
            else if (auto41C1959C_val == 3) {
                UnitGroupAddUnitGroup(lv_returnUnitGroup, libNtve_gf_ConvertUnitToUnitGroup(UnitFromId(704)));
            }
            else if (auto41C1959C_val == 4) {
                UnitGroupAddUnitGroup(lv_returnUnitGroup, libNtve_gf_ConvertUnitToUnitGroup(UnitFromId(629)));
            }
            else if (auto41C1959C_val == 5) {
                UnitGroupAddUnitGroup(lv_returnUnitGroup, libNtve_gf_ConvertUnitToUnitGroup(UnitFromId(709)));
            }
            else {
            }
        }
        return lv_returnUnitGroup;
    }
    else if (auto99790A44_val == gv_syn.lv_roleAstaroth) {
        if ((lp_cCGValue != 0)) {
            lv_magnitude = 256;
            if ((lv_tempValue >= lv_magnitude)) {
                lv_tempValue = (lv_tempValue - lv_magnitude);
                UnitGroupAddUnitGroup(lv_returnUnitGroup, libNtve_gf_ConvertUnitToUnitGroup(UnitFromId(783)));
            }

            lv_magnitude = 128;
            if ((lv_tempValue >= lv_magnitude)) {
                lv_tempValue = (lv_tempValue - lv_magnitude);
                UnitGroupAddUnitGroup(lv_returnUnitGroup, libNtve_gf_ConvertUnitToUnitGroup(UnitFromId(707)));
            }

            lv_magnitude = 64;
            if ((lv_tempValue >= lv_magnitude)) {
                lv_tempValue = (lv_tempValue - lv_magnitude);
                UnitGroupAddUnitGroup(lv_returnUnitGroup, libNtve_gf_ConvertUnitToUnitGroup(UnitFromId(708)));
            }

            lv_magnitude = 32;
            if ((lv_tempValue >= lv_magnitude)) {
                lv_tempValue = (lv_tempValue - lv_magnitude);
                UnitGroupAddUnitGroup(lv_returnUnitGroup, UnitGroup("HunterKiller", gv_gameData.lv_rolesOwners[lp_role], RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
                UnitGroupAddUnitGroup(lv_returnUnitGroup, UnitGroup("HunterKillerBurrowed", gv_gameData.lv_rolesOwners[lp_role], RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            }

            lv_magnitude = 16;
            if ((lv_tempValue >= lv_magnitude)) {
                lv_tempValue = (lv_tempValue - lv_magnitude);
                UnitGroupAddUnitGroup(lv_returnUnitGroup, UnitGroup("Fallen", gv_gameData.lv_rolesOwners[lp_role], RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
                UnitGroupAddUnitGroup(lv_returnUnitGroup, UnitGroup("ZerglingBurrowed2", gv_gameData.lv_rolesOwners[lp_role], RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            }

            lv_magnitude = 8;
            if ((lv_tempValue >= lv_magnitude)) {
                lv_tempValue = (lv_tempValue - lv_magnitude);
                UnitGroupAddUnitGroup(lv_returnUnitGroup, UnitGroup("Roach2", gv_gameData.lv_rolesOwners[lp_role], RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
                UnitGroupAddUnitGroup(lv_returnUnitGroup, UnitGroup("RoachBurrowed2", gv_gameData.lv_rolesOwners[lp_role], RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            }

            lv_magnitude = 4;
            if ((lv_tempValue >= lv_magnitude)) {
                lv_tempValue = (lv_tempValue - lv_magnitude);
                UnitGroupAddUnitGroup(lv_returnUnitGroup, UnitGroup("NydusCanal", gv_gameData.lv_rolesOwners[lp_role], RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            }

            lv_magnitude = 2;
            if ((lv_tempValue >= lv_magnitude)) {
                lv_tempValue = (lv_tempValue - lv_magnitude);
                UnitGroupAddUnitGroup(lv_returnUnitGroup, UnitGroup("Overseer", gv_gameData.lv_rolesOwners[lp_role], RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
                UnitGroupAddUnitGroup(lv_returnUnitGroup, UnitGroup("Overlord", gv_gameData.lv_rolesOwners[lp_role], RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
                UnitGroupAddUnitGroup(lv_returnUnitGroup, UnitGroup("OverlordCocoon", gv_gameData.lv_rolesOwners[lp_role], RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            }

            lv_magnitude = 1;
            if ((lv_tempValue >= lv_magnitude)) {
                lv_tempValue = (lv_tempValue - lv_magnitude);
                UnitGroupAddUnitGroup(lv_returnUnitGroup, UnitGroup("NydusNetwork2", gv_gameData.lv_rolesOwners[lp_role], RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            }

        }
        else {
            auto9CAE56A7_val = lp_controlGroup;
            if (auto9CAE56A7_val == 1) {
                UnitGroupAddUnitGroup(lv_returnUnitGroup, libNtve_gf_ConvertUnitToUnitGroup(UnitFromId(783)));
            }
            else if (auto9CAE56A7_val == 2) {
                UnitGroupAddUnitGroup(lv_returnUnitGroup, libNtve_gf_ConvertUnitToUnitGroup(UnitFromId(707)));
            }
            else if (auto9CAE56A7_val == 3) {
                UnitGroupAddUnitGroup(lv_returnUnitGroup, libNtve_gf_ConvertUnitToUnitGroup(UnitFromId(708)));
            }
            else if (auto9CAE56A7_val == 4) {
                UnitGroupAddUnitGroup(lv_returnUnitGroup, libNtve_gf_ConvertUnitToUnitGroup(UnitFromId(670)));
            }
            else if (auto9CAE56A7_val == 5) {
                UnitGroupAddUnitGroup(lv_returnUnitGroup, libNtve_gf_ConvertUnitToUnitGroup(UnitFromId(785)));
            }
            else {
            }
        }
        return lv_returnUnitGroup;
    }
    else if (auto99790A44_val == gv_syn.lv_roleMoloch) {
        if ((lp_cCGValue != 0)) {
            lv_magnitude = 256;
            if ((lv_tempValue >= lv_magnitude)) {
                lv_tempValue = (lv_tempValue - lv_magnitude);
                UnitGroupAddUnitGroup(lv_returnUnitGroup, libNtve_gf_ConvertUnitToUnitGroup(UnitFromId(439)));
            }

            lv_magnitude = 128;
            if ((lv_tempValue >= lv_magnitude)) {
                lv_tempValue = (lv_tempValue - lv_magnitude);
            }

            lv_magnitude = 64;
            if ((lv_tempValue >= lv_magnitude)) {
                lv_tempValue = (lv_tempValue - lv_magnitude);
            }

            lv_magnitude = 32;
            if ((lv_tempValue >= lv_magnitude)) {
                lv_tempValue = (lv_tempValue - lv_magnitude);
            }

            lv_magnitude = 16;
            if ((lv_tempValue >= lv_magnitude)) {
                lv_tempValue = (lv_tempValue - lv_magnitude);
            }

            lv_magnitude = 8;
            if ((lv_tempValue >= lv_magnitude)) {
                lv_tempValue = (lv_tempValue - lv_magnitude);
            }

            lv_magnitude = 4;
            if ((lv_tempValue >= lv_magnitude)) {
                lv_tempValue = (lv_tempValue - lv_magnitude);
            }

            lv_magnitude = 2;
            if ((lv_tempValue >= lv_magnitude)) {
                lv_tempValue = (lv_tempValue - lv_magnitude);
            }

            lv_magnitude = 1;
            if ((lv_tempValue >= lv_magnitude)) {
                lv_tempValue = (lv_tempValue - lv_magnitude);
            }

        }
        else {
            auto15910559_val = lp_controlGroup;
            if (auto15910559_val == 1) {
                UnitGroupAddUnitGroup(lv_returnUnitGroup, libNtve_gf_ConvertUnitToUnitGroup(UnitFromId(439)));
            }
            else {
            }
        }
        return lv_returnUnitGroup;
    }
    else {
        return lv_returnUnitGroup;
    }
}

void gf_CreateAftermathDialog () {
    // Variable Declarations
    int lv_item;
    int lv_role;
    int lv_dialog;
    text lv_text;
    int[2] lv_winnersStartEnd;
    int[2] lv_losersStartEnd;

    // Automatic Variable Declarations
    playergroup autoF58FA649_g;
    int autoF58FA649_var;
    const int autoB4E7B6E1_n = 4;
    int autoB4E7B6E1_i;
    int autoD295EF3B_ae;
    int autoD295EF3B_var;
    int autoE5EFE899_ae;
    int autoE5EFE899_var;
    const int auto01B12A9E_ae = 13;
    int auto01B12A9E_var;

    // Variable Initialization
    lv_item = c_invalidDialogControlId;
    lv_role = c_invalidDialogControlId;
    lv_dialog = c_invalidDialogId;

    // Implementation
    DialogControlSetPosition(gv_roleSelect.lv_gENERALMenuUIPanel, PlayerGroupAll(), c_anchorBottomRight, 0, 0);
    DialogControlSetPosition(gv_roleSelect.lv_gENERALChatInput, PlayerGroupAll(), c_anchorBottom, 0, 0);
    DialogControlSetPosition(gv_roleSelect.lv_gENERALChatDisplay, PlayerGroupAll(), c_anchorBottom, 0, 100);
    UISetSelectionTypeEnabled(PlayerGroupAll(), c_localSelectionTypeUnknown, false);
    autoF58FA649_g = PlayerGroupActive();
    autoF58FA649_var = -1;
    while (true) {
        autoF58FA649_var = PlayerGroupNextPlayer(autoF58FA649_g, autoF58FA649_var);
        if (autoF58FA649_var < 0) { break; }
        UnitClearSelection(autoF58FA649_var);
    }
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeIdleWorkerButton, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeArmyButton, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeHeroPanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeConsolePanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMinimapPanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeCommandPanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeConsolePanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeControlGroupPanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMissionTimePanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeStatusUI, false);
    UnitPauseAll(true);
    DialogCreate(200, 900, c_anchorLeft, 10, -200, true);
    DialogSetRenderPriority(DialogLastCreated(), 1);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    gv_gameData.lv_aftermathKudosHolderDialog = DialogLastCreated();
    DialogCreate(1300, 810, c_anchorCenter, 0, -100, true);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogSetRenderPriority(DialogLastCreated(), 0);
    lv_dialog = DialogLastCreated();
    gv_gameData.lv_aftermathDialog = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    for (autoB4E7B6E1_i = 1; autoB4E7B6E1_i <= autoB4E7B6E1_n; autoB4E7B6E1_i += 1) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 200, 50, c_anchorTopLeft, 50, 50, StringToText(""), "Assets\\Textures\\ui_streaming_movie_progressbarborder.dds", c_triggerImageTypeBorder, true, Color(100,100,100), c_triggerBlendModeNormal);
        DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
    }
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTop, 0, 25, StringExternal("Param/Value/61034AFC"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize28Bold", PlayerGroupAll());
    lv_item = DialogControlLastCreated();
    if ((gv_gameData.lv_heavenHasWon == true)) {
        lv_text = StringExternal("Param/Value/E3F5D2C3");
        lv_winnersStartEnd[0] = 0;
        lv_winnersStartEnd[1] = 5;
        lv_losersStartEnd[0] = 6;
        lv_losersStartEnd[1] = 9;
    }
    else {
        lv_text = StringExternal("Param/Value/9450E98C");
        lv_winnersStartEnd[0] = 6;
        lv_winnersStartEnd[1] = 9;
        lv_losersStartEnd[0] = 0;
        lv_losersStartEnd[1] = 5;
    }
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 600, 50, c_anchorTop, 0, 50, lv_text, ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize28Bold", PlayerGroupAll());
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTop, lv_item, c_anchorBottom, 0, 0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 100, c_anchorTopLeft, 50, 150, StringExternal("Param/Value/93AD6E59"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize24Bold", PlayerGroupAll());
    libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 513, PlayerGroupAll());
    lv_role = DialogControlLastCreated();
    lv_item = DialogControlLastCreated();
    gf_AftermathDialogCollumns(lv_dialog, lv_item);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 50, 100, c_anchorTopLeft, 0, 0, StringToText(""), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize24Bold", PlayerGroupAll());
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorLeft, lv_item, c_anchorRight, 0, 0);
    libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 513, PlayerGroupAll());
    lv_item = DialogControlLastCreated();
    gf_AftermathDialogCollumns(lv_dialog, lv_item);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 150, 100, c_anchorTopLeft, 0, 0, StringExternal("Param/Value/D11C1405"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize24Bold", PlayerGroupAll());
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorLeft, lv_item, c_anchorRight, 0, 0);
    libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 513, PlayerGroupAll());
    lv_item = DialogControlLastCreated();
    gf_AftermathDialogCollumns(lv_dialog, lv_item);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 150, 100, c_anchorTopLeft, 0, 0, StringExternal("Param/Value/6795AC52"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize24Bold", PlayerGroupAll());
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorLeft, lv_item, c_anchorRight, 0, 0);
    libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 513, PlayerGroupAll());
    lv_item = DialogControlLastCreated();
    gf_AftermathDialogCollumns(lv_dialog, lv_item);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 150, 100, c_anchorTopLeft, 0, 0, StringExternal("Param/Value/A7B81541"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize24Bold", PlayerGroupAll());
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorLeft, lv_item, c_anchorRight, 0, 0);
    libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 513, PlayerGroupAll());
    lv_item = DialogControlLastCreated();
    gf_AftermathDialogCollumns(lv_dialog, lv_item);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 150, 100, c_anchorTopLeft, 0, 0, StringExternal("Param/Value/AA0171B0"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize24Bold", PlayerGroupAll());
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorLeft, lv_item, c_anchorRight, 0, 0);
    libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 513, PlayerGroupAll());
    lv_item = DialogControlLastCreated();
    gf_AftermathDialogCollumns(lv_dialog, lv_item);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 150, 100, c_anchorTopLeft, 0, 0, StringExternal("Param/Value/3EEBEFE5"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize24Bold", PlayerGroupAll());
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorLeft, lv_item, c_anchorRight, 0, 0);
    libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 513, PlayerGroupAll());
    lv_item = DialogControlLastCreated();
    gf_AftermathDialogCollumns(lv_dialog, lv_item);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 150, 100, c_anchorTopLeft, 0, 0, StringExternal("Param/Value/7F8132D7"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize24Bold", PlayerGroupAll());
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorLeft, lv_item, c_anchorRight, 0, 0);
    libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 513, PlayerGroupAll());
    lv_item = DialogControlLastCreated();
    gf_AftermathDialogCollumns(lv_dialog, lv_item);
    gf_AftermathDialogPlayerRow(lv_winnersStartEnd[0], lv_dialog, lv_role);
    autoD295EF3B_ae = lv_winnersStartEnd[1];
    autoD295EF3B_var = (lv_winnersStartEnd[0]+1);
    for ( ; autoD295EF3B_var <= autoD295EF3B_ae; autoD295EF3B_var += 1 ) {
        gf_AftermathDialogPlayerRow(autoD295EF3B_var, lv_dialog, gv_gameData.lv_aftermathRoleLabels[(autoD295EF3B_var-1)]);
    }
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 1200, 10, c_anchorTopLeft, 0, 0, StringToText(""), "Assets\\Textures\\ui_battlenet_glue_campaign_floatingraceicon_divider_highlight.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, gv_gameData.lv_aftermathRoleLabels[lv_winnersStartEnd[1]], c_anchorBottomLeft, 0, 0);
    lv_item = DialogControlLastCreated();
    gf_AftermathDialogPlayerRow(lv_losersStartEnd[0], lv_dialog, lv_item);
    autoE5EFE899_ae = lv_losersStartEnd[1];
    autoE5EFE899_var = (lv_losersStartEnd[0]+1);
    for ( ; autoE5EFE899_var <= autoE5EFE899_ae; autoE5EFE899_var += 1 ) {
        gf_AftermathDialogPlayerRow(autoE5EFE899_var, lv_dialog, gv_gameData.lv_aftermathRoleLabels[(autoE5EFE899_var-1)]);
    }
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 150, 50, c_anchorBottomRight, 0, 0, StringToText(""), StringExternal("Param/Value/A311FEEB"), "");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\black.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImage2(DialogControlLastCreated(), "Assets\\Textures\\ui_planetpanel_frame_dropdownmenubutton_normalpressed.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize28Bold", PlayerGroupAll());
    gv_gameData.lv_aftermathEXITButton = DialogControlLastCreated();
    auto01B12A9E_var = 1;
    for ( ; auto01B12A9E_var <= auto01B12A9E_ae; auto01B12A9E_var += 1 ) {
        if ((gv_playerData[auto01B12A9E_var].lv_currentRole >= 0) && (gv_playerData[auto01B12A9E_var].lv_currentRole <= 9) && (PlayerStatus(auto01B12A9E_var) == c_playerStatusLeft)) {
            gf_AftermathGrayOutLeavers(auto01B12A9E_var);
        }

    }
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 500, 50, c_anchorBottomRight, 160, 0, StringExternal("Param/Value/647FBCF6"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModLeftSize24Bold", PlayerGroupAll());
    gf_AftermathGameEndingCooldown(DialogControlLastCreated());
}

void gf_CreateKudosToastPanel (int lp_rOLE, int lp_pLAYER) {
    // Variable Declarations
    int lv_dialog;
    int lv_panel;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_dialog = gv_gameData.lv_aftermathKudosHolderDialog;
    lv_panel = c_invalidDialogControlId;

    // Implementation
    SoundPlayForPlayer(SoundLink("UI_BnetToast", -1), c_maxPlayers, PlayerGroupSingle(lp_pLAYER), 100.0, 0.0);
    DialogControlCreate(lv_dialog, c_triggerControlTypePanel);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 200, 70);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottom, 0, 0);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(lp_pLAYER), true);
    lv_panel = DialogControlLastCreated();
    gv_playerData[lp_pLAYER].lv_aftermathToastPanels[gv_playerData[lp_pLAYER].lv_aftermathLatestToastPanelID] = DialogControlLastCreated();
    gv_playerData[lp_pLAYER].lv_aftermathLatestToastPanelID += 1;
    DialogControlCreateInPanel(DialogControlLastCreated(), c_triggerControlTypeImage);
    DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_battlenet_glues_toastbg.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeNormal, PlayerGroupAll());
    DialogControlCreateInPanel(lv_panel, c_triggerControlTypeImage);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 60, 60);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopRight, 0, 5);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_emoticons_thumbsup.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeNormal, PlayerGroupAll());
    DialogControlCreateInPanel(lv_panel, c_triggerControlTypeLabel);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 150, 50);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, 0, 0);
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), gf_GetRoleNameColored(lp_rOLE), PlayerGroupAll());
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize16Bold", PlayerGroupAll());
    DialogControlCreateInPanel(lv_panel, c_triggerControlTypeLabel);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 150, 50);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottomLeft, 10, 0);
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/6B8D05B3"), PlayerGroupAll());
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModLeftSize12", PlayerGroupAll());
    gf_AftermathExpireToast(lv_panel);
}

trigger auto_gf_AftermathShowToasttoPlayer_Trigger = null;
int auto_gf_AftermathShowToasttoPlayer_lp_sOURCEPLAYER;
int auto_gf_AftermathShowToasttoPlayer_lp_tARGETPLAYER;

void gf_AftermathShowToasttoPlayer (int lp_sOURCEPLAYER, int lp_tARGETPLAYER) {
    auto_gf_AftermathShowToasttoPlayer_lp_sOURCEPLAYER = lp_sOURCEPLAYER;
    auto_gf_AftermathShowToasttoPlayer_lp_tARGETPLAYER = lp_tARGETPLAYER;

    if (auto_gf_AftermathShowToasttoPlayer_Trigger == null) {
        auto_gf_AftermathShowToasttoPlayer_Trigger = TriggerCreate("auto_gf_AftermathShowToasttoPlayer_TriggerFunc");
    }

    TriggerExecute(auto_gf_AftermathShowToasttoPlayer_Trigger, false, false);
}

bool auto_gf_AftermathShowToasttoPlayer_TriggerFunc (bool testConds, bool runActions) {
    int lp_sOURCEPLAYER = auto_gf_AftermathShowToasttoPlayer_lp_sOURCEPLAYER;
    int lp_tARGETPLAYER = auto_gf_AftermathShowToasttoPlayer_lp_tARGETPLAYER;

    // Variable Declarations
    int lv_panelID;
    int lv_cycle;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_panelID = gv_playerData[lp_tARGETPLAYER].lv_aftermathLatestToastPanelID;
    gf_CreateKudosToastPanel(gv_playerData[lp_sOURCEPLAYER].lv_currentRole, lp_tARGETPLAYER);
    while ((lv_cycle < lv_panelID)) {
        DialogControlSetPositionRelative(gv_playerData[lp_tARGETPLAYER].lv_aftermathToastPanels[lv_cycle], PlayerGroupSingle(lp_tARGETPLAYER), c_anchorBottom, gv_playerData[lp_tARGETPLAYER].lv_aftermathToastPanels[(lv_cycle+1)], c_anchorTop, 0, 0);
        lv_cycle += 1;
    }
    return true;
}

trigger auto_gf_AftermathExpireToast_Trigger = null;
int auto_gf_AftermathExpireToast_lp_pANEL;

void gf_AftermathExpireToast (int lp_pANEL) {
    auto_gf_AftermathExpireToast_lp_pANEL = lp_pANEL;

    if (auto_gf_AftermathExpireToast_Trigger == null) {
        auto_gf_AftermathExpireToast_Trigger = TriggerCreate("auto_gf_AftermathExpireToast_TriggerFunc");
    }

    TriggerExecute(auto_gf_AftermathExpireToast_Trigger, false, false);
}

bool auto_gf_AftermathExpireToast_TriggerFunc (bool testConds, bool runActions) {
    int lp_pANEL = auto_gf_AftermathExpireToast_lp_pANEL;

    // Variable Declarations
    fixed lv_duration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    DialogControlFadeTransparency(lp_pANEL, PlayerGroupAll(), 0.0, 100.0);
    DialogControlFadeTransparency(lp_pANEL, PlayerGroupAll(), 0.5, 0.0);
    Wait(4.0, c_timeGame);
    DialogControlFadeTransparency(lp_pANEL, PlayerGroupAll(), 2.0, 100.0);
    return true;
}

trigger auto_gf_AftermathGameEndingCooldown_Trigger = null;
int auto_gf_AftermathGameEndingCooldown_lp_item;

void gf_AftermathGameEndingCooldown (int lp_item) {
    auto_gf_AftermathGameEndingCooldown_lp_item = lp_item;

    if (auto_gf_AftermathGameEndingCooldown_Trigger == null) {
        auto_gf_AftermathGameEndingCooldown_Trigger = TriggerCreate("auto_gf_AftermathGameEndingCooldown_TriggerFunc");
    }

    TriggerExecute(auto_gf_AftermathGameEndingCooldown_Trigger, false, false);
}

bool auto_gf_AftermathGameEndingCooldown_TriggerFunc (bool testConds, bool runActions) {
    int lp_item = auto_gf_AftermathGameEndingCooldown_lp_item;

    // Variable Declarations
    int lv_item;
    int lv_seconds;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_item = lp_item;
    lv_seconds = 120;

    // Implementation
    while ((lv_seconds > 0)) {
        TextExpressionSetToken("Param/Expression/B00D0120", "A", StringExternal("Param/Value/DB31BEE1"));
        TextExpressionSetToken("Param/Expression/B00D0120", "B", IntToText(lv_seconds));
        libNtve_gf_SetDialogItemText(lv_item, TextExpressionAssemble("Param/Expression/B00D0120"), PlayerGroupAll());
        lv_seconds -= 1;
        Wait(1.0, c_timeGame);
    }
    libNtve_gf_SetDialogItemText(lv_item, StringExternal("Param/Value/D2B627C4"), PlayerGroupAll());
    gf_FinishGame();
    return true;
}

void gf_AftermathAcknowledgeplayer (int lp_sourcePlayer, int lp_targetPlayer) {
    // Automatic Variable Declarations
    // Implementation
    gv_playerData[lp_sourcePlayer].lv_aftermathAvailableKudos -= 1;
    gv_banks.lv_kudosRecieved[lp_targetPlayer][gv_playerData[lp_targetPlayer].lv_currentRole] += 1;
    DialogControlSetVisible(gv_gameData.lv_aftermathShowKudos[gv_playerData[lp_sourcePlayer].lv_currentRole], PlayerGroupSingle(lp_targetPlayer), true);
    gf_AftermathShowToasttoPlayer(lp_sourcePlayer, lp_targetPlayer);
    gv_banks.lv_bankUpdated[lp_targetPlayer] = true;
    TriggerExecute(gt_PeriodicBankSave, true, false);
    if ((((PlayerGroupHasPlayer(gv_gameData.lv_playerGroupHeaven, lp_sourcePlayer) == true) && (PlayerGroupHasPlayer(gv_gameData.lv_playerGroupHeaven, lp_targetPlayer) == true)) || ((PlayerGroupHasPlayer(gv_gameData.lv_playerGroupHell, lp_sourcePlayer) == true) && (PlayerGroupHasPlayer(gv_gameData.lv_playerGroupHell, lp_targetPlayer) == true)))) {
    }

}

void gf_AftermathGrayOutLeavers (int lp_pLAYER) {
    // Variable Declarations
    int lv_cycle;
    int lv_role;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_role = gv_playerData[lp_pLAYER].lv_currentRole;

    // Implementation
    DialogControlSetVisible(gv_gameData.lv_aftermathKudosButton[lv_role], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_gameData.lv_aftermathKudosIcon[lv_role], PlayerGroupAll(), false);
    while ((gv_playerData[lp_pLAYER].lv_aftermathPlayerStatsLabels[lv_cycle] != c_invalidDialogControlId)) {
        libNtve_gf_SetDialogItemColor(gv_playerData[lp_pLAYER].lv_aftermathPlayerStatsLabels[lv_cycle], Color(149*100/255,150*100/255,151*100/255), PlayerGroupAll());
        libNtve_gf_SetDialogItemDesaturationColor(gv_playerData[lp_pLAYER].lv_aftermathPlayerStatsLabels[lv_cycle], Color(149*100/255,150*100/255,151*100/255), PlayerGroupAll());
        DialogControlFadeTransparency(gv_playerData[lp_pLAYER].lv_aftermathPlayerStatsLabels[lv_cycle], PlayerGroupAll(), 0.0, 50.0);
        lv_cycle += 1;
    }
}

void gf_AftermathDialogPlayerRow (int lp_roleID, int lp_dIALOG, int lp_anchorParentItem) {
    // Variable Declarations
    int lv_role;
    int lv_dialog;
    int lv_item;
    int lv_player;
    text lv_text;
    text lv_roleTooltip;
    text lv_survivingHeroesText;
    text lv_survivingHeroesTooltip;
    text lv_survivingElitesText;
    text lv_survivingElitesTooltip;
    text lv_heroKillsText;
    text lv_heroKillsTooltip;
    text lv_eliteKillsText;
    text lv_trashKillsText;
    text lv_wormKillsText;
    int lv_i;

    // Automatic Variable Declarations
    const int autoAD451AC1_n = 2;
    int autoAD451AC1_i;

    // Variable Initialization
    lv_role = lp_roleID;
    lv_dialog = lp_dIALOG;
    lv_item = lp_anchorParentItem;
    lv_player = gv_gameData.lv_rolesOwners[lv_role];

    // Implementation
    if (((lv_player >= 1) && (lv_player <= 13))) {
        TextExpressionSetToken("Param/Expression/132B4894", "A", PlayerName(lv_player));
        lv_roleTooltip = TextExpressionAssemble("Param/Expression/132B4894");
        TextExpressionSetToken("Param/Expression/54F2E136", "A", IntToText(gv_playerData[lv_player].lv_aftermathSurvivingHeroes));
        lv_survivingHeroesText = TextExpressionAssemble("Param/Expression/54F2E136");
        lv_survivingHeroesTooltip = gv_playerData[lv_player].lv_aftermathSurvivingHeroesTooltip;
        if ((gv_playerData[lv_player].lv_aftermathElitesTotal > 0)) {
            TextExpressionSetToken("Param/Expression/1E369988", "A", FixedToText(((IntToFixed(gv_playerData[lv_player].lv_aftermathSurvivingElites) / IntToFixed(gv_playerData[lv_player].lv_aftermathElitesTotal)) * 100.0), 0));
            lv_survivingElitesText = TextExpressionAssemble("Param/Expression/1E369988");
        }
        else {
            lv_survivingElitesText = StringExternal("Param/Value/5D861706");
        }
        TextExpressionSetToken("Param/Expression/95E74D2D", "A", IntToText(gv_playerData[lv_player].lv_aftermathSurvivingElites));
        TextExpressionSetToken("Param/Expression/95E74D2D", "B", IntToText(gv_playerData[lv_player].lv_aftermathElitesTotal));
        lv_survivingElitesTooltip = TextExpressionAssemble("Param/Expression/95E74D2D");
        TextExpressionSetToken("Param/Expression/B3374F2A", "A", IntToText(gv_playerData[lv_player].lv_aftermathHeroesKilled));
        lv_heroKillsText = TextExpressionAssemble("Param/Expression/B3374F2A");
        if ((gv_playerData[lv_player].lv_aftermathPrimesKilled > 0)) {
            TextExpressionSetToken("Param/Expression/367C8981", "A", lv_heroKillsText);
            TextExpressionSetToken("Param/Expression/367C8981", "B", IntToText(gv_playerData[lv_player].lv_aftermathPrimesKilled));
            lv_heroKillsText = TextExpressionAssemble("Param/Expression/367C8981");
        }

        if ((gv_playerData[lv_player].lv_aftermathZadMolochKilled > 0)) {
            TextExpressionSetToken("Param/Expression/E51CE2F8", "A", lv_heroKillsText);
            TextExpressionSetToken("Param/Expression/E51CE2F8", "B", IntToText(gv_playerData[lv_player].lv_aftermathZadMolochKilled));
            lv_heroKillsText = TextExpressionAssemble("Param/Expression/E51CE2F8");
        }

        TextExpressionSetToken("Param/Expression/9C1EECF8", "A", gv_playerData[lv_player].lv_aftermathHeroesKilledTooltipPrimes);
        TextExpressionSetToken("Param/Expression/9C1EECF8", "B", gv_playerData[lv_player].lv_aftermathHeroesKilledTooltipNormal);
        TextExpressionSetToken("Param/Expression/9C1EECF8", "C", gv_playerData[lv_player].lv_aftermathHeroesKilledTooltipZadMoloch);
        lv_heroKillsTooltip = TextExpressionAssemble("Param/Expression/9C1EECF8");
        TextExpressionSetToken("Param/Expression/5F9E2A95", "A", IntToText(gv_playerData[lv_player].lv_aftermathElitesKilled));
        lv_eliteKillsText = TextExpressionAssemble("Param/Expression/5F9E2A95");
        TextExpressionSetToken("Param/Expression/71085299", "A", IntToText(gv_playerData[lv_player].lv_aftermathTrashKilled));
        lv_trashKillsText = TextExpressionAssemble("Param/Expression/71085299");
        TextExpressionSetToken("Param/Expression/E3CD6DE2", "A", IntToText(gv_playerData[lv_player].lv_aftermathPortalsKilled));
        lv_wormKillsText = TextExpressionAssemble("Param/Expression/E3CD6DE2");
    }
    else {
        lv_player = 0;
        lv_roleTooltip = StringExternal("Param/Value/E4603488");
        lv_survivingHeroesText = StringExternal("Param/Value/48B35493");
    }
    libNtve_gf_CreateDialogItemImage(lv_dialog, 1150, 50, c_anchorTopLeft, 0, 0, StringToText(""), "Assets\\Textures\\ui_streaming_movie_progressbarborder.dds", c_triggerImageTypeBorder, true, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, lv_item, c_anchorBottomLeft, 0, 0);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 50.0);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupSingle(lv_player), 0.0, 0.0);
    libNtve_gf_SetDialogItemDesaturated(DialogControlLastCreated(), true, PlayerGroupSingle(lv_player));
    libNtve_gf_CreateDialogItemImage(lv_dialog, 1150, 50, c_anchorTopLeft, 0, 0, StringToText(""), "Assets\\Textures\\ui_streaming_movie_progressbarbuffer.dds", c_triggerImageTypeBorder, true, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, lv_item, c_anchorBottomLeft, 0, 0);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(lv_player), true);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 50.0);
    libNtve_gf_CreateDialogItemLabel(lv_dialog, 200, 50, c_anchorTopLeft, 0, 0, gf_GetRoleNameColored(lv_role), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), lv_roleTooltip, PlayerGroupAll());
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize24Bold", PlayerGroupAll());
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, lv_item, c_anchorBottomLeft, 0, 0);
    libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 513, PlayerGroupAll());
    gv_gameData.lv_aftermathRoleLabels[lp_roleID] = DialogControlLastCreated();
    lv_item = DialogControlLastCreated();
    gv_playerData[lv_player].lv_aftermathPlayerStatsLabels[lv_i] = DialogControlLastCreated();
    lv_i += 1;
    if ((lv_player == 0)) {
        libNtve_gf_SetDialogItemDesaturated(lv_item, true, PlayerGroupAll());
        libNtve_gf_SetDialogItemColor(lv_item, Color(149*100/255,150*100/255,151*100/255), PlayerGroupAll());
        DialogControlFadeTransparency(lv_item, PlayerGroupAll(), 0.0, 50.0);
    }

    for (autoAD451AC1_i = 1; autoAD451AC1_i <= autoAD451AC1_n; autoAD451AC1_i += 1) {
        libNtve_gf_CreateDialogItemImage(lv_dialog, 300, 60, c_anchorTopLeft, 0, 0, StringToText(""), "Assets\\Textures\\ui_screens_zeratul_prologue_spotlight.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeAdd);
        DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, lv_item, c_anchorCenter, 0, 0);
        libNtve_gf_SetDialogItemDesaturated(DialogControlLastCreated(), true, PlayerGroupAll());
        libNtve_gf_SetDialogItemDesaturationColor(DialogControlLastCreated(), libNtve_gf_ConvertPlayerColorToColor(gf_ColorID_To_Color(lv_role)), PlayerGroupAll());
        if ((lv_player == 0)) {
            libNtve_gf_SetDialogItemDesaturationColor(DialogControlLastCreated(), Color(149*100/255,150*100/255,151*100/255), PlayerGroupAll());
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 50.0);
        }

        gv_playerData[lv_player].lv_aftermathPlayerStatsLabels[lv_i] = DialogControlLastCreated();
        lv_i += 1;
    }
    libNtve_gf_CreateDialogItemImage(lv_dialog, 40, 40, c_anchorTopLeft, 0, 0, StringToText(""), "Assets\\Textures\\ui_emoticons_thumbsup.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorLeft, lv_item, c_anchorRight, -40, 0);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    gv_gameData.lv_aftermathShowKudos[lp_roleID] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(lv_dialog, 40, 40, c_anchorTopLeft, 0, 0, StringToText(""), StringToText(""), "");
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorLeft, lv_item, c_anchorRight, 5, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\black.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImage2(DialogControlLastCreated(), "Assets\\Textures\\black.dds", PlayerGroupAll());
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    lv_item = DialogControlLastCreated();
    gv_gameData.lv_aftermathKudosButton[lp_roleID] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 40, 40, c_anchorTopLeft, 0, 0, StringToText(""), "Assets\\Textures\\ui_emoticons_thumbsup.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, lv_item, c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemDesaturationColor(DialogControlLastCreated(), Color(0,0,0), PlayerGroupAll());
    libNtve_gf_SetDialogItemDesaturated(DialogControlLastCreated(), true, PlayerGroupAll());
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    gv_gameData.lv_aftermathKudosIcon[lp_roleID] = DialogControlLastCreated();
    if (((lv_player >= 1) && (lv_player <= 10))) {
        DialogControlSetVisible(gv_gameData.lv_aftermathKudosButton[lv_role], PlayerGroupAll(), true);
        DialogControlSetVisible(gv_gameData.lv_aftermathKudosIcon[lv_role], PlayerGroupAll(), true);
        DialogControlSetVisible(gv_gameData.lv_aftermathKudosButton[lv_role], PlayerGroupSingle(lv_player), false);
        DialogControlSetVisible(gv_gameData.lv_aftermathKudosIcon[lv_role], PlayerGroupSingle(lv_player), false);
    }

    libNtve_gf_CreateDialogItemLabel(lv_dialog, 150, 50, c_anchorTopLeft, 0, 0, lv_survivingHeroesText, ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), lv_survivingHeroesTooltip, PlayerGroupAll());
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize20", PlayerGroupAll());
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorLeft, lv_item, c_anchorRight, 5, 0);
    lv_item = DialogControlLastCreated();
    if ((lv_player == 0)) {
        DialogControlFadeTransparency(lv_item, PlayerGroupAll(), 0.0, 50.0);
    }

    gv_playerData[lv_player].lv_aftermathPlayerStatsLabels[lv_i] = DialogControlLastCreated();
    lv_i += 1;
    libNtve_gf_CreateDialogItemLabel(lv_dialog, 150, 50, c_anchorTopLeft, 0, 0, lv_survivingElitesText, ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), lv_survivingElitesTooltip, PlayerGroupAll());
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize20", PlayerGroupAll());
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorLeft, lv_item, c_anchorRight, 0, 0);
    lv_item = DialogControlLastCreated();
    gv_playerData[lv_player].lv_aftermathPlayerStatsLabels[lv_i] = DialogControlLastCreated();
    lv_i += 1;
    libNtve_gf_CreateDialogItemLabel(lv_dialog, 150, 50, c_anchorTopLeft, 0, 0, lv_heroKillsText, ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), lv_heroKillsTooltip, PlayerGroupAll());
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize20", PlayerGroupAll());
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorLeft, lv_item, c_anchorRight, 0, 0);
    lv_item = DialogControlLastCreated();
    gv_playerData[lv_player].lv_aftermathPlayerStatsLabels[lv_i] = DialogControlLastCreated();
    lv_i += 1;
    libNtve_gf_CreateDialogItemLabel(lv_dialog, 150, 50, c_anchorTopLeft, 0, 0, lv_eliteKillsText, ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize20", PlayerGroupAll());
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorLeft, lv_item, c_anchorRight, 0, 0);
    lv_item = DialogControlLastCreated();
    gv_playerData[lv_player].lv_aftermathPlayerStatsLabels[lv_i] = DialogControlLastCreated();
    lv_i += 1;
    if ((lp_roleID >= gv_syn.lv_roleDevil)) {
        return ;
    }

    libNtve_gf_CreateDialogItemLabel(lv_dialog, 150, 50, c_anchorTopLeft, 0, 0, lv_trashKillsText, ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize20", PlayerGroupAll());
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorLeft, lv_item, c_anchorRight, 0, 0);
    lv_item = DialogControlLastCreated();
    gv_playerData[lv_player].lv_aftermathPlayerStatsLabels[lv_i] = DialogControlLastCreated();
    lv_i += 1;
    libNtve_gf_CreateDialogItemLabel(lv_dialog, 150, 50, c_anchorTopLeft, 0, 0, lv_wormKillsText, ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize20", PlayerGroupAll());
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorLeft, lv_item, c_anchorRight, 0, 0);
    lv_item = DialogControlLastCreated();
    gv_playerData[lv_player].lv_aftermathPlayerStatsLabels[lv_i] = DialogControlLastCreated();
    lv_i += 1;
}

void gf_AftermathFinalizePlayerStats () {
    // Variable Declarations
    text lv_survivingHeroesTooltip;

    // Automatic Variable Declarations
    playergroup autoA4719D6B_g;
    int autoA4719D6B_var;
    unitgroup auto3BCEAA9A_g;
    int auto3BCEAA9A_u;
    unit auto3BCEAA9A_var;
    unitgroup auto6607C7B9_g;
    int auto6607C7B9_u;
    unit auto6607C7B9_var;

    // Variable Initialization

    // Implementation
    autoA4719D6B_g = PlayerGroupAll();
    autoA4719D6B_var = -1;
    while (true) {
        autoA4719D6B_var = PlayerGroupNextPlayer(autoA4719D6B_g, autoA4719D6B_var);
        if (autoA4719D6B_var < 0) { break; }
        if (((autoA4719D6B_var >= 1) && (autoA4719D6B_var <= 13))) {
            lv_survivingHeroesTooltip = null;
            auto3BCEAA9A_g = UnitGroup(null, autoA4719D6B_var, RegionEntireMap(), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto3BCEAA9A_u = UnitGroupCount(auto3BCEAA9A_g, c_unitCountAll);
            for (;; auto3BCEAA9A_u -= 1) {
                auto3BCEAA9A_var = UnitGroupUnitFromEnd(auto3BCEAA9A_g, auto3BCEAA9A_u);
                if (auto3BCEAA9A_var == null) { break; }
                if ((UnitHasBehavior2(auto3BCEAA9A_var, "Hallucination") == false)) {
                    gv_playerData[autoA4719D6B_var].lv_aftermathSurvivingHeroes += 1;
                    TextExpressionSetToken("Param/Expression/368824B3", "A", lv_survivingHeroesTooltip);
                    TextExpressionSetToken("Param/Expression/368824B3", "B", UnitGetName(auto3BCEAA9A_var));
                    lv_survivingHeroesTooltip = TextExpressionAssemble("Param/Expression/368824B3");
                }

            }
            TextExpressionSetToken("Param/Expression/A2A52C68", "A", lv_survivingHeroesTooltip);
            gv_playerData[autoA4719D6B_var].lv_aftermathSurvivingHeroesTooltip = TextExpressionAssemble("Param/Expression/A2A52C68");
            auto6607C7B9_g = UnitGroup(null, autoA4719D6B_var, RegionEntireMap(), UnitFilter((1 << c_targetFilterRobotic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto6607C7B9_u = UnitGroupCount(auto6607C7B9_g, c_unitCountAll);
            for (;; auto6607C7B9_u -= 1) {
                auto6607C7B9_var = UnitGroupUnitFromEnd(auto6607C7B9_g, auto6607C7B9_u);
                if (auto6607C7B9_var == null) { break; }
                if ((UnitHasBehavior2(auto6607C7B9_var, "Hallucination") == false)) {
                    gv_playerData[autoA4719D6B_var].lv_aftermathSurvivingElites += 1;
                }

            }
            gv_playerData[autoA4719D6B_var].lv_aftermathElitesKilled = PlayerGetPropertyInt(autoA4719D6B_var, c_playerPropVespene);
            gv_playerData[autoA4719D6B_var].lv_aftermathTrashKilled = PlayerGetPropertyInt(autoA4719D6B_var, c_playerPropMinerals);
            gv_playerData[autoA4719D6B_var].lv_aftermathPortalsKilled = PlayerGetPropertyInt(autoA4719D6B_var, c_playerPropTerrazine);
        }

    }
}

void gf_AftermathDialogCollumns (int lp_dIALOG, int lp_anchorParentItem) {
    // Variable Declarations
    int lv_dialog;
    int lv_item;
    int lv_width;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_dialog = lp_dIALOG;
    lv_item = lp_anchorParentItem;
    lv_width = DialogControlGetWidth(lv_item, 0);

    // Implementation
    libNtve_gf_CreateDialogItemImage(lv_dialog, (lv_width+20), 620, c_anchorTopLeft, 0, 0, StringToText(""), "Assets\\Textures\\ui_battlenet_glue_frame_blueinnercontainerframe.dds", c_triggerImageTypeHorizontalBorder, true, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, lv_item, c_anchorTopLeft, -10, 0);
    libNtve_gf_SetDialogItemDesaturated(DialogControlLastCreated(), true, PlayerGroupAll());
}

void gf_HeavenVictoryTriggeredByPrimeDeath (bool lp_tEAMLEFT) {
    // Variable Declarations
    int lv_playa;
    fixed lv_endTimer;
    bool lv_cheekyTaunt;

    // Automatic Variable Declarations
    playergroup autoD4215FF5_g;
    playergroup autoBCF8AB0B_g;

    // Variable Initialization
    lv_endTimer = 5.0;

    // Implementation
    if ((gv_gameData.lv_heavenHasWon == true)) {
        return ;
    }

    gv_gameData.lv_heavenHasWon = true;
    ObjectiveSetState(gv_gameData.lv_objectivesHeavenPrimary[0], c_objectiveStateCompleted);
    ObjectiveSetState(gv_gameData.lv_objectivesHellPrimary[0], c_objectiveStateFailed);
    gf_AftermathFinalizePlayerStats();
    if ((lp_tEAMLEFT == false)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/04129F77"));
    }
    else {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/2ED5FE2F"));
    }
    if ((gv_banks.lv_statsdisabled == false)) {
        autoD4215FF5_g = gv_gameData.lv_playerGroupHeaven;
        lv_playa = -1;
        while (true) {
            lv_playa = PlayerGroupNextPlayer(autoD4215FF5_g, lv_playa);
            if (lv_playa < 0) { break; }
            if ((PlayerStatus(lv_playa) == c_playerStatusActive) && (PlayerType(lv_playa) == c_playerTypeUser)) {
                gv_banks.lv_wins[lv_playa][gv_playerData[lv_playa].lv_currentRole] += 1;
                gv_banks.lv_bankUpdated[lv_playa] = true;
            }

        }
        autoBCF8AB0B_g = gv_gameData.lv_playerGroupHell;
        lv_playa = -1;
        while (true) {
            lv_playa = PlayerGroupNextPlayer(autoBCF8AB0B_g, lv_playa);
            if (lv_playa < 0) { break; }
            if ((PlayerStatus(lv_playa) == c_playerStatusActive) && (PlayerType(lv_playa) == c_playerTypeUser)) {
                gv_banks.lv_losses[lv_playa][gv_playerData[lv_playa].lv_currentRole] += 1;
                gv_banks.lv_bankUpdated[lv_playa] = true;
            }

        }
        TriggerExecute(gt_PeriodicBankSave, true, false);
    }

    gv_banks.lv_statsdisabled = true;
    while ((lv_endTimer > 0.0)) {
        if ((UnitIsAlive(UnitFromId(22)) == false) && (lv_cheekyTaunt == false)) {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/D7E78F72"));
            lv_cheekyTaunt = true;
        }

        lv_endTimer -= 0.5;
        Wait(0.5, c_timeGame);
    }
    TimerPause(gv_gameData.lv_godTimer, true);
    TimerPause(gv__35minuterealtimer, true);
    gf_CreateAftermathDialog();
}

void gf_HellVictoryTriggeredByThroneDeath (bool lp_tEAMLEFT) {
    // Variable Declarations
    int lv_playa;
    fixed lv_endTimer;
    bool lv_cheekyTaunt;

    // Automatic Variable Declarations
    playergroup autoB7AA56C6_g;
    playergroup autoF5F788C9_g;

    // Variable Initialization
    lv_endTimer = 5.0;

    // Implementation
    if ((gv_gameData.lv_hellHasWon == true)) {
        return ;
    }

    gv_gameData.lv_hellHasWon = true;
    PingSetVisible(gv_gameData.lv_pingsHellPoV[0], false);
    PingSetVisible(gv_gameData.lv_pingsHeavenPoV[gv_syn.lv_pingsThrone], false);
    ObjectiveSetState(gv_gameData.lv_objectivesHeavenPrimary[0], c_objectiveStateFailed);
    ObjectiveSetState(gv_gameData.lv_objectivesHeavenPrimary[1], c_objectiveStateFailed);
    ObjectiveSetState(gv_gameData.lv_objectivesHellPrimary[0], c_objectiveStateCompleted);
    ObjectiveSetState(gv_gameData.lv_objectivesHellPrimary[1], c_objectiveStateCompleted);
    gf_AftermathFinalizePlayerStats();
    TimerPause(gv_gameData.lv_godTimer, true);
    TimerPause(gv__35minuterealtimer, true);
    if ((lp_tEAMLEFT == false)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/0D8292AE"));
    }
    else {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/F13ED342"));
    }
    if ((gv_banks.lv_statsdisabled == false)) {
        autoB7AA56C6_g = gv_gameData.lv_playerGroupHeaven;
        lv_playa = -1;
        while (true) {
            lv_playa = PlayerGroupNextPlayer(autoB7AA56C6_g, lv_playa);
            if (lv_playa < 0) { break; }
            if ((PlayerStatus(lv_playa) == c_playerStatusActive) && (PlayerType(lv_playa) == c_playerTypeUser)) {
                gv_banks.lv_losses[lv_playa][gv_playerData[lv_playa].lv_currentRole] += 1;
                gv_banks.lv_bankUpdated[lv_playa] = true;
            }

        }
        autoF5F788C9_g = gv_gameData.lv_playerGroupHell;
        lv_playa = -1;
        while (true) {
            lv_playa = PlayerGroupNextPlayer(autoF5F788C9_g, lv_playa);
            if (lv_playa < 0) { break; }
            if ((PlayerStatus(lv_playa) == c_playerStatusActive) && (PlayerType(lv_playa) == c_playerTypeUser)) {
                gv_banks.lv_wins[lv_playa][gv_playerData[lv_playa].lv_currentRole] += 1;
                gv_banks.lv_bankUpdated[lv_playa] = true;
            }

        }
        TriggerExecute(gt_PeriodicBankSave, true, false);
    }

    gv_banks.lv_statsdisabled = true;
    while ((lv_endTimer > 0.0)) {
        if ((libNtve_gf_UnitGroupIsDead(UnitGroupFromId(4)) == true) && (lv_cheekyTaunt == false)) {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/BB9BB375"));
            lv_cheekyTaunt = true;
        }

        lv_endTimer -= 0.5;
        Wait(0.5, c_timeGame);
    }
    gf_CreateAftermathDialog();
}

void gf_FinishGame () {
    // Variable Declarations
    int lv_playa;

    // Automatic Variable Declarations
    playergroup auto85F57D23_g;
    playergroup auto27C1D81E_g;
    playergroup auto904D55B5_g;
    playergroup auto4D4FB63D_g;
    playergroup auto4C066B1D_g;

    // Variable Initialization

    // Implementation
    if ((gv_gameData.lv_heavenHasWon == true)) {
        auto85F57D23_g = gv_gameData.lv_playerGroupHeaven;
        lv_playa = -1;
        while (true) {
            lv_playa = PlayerGroupNextPlayer(auto85F57D23_g, lv_playa);
            if (lv_playa < 0) { break; }
            if ((PlayerStatus(lv_playa) == c_playerStatusActive) && (PlayerType(lv_playa) == c_playerTypeUser)) {
                GameOver(lv_playa, c_gameOverVictory, true, true);
            }

        }
        auto27C1D81E_g = gv_gameData.lv_playerGroupHell;
        lv_playa = -1;
        while (true) {
            lv_playa = PlayerGroupNextPlayer(auto27C1D81E_g, lv_playa);
            if (lv_playa < 0) { break; }
            if ((PlayerStatus(lv_playa) == c_playerStatusActive) && (PlayerType(lv_playa) == c_playerTypeUser)) {
                GameOver(lv_playa, c_gameOverDefeat, true, true);
            }

        }
    }

    if ((gv_gameData.lv_hellHasWon == true)) {
        auto904D55B5_g = gv_gameData.lv_playerGroupHeaven;
        lv_playa = -1;
        while (true) {
            lv_playa = PlayerGroupNextPlayer(auto904D55B5_g, lv_playa);
            if (lv_playa < 0) { break; }
            if ((PlayerStatus(lv_playa) == c_playerStatusActive) && (PlayerType(lv_playa) == c_playerTypeUser)) {
                GameOver(lv_playa, c_gameOverDefeat, true, true);
            }

        }
        auto4D4FB63D_g = gv_gameData.lv_playerGroupHell;
        lv_playa = -1;
        while (true) {
            lv_playa = PlayerGroupNextPlayer(auto4D4FB63D_g, lv_playa);
            if (lv_playa < 0) { break; }
            if ((PlayerStatus(lv_playa) == c_playerStatusActive) && (PlayerType(lv_playa) == c_playerTypeUser)) {
                GameOver(lv_playa, c_gameOverVictory, true, true);
            }

        }
    }

    auto4C066B1D_g = gv_gameData.lv_playerGroupObservers;
    lv_playa = -1;
    while (true) {
        lv_playa = PlayerGroupNextPlayer(auto4C066B1D_g, lv_playa);
        if (lv_playa < 0) { break; }
        if ((PlayerStatus(lv_playa) == c_playerStatusActive) && (PlayerType(lv_playa) == c_playerTypeUser)) {
            GameOver(lv_playa, c_gameOverTie, true, true);
        }

    }
}

void gf_FinishGameforPlayer (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((((gv_gameData.lv_hellHasWon == true) && (PlayerGroupHasPlayer(gv_gameData.lv_playerGroupHell, lp_player) == true)) || ((gv_gameData.lv_heavenHasWon == true) && (PlayerGroupHasPlayer(gv_gameData.lv_playerGroupHeaven, lp_player) == true)))) {
        GameOver(lp_player, c_gameOverVictory, true, true);
    }
    else {
        GameOver(lp_player, c_gameOverDefeat, true, true);
    }
}

void gf_DeathMessageRefresh () {
    // Automatic Variable Declarations
    // Implementation
    TextExpressionSetToken("Param/Expression/547E5084", "A", gv_deathMessages.lv_alignment);
    TextExpressionSetToken("Param/Expression/547E5084", "B", TextWithColor(UnitGetName(gv_deathMessages.lv_victim), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(UnitGetOwner(gv_deathMessages.lv_victim), false))));
    gv_deathMessages.lv_basicUnit = TextExpressionAssemble("Param/Expression/547E5084");
    TextExpressionSetToken("Param/Expression/03DDF731", "B", TextWithColor(UnitGetName(gv_deathMessages.lv_victim), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(UnitGetOwner(gv_deathMessages.lv_victim), false))));
    gv_deathMessages.lv_specialUnit = TextExpressionAssemble("Param/Expression/03DDF731");
    TextExpressionSetToken("Param/Expression/A9CDDBB6", "A", gv_deathMessages.lv_alignment);
    TextExpressionSetToken("Param/Expression/A9CDDBB6", "B", TextWithColor(UnitGetName(gv_deathMessages.lv_victim), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(UnitGetOwner(gv_deathMessages.lv_victim), false))));
    TextExpressionSetToken("Param/Expression/A9CDDBB6", "C", TextWithColor(UnitGetName(gv_deathMessages.lv_killer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(UnitGetOwner(gv_deathMessages.lv_killer), false))));
    gv_deathMessages.lv_hellBasicHero = TextExpressionAssemble("Param/Expression/A9CDDBB6");
    TextExpressionSetToken("Param/Expression/CC785E5F", "B", TextWithColor(UnitGetName(gv_deathMessages.lv_victim), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(UnitGetOwner(gv_deathMessages.lv_victim), false))));
    TextExpressionSetToken("Param/Expression/CC785E5F", "C", TextWithColor(UnitGetName(gv_deathMessages.lv_killer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(UnitGetOwner(gv_deathMessages.lv_killer), false))));
    gv_deathMessages.lv_hellSpecialHero = TextExpressionAssemble("Param/Expression/CC785E5F");
    TextExpressionSetToken("Param/Expression/CB09F571", "A", gv_deathMessages.lv_alignment);
    TextExpressionSetToken("Param/Expression/CB09F571", "B", TextWithColor(UnitGetName(gv_deathMessages.lv_victim), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(UnitGetOwner(gv_deathMessages.lv_victim), false))));
    TextExpressionSetToken("Param/Expression/CB09F571", "C", TextWithColor(UnitGetName(gv_deathMessages.lv_killer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(UnitGetOwner(gv_deathMessages.lv_killer), false))));
    gv_deathMessages.lv_heavenBasicHero = TextExpressionAssemble("Param/Expression/CB09F571");
    TextExpressionSetToken("Param/Expression/B5830AA6", "B", TextWithColor(UnitGetName(gv_deathMessages.lv_victim), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(UnitGetOwner(gv_deathMessages.lv_victim), false))));
    TextExpressionSetToken("Param/Expression/B5830AA6", "C", TextWithColor(UnitGetName(gv_deathMessages.lv_killer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(UnitGetOwner(gv_deathMessages.lv_killer), false))));
    gv_deathMessages.lv_heavenSpecialHero = TextExpressionAssemble("Param/Expression/B5830AA6");
    TextExpressionSetToken("Param/Expression/15736110", "A", gv_deathMessages.lv_alignment);
    TextExpressionSetToken("Param/Expression/15736110", "B", TextWithColor(UnitGetName(gv_deathMessages.lv_victim), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(UnitGetOwner(gv_deathMessages.lv_victim), false))));
    TextExpressionSetToken("Param/Expression/15736110", "C", TextWithColor(UnitGetName(gv_deathMessages.lv_killer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(UnitGetOwner(gv_deathMessages.lv_killer), false))));
    gv_deathMessages.lv_killedByGod = TextExpressionAssemble("Param/Expression/15736110");
    TextExpressionSetToken("Param/Expression/466AE63A", "B", TextWithColor(UnitGetName(gv_deathMessages.lv_victim), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(UnitGetOwner(gv_deathMessages.lv_victim), false))));
    TextExpressionSetToken("Param/Expression/466AE63A", "C", TextWithColor(UnitGetName(gv_deathMessages.lv_killer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(UnitGetOwner(gv_deathMessages.lv_killer), false))));
    gv_deathMessages.lv_messiahJk1 = TextExpressionAssemble("Param/Expression/466AE63A");
    TextExpressionSetToken("Param/Expression/1F5C99C0", "B", TextWithColor(UnitGetName(gv_deathMessages.lv_victim), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(UnitGetOwner(gv_deathMessages.lv_victim), false))));
    TextExpressionSetToken("Param/Expression/1F5C99C0", "C", TextWithColor(UnitGetName(gv_deathMessages.lv_killer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(UnitGetOwner(gv_deathMessages.lv_killer), false))));
    gv_deathMessages.lv_sandalphonJk1 = TextExpressionAssemble("Param/Expression/1F5C99C0");
    TextExpressionSetToken("Param/Expression/C21E0735", "B", TextWithColor(UnitGetName(gv_deathMessages.lv_victim), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(UnitGetOwner(gv_deathMessages.lv_victim), false))));
    TextExpressionSetToken("Param/Expression/C21E0735", "C", TextWithColor(UnitGetName(gv_deathMessages.lv_killer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(UnitGetOwner(gv_deathMessages.lv_killer), false))));
    gv_deathMessages.lv_gabrielJk1 = TextExpressionAssemble("Param/Expression/C21E0735");
    TextExpressionSetToken("Param/Expression/C5DE00A6", "D", TextWithColor(StringExternal("Param/Value/9ADE4622"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))));
    TextExpressionSetToken("Param/Expression/C5DE00A6", "B", TextWithColor(UnitGetName(gv_deathMessages.lv_victim), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(UnitGetOwner(gv_deathMessages.lv_victim), false))));
    TextExpressionSetToken("Param/Expression/C5DE00A6", "C", TextWithColor(UnitGetName(gv_deathMessages.lv_killer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(UnitGetOwner(gv_deathMessages.lv_killer), false))));
    gv_deathMessages.lv_dumaJk1 = TextExpressionAssemble("Param/Expression/C5DE00A6");
    TextExpressionSetToken("Param/Expression/8617D2FE", "B", TextWithColor(UnitGetName(gv_deathMessages.lv_victim), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(UnitGetOwner(gv_deathMessages.lv_victim), false))));
    TextExpressionSetToken("Param/Expression/8617D2FE", "D", TextWithColor(StringExternal("Param/Value/C2025D7A"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))));
    TextExpressionSetToken("Param/Expression/8617D2FE", "C", TextWithColor(UnitGetName(gv_deathMessages.lv_killer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(UnitGetOwner(gv_deathMessages.lv_killer), false))));
    gv_deathMessages.lv_urielJk1 = TextExpressionAssemble("Param/Expression/8617D2FE");
    TextExpressionSetToken("Param/Expression/11A81944", "A", gv_deathMessages.lv_alignment);
    TextExpressionSetToken("Param/Expression/11A81944", "B", TextWithColor(UnitGetName(gv_deathMessages.lv_victim), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(UnitGetOwner(gv_deathMessages.lv_victim), false))));
    TextExpressionSetToken("Param/Expression/11A81944", "C", TextWithColor(UnitGetName(gv_deathMessages.lv_killer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(UnitGetOwner(gv_deathMessages.lv_killer), false))));
    gv_deathMessages.lv_urielSrs1 = TextExpressionAssemble("Param/Expression/11A81944");
    TextExpressionSetToken("Param/Expression/44986D18", "A", gv_deathMessages.lv_alignment);
    TextExpressionSetToken("Param/Expression/44986D18", "B", TextWithColor(UnitGetName(gv_deathMessages.lv_victim), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(UnitGetOwner(gv_deathMessages.lv_victim), false))));
    TextExpressionSetToken("Param/Expression/44986D18", "C", TextWithColor(UnitGetName(gv_deathMessages.lv_killer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(UnitGetOwner(gv_deathMessages.lv_killer), false))));
    gv_deathMessages.lv_donatelloJk1 = TextExpressionAssemble("Param/Expression/44986D18");
    TextExpressionSetToken("Param/Expression/3A10561C", "A", gv_deathMessages.lv_alignment);
    TextExpressionSetToken("Param/Expression/3A10561C", "B", TextWithColor(UnitGetName(gv_deathMessages.lv_victim), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(UnitGetOwner(gv_deathMessages.lv_victim), false))));
    TextExpressionSetToken("Param/Expression/3A10561C", "C", TextWithColor(UnitGetName(gv_deathMessages.lv_killer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(UnitGetOwner(gv_deathMessages.lv_killer), false))));
    gv_deathMessages.lv_seraphielSrs1 = TextExpressionAssemble("Param/Expression/3A10561C");
    TextExpressionSetToken("Param/Expression/7AE1DD72", "A", gv_deathMessages.lv_alignment);
    TextExpressionSetToken("Param/Expression/7AE1DD72", "B", TextWithColor(UnitGetName(gv_deathMessages.lv_victim), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(UnitGetOwner(gv_deathMessages.lv_victim), false))));
    TextExpressionSetToken("Param/Expression/7AE1DD72", "C", TextWithColor(UnitGetName(gv_deathMessages.lv_killer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(UnitGetOwner(gv_deathMessages.lv_killer), false))));
    gv_deathMessages.lv_nathanielJk1 = TextExpressionAssemble("Param/Expression/7AE1DD72");
    TextExpressionSetToken("Param/Expression/11C266E7", "D", TextWithColor(StringExternal("Param/Value/DDB4E0E1"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))));
    TextExpressionSetToken("Param/Expression/11C266E7", "C", TextWithColor(UnitGetName(gv_deathMessages.lv_killer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(UnitGetOwner(gv_deathMessages.lv_killer), false))));
    gv_deathMessages.lv_michaelJk1 = TextExpressionAssemble("Param/Expression/11C266E7");
    TextExpressionSetToken("Param/Expression/8207891A", "A", gv_deathMessages.lv_alignment);
    TextExpressionSetToken("Param/Expression/8207891A", "D", TextWithColor(StringExternal("Param/Value/AED3FA2C"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))));
    TextExpressionSetToken("Param/Expression/8207891A", "C", TextWithColor(UnitGetName(gv_deathMessages.lv_killer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(UnitGetOwner(gv_deathMessages.lv_killer), false))));
    gv_deathMessages.lv_michaelJk2 = TextExpressionAssemble("Param/Expression/8207891A");
    TextExpressionSetToken("Param/Expression/CF494711", "A", gv_deathMessages.lv_alignment);
    TextExpressionSetToken("Param/Expression/CF494711", "B", TextWithColor(UnitGetName(gv_deathMessages.lv_victim), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(UnitGetOwner(gv_deathMessages.lv_victim), false))));
    TextExpressionSetToken("Param/Expression/CF494711", "C", TextWithColor(UnitGetName(gv_deathMessages.lv_killer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(UnitGetOwner(gv_deathMessages.lv_killer), false))));
    gv_deathMessages.lv_raphaelJk1 = TextExpressionAssemble("Param/Expression/CF494711");
    TextExpressionSetToken("Param/Expression/CF9A8868", "A", gv_deathMessages.lv_alignment);
    TextExpressionSetToken("Param/Expression/CF9A8868", "B", TextWithColor(UnitGetName(gv_deathMessages.lv_victim), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(UnitGetOwner(gv_deathMessages.lv_victim), false))));
    TextExpressionSetToken("Param/Expression/CF9A8868", "C", TextWithColor(UnitGetName(gv_deathMessages.lv_killer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(UnitGetOwner(gv_deathMessages.lv_killer), false))));
    gv_deathMessages.lv_jehoelSrs1 = TextExpressionAssemble("Param/Expression/CF9A8868");
    TextExpressionSetToken("Param/Expression/EAB0A725", "A", gv_deathMessages.lv_alignment);
    TextExpressionSetToken("Param/Expression/EAB0A725", "B", TextWithColor(UnitGetName(gv_deathMessages.lv_victim), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(UnitGetOwner(gv_deathMessages.lv_victim), false))));
    TextExpressionSetToken("Param/Expression/EAB0A725", "C", TextWithColor(UnitGetName(gv_deathMessages.lv_killer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(UnitGetOwner(gv_deathMessages.lv_killer), false))));
    gv_deathMessages.lv_metatronSrs1 = TextExpressionAssemble("Param/Expression/EAB0A725");
    TextExpressionSetToken("Param/Expression/88059392", "B", TextWithColor(UnitGetName(gv_deathMessages.lv_victim), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(UnitGetOwner(gv_deathMessages.lv_victim), false))));
    TextExpressionSetToken("Param/Expression/88059392", "D", TextWithColor(StringExternal("Param/Value/26A6E271"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(UnitGetOwner(gv_deathMessages.lv_victim), false))));
    TextExpressionSetToken("Param/Expression/88059392", "E", TextWithColor(StringExternal("Param/Value/BF42C5C5"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(UnitGetOwner(gv_deathMessages.lv_victim), false))));
    TextExpressionSetToken("Param/Expression/88059392", "C", TextWithColor(UnitGetName(gv_deathMessages.lv_killer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(UnitGetOwner(gv_deathMessages.lv_killer), false))));
    gv_deathMessages.lv_zadkielJk1 = TextExpressionAssemble("Param/Expression/88059392");
    TextExpressionSetToken("Param/Expression/ADB420A2", "B", TextWithColor(UnitGetName(gv_deathMessages.lv_victim), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(UnitGetOwner(gv_deathMessages.lv_victim), false))));
    TextExpressionSetToken("Param/Expression/ADB420A2", "C", TextWithColor(UnitGetName(gv_deathMessages.lv_killer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(UnitGetOwner(gv_deathMessages.lv_killer), false))));
    gv_deathMessages.lv_devilSrs1 = TextExpressionAssemble("Param/Expression/ADB420A2");
    TextExpressionSetToken("Param/Expression/A954E7BC", "A", gv_deathMessages.lv_alignment);
    TextExpressionSetToken("Param/Expression/A954E7BC", "D", TextWithColor(StringExternal("Param/Value/07226585"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))));
    TextExpressionSetToken("Param/Expression/A954E7BC", "C", TextWithColor(UnitGetName(gv_deathMessages.lv_killer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(UnitGetOwner(gv_deathMessages.lv_killer), false))));
    gv_deathMessages.lv_asmodeusJk1 = TextExpressionAssemble("Param/Expression/A954E7BC");
    TextExpressionSetToken("Param/Expression/38539187", "D", TextWithColor(StringExternal("Param/Value/6CB54382"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))));
    TextExpressionSetToken("Param/Expression/38539187", "C", TextWithColor(UnitGetName(gv_deathMessages.lv_killer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(UnitGetOwner(gv_deathMessages.lv_killer), false))));
    gv_deathMessages.lv_astarothJk1 = TextExpressionAssemble("Param/Expression/38539187");
    TextExpressionSetToken("Param/Expression/63C040B0", "B", TextWithColor(UnitGetName(gv_deathMessages.lv_victim), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(UnitGetOwner(gv_deathMessages.lv_victim), false))));
    TextExpressionSetToken("Param/Expression/63C040B0", "C", TextWithColor(UnitGetName(gv_deathMessages.lv_killer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(UnitGetOwner(gv_deathMessages.lv_killer), false))));
    gv_deathMessages.lv_beelzebubJk1 = TextExpressionAssemble("Param/Expression/63C040B0");
    TextExpressionSetToken("Param/Expression/960A742F", "D", TextWithColor(StringExternal("Param/Value/8167EBD9"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))));
    TextExpressionSetToken("Param/Expression/960A742F", "C", TextWithColor(UnitGetName(gv_deathMessages.lv_killer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(UnitGetOwner(gv_deathMessages.lv_killer), false))));
    gv_deathMessages.lv_mammonJk1 = TextExpressionAssemble("Param/Expression/960A742F");
    TextExpressionSetToken("Param/Expression/65C10DD6", "B", TextWithColor(UnitGetName(gv_deathMessages.lv_victim), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(UnitGetOwner(gv_deathMessages.lv_victim), false))));
    TextExpressionSetToken("Param/Expression/65C10DD6", "C", TextWithColor(UnitGetName(gv_deathMessages.lv_killer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(UnitGetOwner(gv_deathMessages.lv_killer), false))));
    gv_deathMessages.lv_sammyazzaSrs1 = TextExpressionAssemble("Param/Expression/65C10DD6");
    TextExpressionSetToken("Param/Expression/52E748A7", "D", TextWithColor(StringExternal("Param/Value/334B34C6"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))));
    TextExpressionSetToken("Param/Expression/52E748A7", "C", TextWithColor(UnitGetName(gv_deathMessages.lv_killer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(UnitGetOwner(gv_deathMessages.lv_killer), false))));
    gv_deathMessages.lv_azazelJk1 = TextExpressionAssemble("Param/Expression/52E748A7");
    TextExpressionSetToken("Param/Expression/4AB3D705", "A", gv_deathMessages.lv_alignment);
    TextExpressionSetToken("Param/Expression/4AB3D705", "B", TextWithColor(UnitGetName(gv_deathMessages.lv_victim), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(UnitGetOwner(gv_deathMessages.lv_victim), false))));
    TextExpressionSetToken("Param/Expression/4AB3D705", "C", TextWithColor(UnitGetName(gv_deathMessages.lv_killer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(UnitGetOwner(gv_deathMessages.lv_killer), false))));
    gv_deathMessages.lv_abaddonSrs1 = TextExpressionAssemble("Param/Expression/4AB3D705");
    TextExpressionSetToken("Param/Expression/4C3C570C", "B", TextWithColor(UnitGetName(gv_deathMessages.lv_victim), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(UnitGetOwner(gv_deathMessages.lv_victim), false))));
    TextExpressionSetToken("Param/Expression/4C3C570C", "C", TextWithColor(UnitGetName(gv_deathMessages.lv_killer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(UnitGetOwner(gv_deathMessages.lv_killer), false))));
    gv_deathMessages.lv_berithJk1 = TextExpressionAssemble("Param/Expression/4C3C570C");
    TextExpressionSetToken("Param/Expression/EE9947FC", "B", TextWithColor(UnitGetName(gv_deathMessages.lv_victim), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(UnitGetOwner(gv_deathMessages.lv_victim), false))));
    TextExpressionSetToken("Param/Expression/EE9947FC", "D", TextWithColor(StringExternal("Param/Value/EB6AAAFB"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))));
    TextExpressionSetToken("Param/Expression/EE9947FC", "C", TextWithColor(UnitGetName(gv_deathMessages.lv_killer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(UnitGetOwner(gv_deathMessages.lv_killer), false))));
    gv_deathMessages.lv_molochJk1 = TextExpressionAssemble("Param/Expression/EE9947FC");
}

void gf_ScoreboardRefresh (bool lp_primeKilled, unit lp_unit, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_gameData.lv_heavenHasWon == false) && (gv_gameData.lv_hellHasWon == false)) {
        gv_playerData[lp_player].lv_aftermathHeroesKilled += 1;
        if ((lp_primeKilled == true)) {
            gv_playerData[lp_player].lv_aftermathPrimesKilled += 1;
        }

        gf_AddHeroKillScoreAftermathIconTooltip(lp_unit, lp_player);
    }

    gf_UpdateObjectivePrimeCount();
}

void gf_AddHeroKillScoreAftermathIconTooltip (unit lp_dYINGHERO, int lp_kILLINGPLAYER) {
    // Variable Declarations
    text lv_iconInsert;
    int lv_size;
    bool lv_isAPrime;
    bool lv_isZadMolo;

    // Automatic Variable Declarations
    string auto17FA67E2_val;

    // Variable Initialization
    lv_size = 64;

    // Implementation
    if (((gv_gameData.lv_heavenHasWon == true) || (gv_gameData.lv_hellHasWon == true))) {
        return ;
    }

    auto17FA67E2_val = UnitGetType(lp_dYINGHERO);
    if (auto17FA67E2_val == "Artanis") {
        lv_iconInsert = StringExternal("Param/Value/3796A6F8");
        lv_isAPrime = true;
    }
    else if (auto17FA67E2_val == "Loki") {
        lv_iconInsert = StringExternal("Param/Value/3C863981");
    }
    else if (auto17FA67E2_val == "Colossus") {
        lv_iconInsert = StringExternal("Param/Value/65FE06E0");
    }
    else if (auto17FA67E2_val == "Raguel") {
        lv_iconInsert = StringExternal("Param/Value/4B98D7CB");
    }
    else if (auto17FA67E2_val == "Sentry") {
        lv_iconInsert = StringExternal("Param/Value/7183412D");
    }
    else if (auto17FA67E2_val == "Hellion") {
        lv_iconInsert = StringExternal("Param/Value/DD183857");
    }
    else if (auto17FA67E2_val == "Donatello") {
        lv_iconInsert = StringExternal("Param/Value/F0A07B12");
    }
    else if (auto17FA67E2_val == "WarPig") {
        lv_iconInsert = StringExternal("Param/Value/4F009C46");
    }
    else if (auto17FA67E2_val == "MedivacAPC") {
        lv_iconInsert = StringExternal("Param/Value/28EAE349");
    }
    else if (auto17FA67E2_val == "Nova") {
        lv_iconInsert = StringExternal("Param/Value/6F95ED85");
    }
    else if (auto17FA67E2_val == "HelsAngelAssault") {
        lv_iconInsert = StringExternal("Param/Value/F9859EE1");
    }
    else if (auto17FA67E2_val == "HelsAngelFighter") {
        lv_iconInsert = StringExternal("Param/Value/E91194D1");
        lv_iconInsert = StringExternal("Param/Value/B133B39F");
    }
    else if (auto17FA67E2_val == "PrisonZealot") {
        lv_iconInsert = StringExternal("Param/Value/BFCFD3EF");
    }
    else if (auto17FA67E2_val == "Metatron") {
        lv_iconInsert = StringExternal("Param/Value/156AB6E8");
    }
    else if (auto17FA67E2_val == "DarkTemplar") {
        lv_iconInsert = StringExternal("Param/Value/30B8C858");
        lv_isZadMolo = true;
    }
    else if (auto17FA67E2_val == "Mutalisk") {
        lv_iconInsert = StringExternal("Param/Value/8ECE2042");
        lv_isAPrime = true;
    }
    else if (auto17FA67E2_val == "Infestor") {
        lv_iconInsert = StringExternal("Param/Value/40E48E15");
    }
    else if (auto17FA67E2_val == "InfestorBurrowed") {
        lv_iconInsert = StringExternal("Param/Value/203343D4");
    }
    else if (auto17FA67E2_val == "Ultralisk") {
        lv_iconInsert = StringExternal("Param/Value/25944A9B");
    }
    else if (auto17FA67E2_val == "UltraliskBurrowed") {
        lv_iconInsert = StringExternal("Param/Value/38723343");
    }
    else if (auto17FA67E2_val == "Odin") {
        lv_iconInsert = StringExternal("Param/Value/0F978F2E");
        lv_isAPrime = true;
    }
    else if (auto17FA67E2_val == "OdinFlying") {
        lv_iconInsert = StringExternal("Param/Value/9DD74B54");
        lv_isAPrime = true;
    }
    else if (auto17FA67E2_val == "Karass") {
        lv_iconInsert = StringExternal("Param/Value/A285448C");
    }
    else if (auto17FA67E2_val == "Lurker") {
        lv_iconInsert = StringExternal("Param/Value/8D49BBF9");
    }
    else if (auto17FA67E2_val == "LurkerBurrowed") {
        lv_iconInsert = StringExternal("Param/Value/CC6BD124");
    }
    else if (auto17FA67E2_val == "Hydralisk2") {
        lv_iconInsert = StringExternal("Param/Value/EF520146");
        lv_isAPrime = true;
    }
    else if (auto17FA67E2_val == "HydraliskBurrowed2") {
        lv_iconInsert = StringExternal("Param/Value/9574AA6C");
        lv_isAPrime = true;
    }
    else if (auto17FA67E2_val == "KerriganChar") {
        lv_iconInsert = StringExternal("Param/Value/467B04FE");
    }
    else if (auto17FA67E2_val == "KerriganCharBurrowed") {
        lv_iconInsert = StringExternal("Param/Value/4BA0CEEB");
    }
    else if (auto17FA67E2_val == "Zeratul") {
        lv_iconInsert = StringExternal("Param/Value/49D98152");
    }
    else if (auto17FA67E2_val == "Stalker") {
        lv_iconInsert = StringExternal("Param/Value/12299ACC");
        lv_isZadMolo = true;
    }
    else {
        lv_iconInsert = StringExternal("Param/Value/A1528351");
    }
    TextExpressionSetToken("Param/Expression/F7E389E3", "ICON", lv_iconInsert);
    TextExpressionSetToken("Param/Expression/F7E389E3", "A", IntToText(lv_size));
    TextExpressionSetToken("Param/Expression/F7E389E3", "A", IntToText(lv_size));
    lv_iconInsert = TextExpressionAssemble("Param/Expression/F7E389E3");
    if ((lv_isAPrime == true)) {
        if ((gv_playerData[lp_kILLINGPLAYER].lv_aftermathHeroesKilledTooltipPrimes == null)) {
            gv_playerData[lp_kILLINGPLAYER].lv_aftermathHeroesKilledTooltipPrimes = lv_iconInsert;
        }
        else {
            TextExpressionSetToken("Param/Expression/1FC88D0F", "A", gv_playerData[lp_kILLINGPLAYER].lv_aftermathHeroesKilledTooltipPrimes);
            TextExpressionSetToken("Param/Expression/1FC88D0F", "B", lv_iconInsert);
            gv_playerData[lp_kILLINGPLAYER].lv_aftermathHeroesKilledTooltipPrimes = TextExpressionAssemble("Param/Expression/1FC88D0F");
        }
        return ;
    }

    if ((lv_isZadMolo == true)) {
        TextExpressionSetToken("Param/Expression/9BF4D49F", "A", lv_iconInsert);
        TextExpressionSetToken("Param/Expression/9BF4D49F", "B", IntToText(gv_playerData[lp_kILLINGPLAYER].lv_aftermathZadMolochKilled));
        gv_playerData[lp_kILLINGPLAYER].lv_aftermathHeroesKilledTooltipZadMoloch = TextExpressionAssemble("Param/Expression/9BF4D49F");
        return ;
    }

    if ((gv_playerData[lp_kILLINGPLAYER].lv_aftermathHeroesKilledTooltipNormal == null)) {
        gv_playerData[lp_kILLINGPLAYER].lv_aftermathHeroesKilledTooltipNormal = lv_iconInsert;
    }
    else {
        TextExpressionSetToken("Param/Expression/545B6692", "A", gv_playerData[lp_kILLINGPLAYER].lv_aftermathHeroesKilledTooltipNormal);
        TextExpressionSetToken("Param/Expression/545B6692", "B", lv_iconInsert);
        gv_playerData[lp_kILLINGPLAYER].lv_aftermathHeroesKilledTooltipNormal = TextExpressionAssemble("Param/Expression/545B6692");
    }
}

void gf_CreateObjectives () {
    // Variable Declarations
    int lv_hookup;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_hookup = c_invalidDialogControlId;

    // Implementation
    DialogControlHookupStandard(c_triggerControlTypePanel, ("UIContainer/FullscreenUpperContainer/ObjectivePanel"));
    lv_hookup = DialogControlLastCreated();
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, 5, 20);
    ObjectiveCreateForPlayers(StringExternal("Param/Value/E71B7182"), StringToText(""), c_objectiveStateActive, true, gv_gameData.lv_playerGroupHeaven);
    gv_gameData.lv_objectivesHeavenPrimary[0] = ObjectiveLastCreated();
    ObjectiveCreateForPlayers(StringToText(""), StringToText(""), c_objectiveStateActive, true, gv_gameData.lv_playerGroupHeaven);
    gv_gameData.lv_objectivesHeavenPrimary[1] = ObjectiveLastCreated();
    ObjectiveCreateForPlayers(StringExternal("Param/Value/926B40BE"), StringToText(""), c_objectiveStateActive, true, gv_gameData.lv_playerGroupHell);
    gv_gameData.lv_objectivesHellPrimary[0] = ObjectiveLastCreated();
    ObjectiveCreateForPlayers(StringToText(""), StringToText(""), c_objectiveStateActive, true, gv_gameData.lv_playerGroupHell);
    gv_gameData.lv_objectivesHellPrimary[1] = ObjectiveLastCreated();
    gf_UpdateObjectivePrimeCount();
    gf_UpdateObjectiveGodTimer();
}

trigger auto_gf_UpdateObjectivePrimeCount_Trigger = null;

void gf_UpdateObjectivePrimeCount () {
    if (auto_gf_UpdateObjectivePrimeCount_Trigger == null) {
        auto_gf_UpdateObjectivePrimeCount_Trigger = TriggerCreate("auto_gf_UpdateObjectivePrimeCount_TriggerFunc");
    }

    TriggerExecute(auto_gf_UpdateObjectivePrimeCount_Trigger, false, false);
}

bool auto_gf_UpdateObjectivePrimeCount_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    TextExpressionSetToken("Param/Expression/35C435AE", "A", StringExternal("Param/Value/FD02AFFB"));
    TextExpressionSetToken("Param/Expression/35C435AE", "B", IntToText(UnitGroupCount(UnitGroupFromId(4), c_unitCountAlive)));
    ObjectiveSetName(gv_gameData.lv_objectivesHeavenPrimary[1], TextExpressionAssemble("Param/Expression/35C435AE"));
    TextExpressionSetToken("Param/Expression/9D4883D0", "A", StringExternal("Param/Value/361E64CA"));
    TextExpressionSetToken("Param/Expression/9D4883D0", "B", IntToText(UnitGroupCount(UnitGroupFromId(4), c_unitCountAlive)));
    ObjectiveSetName(gv_gameData.lv_objectivesHellPrimary[1], TextExpressionAssemble("Param/Expression/9D4883D0"));
    if ((UnitGroupCount(UnitGroupFromId(4), c_unitCountAlive) == 0) && (gv_gameData.lv_hellHasWon == false)) {
        ObjectiveSetState(gv_gameData.lv_objectivesHeavenPrimary[1], c_objectiveStateCompleted);
        ObjectiveSetState(gv_gameData.lv_objectivesHellPrimary[1], c_objectiveStateFailed);
        if ((gv_gameData.lv_hellHasWon == false)) {
            gf_HeavenVictoryTriggeredByPrimeDeath(false);
        }

    }

    return true;
}

trigger auto_gf_UpdateObjectiveGodTimer_Trigger = null;

void gf_UpdateObjectiveGodTimer () {
    if (auto_gf_UpdateObjectiveGodTimer_Trigger == null) {
        auto_gf_UpdateObjectiveGodTimer_Trigger = TriggerCreate("auto_gf_UpdateObjectiveGodTimer_TriggerFunc");
    }

    TriggerExecute(auto_gf_UpdateObjectiveGodTimer_Trigger, false, false);
}

bool auto_gf_UpdateObjectiveGodTimer_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    TextExpressionSetToken("Param/Expression/C3A14CCA", "A", StringExternal("Param/Value/72700CF8"));
    ObjectiveSetName(gv_gameData.lv_objectivesHeavenPrimary[0], TextExpressionAssemble("Param/Expression/C3A14CCA"));
    TextExpressionSetToken("Param/Expression/910B19C9", "A", StringExternal("Param/Value/CAE38676"));
    ObjectiveSetName(gv_gameData.lv_objectivesHellPrimary[0], TextExpressionAssemble("Param/Expression/910B19C9"));
    return true;
    Wait(2.0, c_timeGame);
    while ((TimerGetRemaining(gv_gameData.lv_godTimer) > 0.0) && (gv_gameData.lv_hellHasWon == false) && (gv_gameData.lv_heavenHasWon == false)) {
        TextExpressionSetToken("Param/Expression/9665AC58", "A", StringExternal("Param/Value/CC6ECF53"));
        TextExpressionSetToken("Param/Expression/9665AC58", "B", TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), FixedToInt(TimerGetRemaining(gv_gameData.lv_godTimer))));
        ObjectiveSetName(gv_gameData.lv_objectivesHeavenPrimary[0], TextExpressionAssemble("Param/Expression/9665AC58"));
        TextExpressionSetToken("Param/Expression/829BD2D4", "A", StringExternal("Param/Value/0EEECDB3"));
        TextExpressionSetToken("Param/Expression/829BD2D4", "B", TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), FixedToInt(TimerGetRemaining(gv_gameData.lv_godTimer))));
        ObjectiveSetName(gv_gameData.lv_objectivesHellPrimary[0], TextExpressionAssemble("Param/Expression/829BD2D4"));
        Wait(0.25, c_timeGame);
    }
    return true;
}

trigger auto_gf_UpdateObjectiveGodhasReturned_Trigger = null;

void gf_UpdateObjectiveGodhasReturned () {
    if (auto_gf_UpdateObjectiveGodhasReturned_Trigger == null) {
        auto_gf_UpdateObjectiveGodhasReturned_Trigger = TriggerCreate("auto_gf_UpdateObjectiveGodhasReturned_TriggerFunc");
    }

    TriggerExecute(auto_gf_UpdateObjectiveGodhasReturned_Trigger, false, false);
}

bool auto_gf_UpdateObjectiveGodhasReturned_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    if (((gv_gameData.lv_heavenHasWon == true) || (gv_gameData.lv_hellHasWon == true))) {
        return true;
    }

    ObjectiveSetState(gv_gameData.lv_objectivesHeavenPrimary[0], c_objectiveStateCompleted);
    ObjectiveSetState(gv_gameData.lv_objectivesHellPrimary[0], c_objectiveStateFailed);
    Wait(5.0, c_timeGame);
    if (((gv_gameData.lv_heavenHasWon == true) || (gv_gameData.lv_hellHasWon == true))) {
        return true;
    }

    ObjectiveSetState(gv_gameData.lv_objectivesHeavenPrimary[0], c_objectiveStateActive);
    ObjectiveSetState(gv_gameData.lv_objectivesHellPrimary[0], c_objectiveStateActive);
    TextExpressionSetToken("Param/Expression/7D774845", "A", StringExternal("Param/Value/227EB50C"));
    ObjectiveSetName(gv_gameData.lv_objectivesHeavenPrimary[0], TextExpressionAssemble("Param/Expression/7D774845"));
    TextExpressionSetToken("Param/Expression/D71D5162", "A", StringExternal("Param/Value/CA36265C"));
    ObjectiveSetName(gv_gameData.lv_objectivesHellPrimary[0], TextExpressionAssemble("Param/Expression/D71D5162"));
    if ((UnitGroupCount(UnitGroupFromId(1), c_unitCountAlive) == 0)) {
        return true;
    }

    ObjectiveCreateForPlayers(StringToText(""), StringToText(""), c_objectiveStateActive, false, gv_gameData.lv_playerGroupHeaven);
    gv_gameData.lv_objectivesHeavenSecondary[0] = ObjectiveLastCreated();
    gf_UpdateObjectiveHellgateCount();
    if ((UnitIsAlive(UnitFromId(784)) == true)) {
        gv_gameData.lv_pingsHeavenPoV[gv_syn.lv_pingsDevilHellgate] = gf_CreateObjectivePing(UnitFromId(784), gv_gameData.lv_playerGroupHeaven, StringExternal("Param/Value/49083368"));
    }

    if ((UnitIsAlive(UnitFromId(709)) == true)) {
        gv_gameData.lv_pingsHeavenPoV[gv_syn.lv_pingsAsmodeusHellgate] = gf_CreateObjectivePing(UnitFromId(709), gv_gameData.lv_playerGroupHeaven, StringExternal("Param/Value/DCEE0B80"));
    }

    if ((UnitIsAlive(UnitFromId(785)) == true)) {
        gv_gameData.lv_pingsHeavenPoV[gv_syn.lv_pingsAstarothHellgate] = gf_CreateObjectivePing(UnitFromId(785), gv_gameData.lv_playerGroupHeaven, StringExternal("Param/Value/D9F142B7"));
    }

    return true;
}

trigger auto_gf_UpdateObjectiveHellgateCount_Trigger = null;

void gf_UpdateObjectiveHellgateCount () {
    if (auto_gf_UpdateObjectiveHellgateCount_Trigger == null) {
        auto_gf_UpdateObjectiveHellgateCount_Trigger = TriggerCreate("auto_gf_UpdateObjectiveHellgateCount_TriggerFunc");
    }

    TriggerExecute(auto_gf_UpdateObjectiveHellgateCount_Trigger, false, false);
}

bool auto_gf_UpdateObjectiveHellgateCount_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    TextExpressionSetToken("Param/Expression/353473DC", "A", StringExternal("Param/Value/B607428F"));
    TextExpressionSetToken("Param/Expression/353473DC", "B", IntToText(UnitGroupCount(UnitGroupFromId(1), c_unitCountAlive)));
    ObjectiveSetName(gv_gameData.lv_objectivesHeavenSecondary[0], TextExpressionAssemble("Param/Expression/353473DC"));
    if ((UnitGroupCount(UnitGroupFromId(1), c_unitCountAlive) == 0) && (gv_gameData.lv_hellHasWon == false)) {
        ObjectiveSetState(gv_gameData.lv_objectivesHeavenSecondary[0], c_objectiveStateCompleted);
    }

    return true;
}

trigger auto_gf_TUTORIALInitilizePRIMETutorial_Trigger = null;
int auto_gf_TUTORIALInitilizePRIMETutorial_lp_rOLE;

void gf_TUTORIALInitilizePRIMETutorial (int lp_rOLE) {
    auto_gf_TUTORIALInitilizePRIMETutorial_lp_rOLE = lp_rOLE;

    if (auto_gf_TUTORIALInitilizePRIMETutorial_Trigger == null) {
        auto_gf_TUTORIALInitilizePRIMETutorial_Trigger = TriggerCreate("auto_gf_TUTORIALInitilizePRIMETutorial_TriggerFunc");
    }

    TriggerExecute(auto_gf_TUTORIALInitilizePRIMETutorial_Trigger, false, false);
}

bool auto_gf_TUTORIALInitilizePRIMETutorial_TriggerFunc (bool testConds, bool runActions) {
    int lp_rOLE = auto_gf_TUTORIALInitilizePRIMETutorial_lp_rOLE;

    // Variable Declarations
    int lv_player;
    playergroup lv_group;
    int lv_item;
    int lv_iD;
    unit lv_hELLGATE;
    unit lv_pORTAL;

    // Automatic Variable Declarations
    int autoE9EEC2BC_val;

    // Variable Initialization
    lv_player = gv_gameData.lv_rolesOwners[lp_rOLE];
    lv_group = PlayerGroupSingle(lv_player);
    lv_item = c_invalidDialogControlId;

    // Implementation
    if (((gv_banks.lv_wins[lv_player][gv_syn.lv_roleDevil] + gv_banks.lv_wins[lv_player][gv_syn.lv_roleAsmodeus] + gv_banks.lv_wins[lv_player][gv_syn.lv_roleAstaroth]) >= 1)) {
        return true;
    }

    autoE9EEC2BC_val = lp_rOLE;
    if (autoE9EEC2BC_val == gv_syn.lv_roleDevil) {
        lv_iD = 0;
        lv_hELLGATE = UnitFromId(784);
        lv_pORTAL = gv_gameData.lv_nydusSatan;
    }
    else if (autoE9EEC2BC_val == gv_syn.lv_roleAsmodeus) {
        lv_iD = 1;
        lv_hELLGATE = UnitFromId(709);
        lv_pORTAL = gv_gameData.lv_nydusAsmo;
    }
    else if (autoE9EEC2BC_val == gv_syn.lv_roleAstaroth) {
        lv_iD = 2;
        lv_hELLGATE = UnitFromId(785);
        lv_pORTAL = gv_gameData.lv_nydusAsta;
    }
    else {
    }
    gf_TUTORIALPauseUnitControl(true, gv_gameData.lv_rolesUnits[lp_rOLE]);
    Wait(2.0, c_timeGame);
    DialogCreate(1200, 400, c_anchorCenter, 0, 0, true);
    DialogSetVisible(DialogLastCreated(), lv_group, true);
    DialogSetPositionRelativeToUnit(DialogLastCreated(), lv_pORTAL, "Ref_Origin", 75, -400);
    DialogSetImageVisible(DialogLastCreated(), false);
    gv_tutorialData[lv_iD].lv_phase0Dialog = DialogLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 1200, 50, c_anchorTopLeft, 50, 50, StringExternal("Param/Value/3B7F794E"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModLeftSize36Bold", PlayerGroupAll());
    lv_item = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 1200, 25, c_anchorTopLeft, 50, 50, StringExternal("Param/Value/8FD6D164"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModLeftSize16", PlayerGroupAll());
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, lv_item, c_anchorBottomLeft, 0, 0);
    lv_item = DialogControlLastCreated();
    TextExpressionSetToken("Param/Expression/B9DDD829", "A", StringToText(""));
    TextExpressionSetToken("Param/Expression/B9DDD829", "B", StringExternal("Param/Value/3C8F68EE"));
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 1200, 50, c_anchorTopLeft, 50, 50, TextExpressionAssemble("Param/Expression/B9DDD829"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModLeftSize32", PlayerGroupAll());
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(149*100/255,150*100/255,151*100/255), PlayerGroupAll());
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, lv_item, c_anchorBottomLeft, 0, 0);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    lv_item = DialogControlLastCreated();
    gv_tutorialData[lv_iD].lv_phase0ObjectivesLabels[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 50, 50, c_anchorTopLeft, 0, 0, StringToText(""), "Assets\\Textures\\ui_battlenet_challenge_button_checkmark.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorRight, lv_item, c_anchorLeft, 10, -5);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    gv_tutorialData[lv_iD].lv_phase0ObjectivesCheckmarks[1] = DialogControlLastCreated();
    TextExpressionSetToken("Param/Expression/A641FB36", "A", StringToText(""));
    TextExpressionSetToken("Param/Expression/A641FB36", "B", StringExternal("Param/Value/842CCA81"));
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 1200, 50, c_anchorTopLeft, 50, 50, TextExpressionAssemble("Param/Expression/A641FB36"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModLeftSize32", PlayerGroupAll());
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(149*100/255,150*100/255,151*100/255), PlayerGroupAll());
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, lv_item, c_anchorBottomLeft, 0, 0);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    lv_item = DialogControlLastCreated();
    gv_tutorialData[lv_iD].lv_phase0ObjectivesLabels[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 50, 50, c_anchorTopLeft, 0, 0, StringToText(""), "Assets\\Textures\\ui_battlenet_challenge_button_checkmark.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorRight, lv_item, c_anchorLeft, 10, -5);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    gv_tutorialData[lv_iD].lv_phase0ObjectivesCheckmarks[2] = DialogControlLastCreated();
    TextExpressionSetToken("Param/Expression/B451D6FA", "A", StringToText(""));
    TextExpressionSetToken("Param/Expression/B451D6FA", "B", StringExternal("Param/Value/62DDA7CC"));
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 1200, 50, c_anchorTopLeft, 50, 50, TextExpressionAssemble("Param/Expression/B451D6FA"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModLeftSize32", PlayerGroupAll());
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, lv_item, c_anchorBottomLeft, 0, 0);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    lv_item = DialogControlLastCreated();
    gv_tutorialData[lv_iD].lv_phase0ObjectivesLabels[3] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 50, 50, c_anchorTopLeft, 0, 0, StringToText(""), "Assets\\Textures\\ui_battlenet_challenge_button_checkmark.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorRight, lv_item, c_anchorLeft, 10, -5);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    gv_tutorialData[lv_iD].lv_phase0ObjectivesCheckmarks[3] = DialogControlLastCreated();
    TextTagCreate(StringExternal("Param/Value/0FFEA4B7"), 24, UnitGetPosition(lv_pORTAL), 1.0, true, false, lv_group);
    gv_tutorialData[lv_iD].lv_portalTextTag = TextTagLastCreated();
    TextTagCreate(StringExternal("Param/Value/C6FAF896"), 48, UnitGetPosition(UnitFromId(200)), 2.0, true, false, lv_group);
    gv_tutorialData[lv_iD].lv_heavensGateTextTag = TextTagLastCreated();
    gf_TUTORIALPhase0Controller(lv_iD, lp_rOLE);
    return true;
}

void gf_TUTORIALPhase0Controller (int lp_iD, int lp_rOLE) {
    // Variable Declarations
    int lv_player;
    int lv_iD;
    int lv_currentStep;
    fixed lv_tIMEOUT;
    point lv_usersRallyPoint;
    unit lv_pORTAL;
    point lv_rALLYREGIONPOINT;

    // Automatic Variable Declarations
    int auto4E8F484C_val;

    // Variable Initialization
    lv_player = gv_gameData.lv_rolesOwners[lp_rOLE];
    lv_iD = lp_iD;
    lv_tIMEOUT = 300.0;

    // Implementation
    lv_pORTAL = UnitGroupRandomUnit(UnitGroup("NydusCanal", lv_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    auto4E8F484C_val = lp_rOLE;
    if (auto4E8F484C_val == gv_syn.lv_roleDevil) {
        lv_rALLYREGIONPOINT = PointFromId(791);
    }
    else if (auto4E8F484C_val == gv_syn.lv_roleAsmodeus) {
        lv_rALLYREGIONPOINT = PointFromId(789);
    }
    else if (auto4E8F484C_val == gv_syn.lv_roleAstaroth) {
        lv_rALLYREGIONPOINT = PointFromId(790);
    }
    else {
    }
    lv_currentStep = 3;
    while ((lv_tIMEOUT > 0.0)) {
        if ((UnitRallyPointTargetPoint(lv_pORTAL, 1, 1) != null)) {
            lv_usersRallyPoint = UnitRallyPointTargetPoint(lv_pORTAL, 1, 1);
        }
        else {
            lv_usersRallyPoint = UnitGetPosition(lv_pORTAL);
        }
        if ((RegionContainsPoint(RegionCircle(lv_rALLYREGIONPOINT, 20.0), lv_usersRallyPoint) == true)) {
            if ((lv_currentStep == 2)) {
                lv_currentStep = 3;
            }

        }
        else {
            lv_currentStep = 2;
        }
        if ((UnitIsSelected(lv_pORTAL, lv_player) == true)) {
            if ((lv_currentStep == 1)) {
                lv_currentStep = 2;
            }

        }
        else {
            lv_currentStep = 1;
        }
        if ((gv_tutorialData[lv_iD].lv_unleashedMinions == true)) {
            lv_currentStep = 4;
            lv_tIMEOUT = 0.0;
        }

        if ((lv_currentStep != gv_tutorialData[lv_iD].lv_currentStep)) {
            gf_TUTORIALSetPhaseStep(lv_iD, lp_rOLE, lv_currentStep);
        }

        lv_tIMEOUT -= 0.125;
        Wait(0.125, c_timeGame);
    }
    gf_TUTORIALPauseUnitControl(false, gv_gameData.lv_rolesUnits[lp_rOLE]);
    TextTagDestroy(gv_tutorialData[lv_iD].lv_portalTextTag);
    TextTagDestroy(gv_tutorialData[lv_iD].lv_heavensGateTextTag);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "Phase0WormUnloadLock", 0);
    lv_tIMEOUT = 0.0;
    while ((lv_tIMEOUT < 100.0)) {
        DialogSetTransparency(gv_tutorialData[lv_iD].lv_phase0Dialog, lv_tIMEOUT);
        lv_tIMEOUT += 5.0;
        Wait(0.125, c_timeGame);
    }
    DialogDestroy(gv_tutorialData[lv_iD].lv_phase0Dialog);
}

void gf_TUTORIALSetPhaseStep (int lp_iD, int lp_rOLE, int lp_nEXTSTEP) {
    // Variable Declarations
    int lv_player;
    playergroup lv_playerGroup;
    int lv_iD;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = gv_gameData.lv_rolesOwners[lp_rOLE];
    lv_playerGroup = PlayerGroupSingle(lv_player);
    lv_iD = lp_iD;

    // Implementation
    gv_tutorialData[lv_iD].lv_currentStep = lp_nEXTSTEP;
    if ((lp_nEXTSTEP == 1)) {
        TextTagSetText(gv_tutorialData[lv_iD].lv_portalTextTag, StringExternal("Param/Value/AD3CCE5D"));
        libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "Phase0WormUnloadLock", 1);
        libNtve_gf_SetDialogItemColor(gv_tutorialData[lv_iD].lv_phase0ObjectivesLabels[lp_nEXTSTEP], Color(100,100,100), lv_playerGroup);
        DialogControlSetVisible(gv_tutorialData[lv_iD].lv_phase0ObjectivesCheckmarks[lp_nEXTSTEP], lv_playerGroup, false);
        DialogControlSetVisible(gv_tutorialData[lv_iD].lv_phase0ObjectivesLabels[2], lv_playerGroup, false);
        DialogControlSetVisible(gv_tutorialData[lv_iD].lv_phase0ObjectivesCheckmarks[2], lv_playerGroup, false);
        DialogControlSetVisible(gv_tutorialData[lv_iD].lv_phase0ObjectivesLabels[3], lv_playerGroup, false);
        DialogControlSetVisible(gv_tutorialData[lv_iD].lv_phase0ObjectivesCheckmarks[3], lv_playerGroup, false);
    }

    if ((lp_nEXTSTEP == 2)) {
        gf_TUTORIALP0S2DisplayRallyDirectionPing(lp_rOLE);
        TextTagSetText(gv_tutorialData[lv_iD].lv_portalTextTag, StringExternal("Param/Value/A4030544"));
        libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "Phase0WormUnloadLock", 1);
        DialogControlSetVisible(gv_tutorialData[lv_iD].lv_phase0ObjectivesLabels[1], lv_playerGroup, true);
        DialogControlSetVisible(gv_tutorialData[lv_iD].lv_phase0ObjectivesCheckmarks[1], lv_playerGroup, true);
        libNtve_gf_SetDialogItemColor(gv_tutorialData[lv_iD].lv_phase0ObjectivesLabels[lp_nEXTSTEP], Color(149*100/255,150*100/255,151*100/255), lv_playerGroup);
        libNtve_gf_SetDialogItemColor(gv_tutorialData[lv_iD].lv_phase0ObjectivesLabels[lp_nEXTSTEP], Color(100,100,100), lv_playerGroup);
        DialogControlSetVisible(gv_tutorialData[lv_iD].lv_phase0ObjectivesLabels[lp_nEXTSTEP], lv_playerGroup, true);
        DialogControlSetVisible(gv_tutorialData[lv_iD].lv_phase0ObjectivesCheckmarks[lp_nEXTSTEP], lv_playerGroup, false);
        DialogControlSetVisible(gv_tutorialData[lv_iD].lv_phase0ObjectivesLabels[3], lv_playerGroup, false);
        DialogControlSetVisible(gv_tutorialData[lv_iD].lv_phase0ObjectivesCheckmarks[3], lv_playerGroup, false);
    }

    if ((lp_nEXTSTEP == 3)) {
        TextTagSetText(gv_tutorialData[lv_iD].lv_portalTextTag, StringExternal("Param/Value/B446B827"));
        libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "Phase0WormUnloadLock", 0);
        UISetButtonFaceHighlighted(lv_playerGroup, "NydusCanalUnloadAll", true);
        libNtve_gf_SetDialogItemColor(gv_tutorialData[lv_iD].lv_phase0ObjectivesLabels[1], Color(149*100/255,150*100/255,151*100/255), lv_playerGroup);
        DialogControlSetVisible(gv_tutorialData[lv_iD].lv_phase0ObjectivesLabels[1], lv_playerGroup, true);
        DialogControlSetVisible(gv_tutorialData[lv_iD].lv_phase0ObjectivesCheckmarks[1], lv_playerGroup, true);
        libNtve_gf_SetDialogItemColor(gv_tutorialData[lv_iD].lv_phase0ObjectivesLabels[2], Color(149*100/255,150*100/255,151*100/255), lv_playerGroup);
        DialogControlSetVisible(gv_tutorialData[lv_iD].lv_phase0ObjectivesLabels[2], lv_playerGroup, true);
        DialogControlSetVisible(gv_tutorialData[lv_iD].lv_phase0ObjectivesCheckmarks[2], lv_playerGroup, true);
        libNtve_gf_SetDialogItemColor(gv_tutorialData[lv_iD].lv_phase0ObjectivesLabels[lp_nEXTSTEP], Color(100,100,100), lv_playerGroup);
        DialogControlSetVisible(gv_tutorialData[lv_iD].lv_phase0ObjectivesLabels[lp_nEXTSTEP], lv_playerGroup, true);
        DialogControlSetVisible(gv_tutorialData[lv_iD].lv_phase0ObjectivesCheckmarks[lp_nEXTSTEP], lv_playerGroup, false);
    }

    if ((lp_nEXTSTEP == 4)) {
        UISetButtonFaceHighlighted(lv_playerGroup, "NydusCanalUnloadAll", false);
        DialogControlSetVisible(gv_tutorialData[lv_iD].lv_phase0ObjectivesCheckmarks[3], lv_playerGroup, true);
    }

}

trigger auto_gf_TUTORIALP0S2DisplayRallyDirectionPing_Trigger = null;
int auto_gf_TUTORIALP0S2DisplayRallyDirectionPing_lp_rOLE;

void gf_TUTORIALP0S2DisplayRallyDirectionPing (int lp_rOLE) {
    auto_gf_TUTORIALP0S2DisplayRallyDirectionPing_lp_rOLE = lp_rOLE;

    if (auto_gf_TUTORIALP0S2DisplayRallyDirectionPing_Trigger == null) {
        auto_gf_TUTORIALP0S2DisplayRallyDirectionPing_Trigger = TriggerCreate("auto_gf_TUTORIALP0S2DisplayRallyDirectionPing_TriggerFunc");
    }

    TriggerExecute(auto_gf_TUTORIALP0S2DisplayRallyDirectionPing_Trigger, false, false);
}

bool auto_gf_TUTORIALP0S2DisplayRallyDirectionPing_TriggerFunc (bool testConds, bool runActions) {
    int lp_rOLE = auto_gf_TUTORIALP0S2DisplayRallyDirectionPing_lp_rOLE;

    // Variable Declarations
    point lv_pingPoint;
    point lv_oRIGINPOINT;
    point lv_fINISHPOINT;
    int lv_pL;
    playergroup lv_player;
    int lv_iD;
    fixed lv_cooldown;

    // Automatic Variable Declarations
    int auto58136EE1_val;

    // Variable Initialization
    lv_pL = gv_gameData.lv_rolesOwners[lp_rOLE];
    lv_player = PlayerGroupSingle(lv_pL);

    // Implementation
    auto58136EE1_val = lp_rOLE;
    if (auto58136EE1_val == gv_syn.lv_roleDevil) {
        lv_iD = 0;
        lv_oRIGINPOINT = UnitGetPosition(gv_gameData.lv_nydusSatan);
        lv_fINISHPOINT = PointFromId(791);
    }
    else if (auto58136EE1_val == gv_syn.lv_roleAsmodeus) {
        lv_iD = 1;
        lv_oRIGINPOINT = UnitGetPosition(gv_gameData.lv_nydusAsmo);
        lv_fINISHPOINT = PointFromId(789);
    }
    else if (auto58136EE1_val == gv_syn.lv_roleAstaroth) {
        lv_iD = 2;
        lv_oRIGINPOINT = UnitGetPosition(gv_gameData.lv_nydusAsta);
        lv_fINISHPOINT = PointFromId(790);
    }
    else {
    }
    if ((gv_tutorialData[lv_iD].lv_phase0Step2Pinginginprogress == true)) {
        return true;
    }

    gv_tutorialData[lv_iD].lv_phase0Step2Pinginginprogress = true;
    while ((gv_tutorialData[lv_iD].lv_currentStep == 2)) {
        if ((lv_cooldown <= 0.0)) {
            lv_cooldown = 4.5;
            lv_pingPoint = lv_oRIGINPOINT;
            while ((DistanceBetweenPoints(lv_pingPoint, lv_fINISHPOINT) >= 10.0)) {
                lv_pingPoint = libNtve_gf_PointOffsetTowardsPoint(lv_pingPoint, 8.0, lv_fINISHPOINT);
                libNtve_gf_CreatePingFacingAngle(lv_player, "PingArrow", lv_pingPoint, ColorWithAlpha(100.00, 100.00, 100.00, 0.00), 4.0, AngleBetweenPoints(lv_oRIGINPOINT, lv_fINISHPOINT));
                Wait(0.0625, c_timeGame);
            }
        }

        Wait(0.25, c_timeGame);
        lv_cooldown -= 0.25;
    }
    gv_tutorialData[lv_iD].lv_phase0Step2Pinginginprogress = false;
    return true;
}

void gf_TutorialInitialObjective () {
    // Automatic Variable Declarations
    // Implementation
    ObjectiveCreateForPlayers(StringExternal("Param/Value/0C0FC732"), StringToText(""), c_objectiveStateActive, false, gv_gameData.lv_playerGroupHellTUTORIAL);
    gv_gameData.lv_objectivesHellSecondary[0] = ObjectiveLastCreated();
    TextTagCreate(StringExternal("Param/Value/DCE03E21"), 48, UnitGetPosition(UnitFromId(200)), 2.0, true, false, gv_gameData.lv_playerGroupHellTUTORIAL);
}

void gf_TutorialGateisDown () {
    // Variable Declarations
    playergroup lv_pLAYERS;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_pLAYERS = gv_gameData.lv_playerGroupHellTUTORIAL;

    // Implementation
    ObjectiveSetState(gv_gameData.lv_objectivesHellSecondary[0], c_objectiveStateCompleted);
    Wait(5.0, c_timeGame);
    ObjectiveDestroy(gv_gameData.lv_objectivesHellSecondary[0]);
}

void gf_TUTORIALPauseUnitControl (bool lp_fREEZE, unitgroup lp_group) {
    // Automatic Variable Declarations
    unitgroup autoEEDBCAB4_g;
    int autoEEDBCAB4_u;
    unit autoEEDBCAB4_var;
    unitgroup auto0B7D4435_g;
    int auto0B7D4435_u;
    unit auto0B7D4435_var;

    // Implementation
    if ((lp_fREEZE == true)) {
        auto0B7D4435_g = lp_group;
        auto0B7D4435_u = UnitGroupCount(auto0B7D4435_g, c_unitCountAll);
        for (;; auto0B7D4435_u -= 1) {
            auto0B7D4435_var = UnitGroupUnitFromEnd(auto0B7D4435_g, auto0B7D4435_u);
            if (auto0B7D4435_var == null) { break; }
            UnitSetState(auto0B7D4435_var, c_unitStateInvulnerable, true);
            UnitSetState(auto0B7D4435_var, c_unitStateMoveSuppressed, false);
            if ((UnitGetType(auto0B7D4435_var) != "NydusCanal")) {
                libNtve_gf_MakeUnitUncommandable(auto0B7D4435_var, true);
            }

        }
    }
    else {
        autoEEDBCAB4_g = lp_group;
        autoEEDBCAB4_u = UnitGroupCount(autoEEDBCAB4_g, c_unitCountAll);
        for (;; autoEEDBCAB4_u -= 1) {
            autoEEDBCAB4_var = UnitGroupUnitFromEnd(autoEEDBCAB4_g, autoEEDBCAB4_u);
            if (autoEEDBCAB4_var == null) { break; }
            libNtve_gf_MakeUnitUncommandable(autoEEDBCAB4_var, false);
            UnitSetState(autoEEDBCAB4_var, c_unitStateMoveSuppressed, true);
            libNtve_gf_RescueUnit(autoEEDBCAB4_var, UnitGetOwner(autoEEDBCAB4_var), true);
            if ((UnitGetType(autoEEDBCAB4_var) != "NydusNetwork")) {
                UnitSetState(autoEEDBCAB4_var, c_unitStateInvulnerable, false);
            }

        }
    }
}

fixed gf_GetAPCUnitRange (unit lp_u) {
    // Variable Declarations
    fixed lv_bestGRange;
    fixed lv_bestARange;
    fixed lv_bestSRange;
    fixed lv_temprange;

    // Automatic Variable Declarations
    int auto2E00EE95_ae;
    int auto2E00EE95_var;

    // Variable Initialization
    lv_bestGRange = -1.0;
    lv_bestARange = -1.0;
    lv_bestSRange = -1.0;

    // Implementation
    auto2E00EE95_ae = UnitWeaponCount(lp_u);
    auto2E00EE95_var = 1;
    for ( ; auto2E00EE95_var <= auto2E00EE95_ae; auto2E00EE95_var += 1 ) {
        if ((UnitWeaponIsEnabled(lp_u, auto2E00EE95_var) == true)) {
            lv_temprange = StringToFixed(CatalogFieldValueGet(c_gameCatalogWeapon, (UnitWeaponGet(lp_u, auto2E00EE95_var)), "Range", c_playerAny));
            if ((UnitWeaponCheck(lp_u, auto2E00EE95_var, c_targetFilterAir) == true) && (lv_temprange > lv_bestARange)) {
                lv_bestARange = lv_temprange;
            }

            if ((UnitWeaponCheck(lp_u, auto2E00EE95_var, c_targetFilterGround) == true) && (lv_temprange > lv_bestGRange)) {
                lv_bestGRange = lv_temprange;
            }

            if ((UnitWeaponCheck(lp_u, auto2E00EE95_var, c_targetFilterStructure) == true) && (lv_temprange > lv_bestSRange)) {
                lv_bestSRange = lv_temprange;
            }

        }

    }
    if ((lv_bestARange < 0.0) && (lv_bestGRange < 0.0) && (lv_bestSRange < 0.0)) {
        return -1.0;
    }

    if ((lv_bestSRange < 0.0)) {
        lv_bestSRange = 1000.0;
    }

    if ((lv_bestGRange < 0.0)) {
        lv_bestGRange = 1000.0;
    }

    if ((lv_bestARange < 0.0)) {
        lv_bestARange = 1000.0;
    }

    return MinF(MinF(lv_bestSRange, lv_bestGRange), lv_bestARange);
}

bool gf_IsPlayerGood (int lp_playa) {
    // Automatic Variable Declarations
    // Implementation
    if (((lp_playa == gv_gameData.lv_rolesOwners[gv_syn.lv_roleDevil]) || (lp_playa == gv_gameData.lv_rolesOwners[gv_syn.lv_roleAsmodeus]) || (lp_playa == gv_gameData.lv_rolesOwners[gv_syn.lv_roleAstaroth]) || (lp_playa == gv_gameData.lv_rolesOwners[gv_syn.lv_roleMoloch]))) {
        return false;
    }
    else {
        return true;
    }
}

void gf_TakeUntakeGiveAftermathStatTracking (int lp_currentOwner, int lp_nextOwner, unit lp_uNIT) {
    // Automatic Variable Declarations
    // Implementation
    if ((UnitTypeTestAttribute(UnitGetType(lp_uNIT), c_unitAttributeRobotic) == true)) {
        gv_playerData[lp_currentOwner].lv_aftermathElitesTotal -= 1;
        gv_playerData[lp_nextOwner].lv_aftermathElitesTotal += 1;
    }

    if ((UnitTypeTestAttribute(UnitGetType(lp_uNIT), c_unitAttributeHeroic) == true)) {
        gv_playerData[lp_currentOwner].lv_aftermathHeroesTotal -= 1;
        gv_playerData[lp_nextOwner].lv_aftermathHeroesTotal += 1;
    }

}

int gf_ColorID_To_Color (int lp_iD) {
    // Variable Declarations
    int lv_color;

    // Automatic Variable Declarations
    int auto354FD46F_val;

    // Variable Initialization
    lv_color = 13;

    // Implementation
    auto354FD46F_val = lp_iD;
    if (auto354FD46F_val == 0) {
        lv_color = 0;
    }
    else if (auto354FD46F_val == 1) {
        lv_color = 3;
    }
    else if (auto354FD46F_val == 2) {
        lv_color = 7;
    }
    else if (auto354FD46F_val == 3) {
        lv_color = 12;
    }
    else if (auto354FD46F_val == 4) {
        lv_color = 4;
    }
    else if (auto354FD46F_val == 5) {
        lv_color = 14;
    }
    else if (auto354FD46F_val == 6) {
        lv_color = 1;
    }
    else if (auto354FD46F_val == 7) {
        lv_color = 6;
    }
    else if (auto354FD46F_val == 8) {
        lv_color = 5;
    }
    else if (auto354FD46F_val == 9) {
        lv_color = 15;
    }
    else {
    }
    return lv_color;
}

void gf_CreateTieDialog () {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_gameData.lv_votekickVotekickInProgress == true)) {
        DialogCreate(550, 200, c_anchorTopRight, 0, 220, true);
    }
    else {
        DialogCreate(550, 200, c_anchorTopRight, 0, 0, true);
    }
    DialogSetTitle(DialogLastCreated(), StringExternal("Param/Value/FE2C0BC0"));
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    gv_gameData.lv_tieDialog = DialogLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 80, 50, c_anchorBottomLeft, 50, 50, StringToText(""), StringExternal("Param/Value/19109760"), "");
    gv_gameData.lv_tieYes = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 80, 50, c_anchorBottom, 0, 50, StringToText(""), StringExternal("Param/Value/0DD22A4D"), "");
    gv_gameData.lv_tieNo = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 100, 50, c_anchorBottomRight, 50, 50, StringToText(""), StringExternal("Param/Value/EC522F0F"), "");
    gv_gameData.lv_tieAbstain = DialogControlLastCreated();
}

bool gf_TieVoteProcessandOutcome () {
    // Variable Declarations
    int lv_totalPlayerAmount;
    fixed lv_timeRemaining;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_totalPlayerAmount = PlayerGroupCount(PlayerGroupActive());
    lv_timeRemaining = 20.0;

    // Implementation
    while ((lv_timeRemaining > 0.0) && ((lv_totalPlayerAmount - (gv_gameData.lv_tieYesCount + gv_gameData.lv_tieNoCount + gv_gameData.lv_tieAbstainCount)) > 0)) {
        Wait(0.25, c_timeGame);
        lv_timeRemaining -= 0.25;
    }
    if (((gv_gameData.lv_tieHeavenRejectCount > ((PlayerGroupCount(gv_gameData.lv_playerGroupHeaven) / 2) - 0)) || (gv_gameData.lv_tieHellRejectCount > ((PlayerGroupCount(gv_gameData.lv_playerGroupHell) / 2) - 0)))) {
        return false;
        return false;
    }

    if (((gv_gameData.lv_tieYesCount > ((lv_totalPlayerAmount / 2) + 0)))) {
        return true;
    }

    return false;
}

text gf_HandleLeaversGetforcestext (int lp_pLAYER) {
    // Variable Declarations
    int lv_heroesAmount;
    int lv_elitesAmount;
    int lv_angelsAmount;
    text lv_tEXT;
    text lv_hEROTEXT;
    text lv_eLITETEXT;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_heroesAmount = UnitGroupCount(UnitGroup(null, lp_pLAYER, RegionEntireMap(), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterHallucination - 32))), 0), c_unitCountAlive);
    TextExpressionSetToken("Param/Expression/3CF17502", "A", IntToText(lv_heroesAmount));
    lv_hEROTEXT = TextExpressionAssemble("Param/Expression/3CF17502");
    if ((lv_heroesAmount == 1)) {
        TextExpressionSetToken("Param/Expression/86BBF61F", "A", lv_hEROTEXT);
        TextExpressionSetToken("Param/Expression/86BBF61F", "B", StringExternal("Param/Value/1300506B"));
        lv_hEROTEXT = TextExpressionAssemble("Param/Expression/86BBF61F");
    }
    else {
        TextExpressionSetToken("Param/Expression/9FD7B74F", "A", lv_hEROTEXT);
        TextExpressionSetToken("Param/Expression/9FD7B74F", "B", StringExternal("Param/Value/C7A6B2FB"));
        lv_hEROTEXT = TextExpressionAssemble("Param/Expression/9FD7B74F");
    }
    lv_elitesAmount = UnitGroupCount(UnitGroup(null, lp_pLAYER, RegionEntireMap(), UnitFilter((1 << c_targetFilterRobotic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterHallucination - 32))), 0), c_unitCountAlive);
    TextExpressionSetToken("Param/Expression/E6106B49", "A", IntToText(lv_elitesAmount));
    lv_eLITETEXT = TextExpressionAssemble("Param/Expression/E6106B49");
    if ((lv_elitesAmount == 1)) {
        TextExpressionSetToken("Param/Expression/3B7F32B3", "A", lv_eLITETEXT);
        TextExpressionSetToken("Param/Expression/3B7F32B3", "B", StringExternal("Param/Value/CD803FD9"));
        lv_eLITETEXT = TextExpressionAssemble("Param/Expression/3B7F32B3");
    }
    else {
        TextExpressionSetToken("Param/Expression/EDD186AC", "A", lv_eLITETEXT);
        TextExpressionSetToken("Param/Expression/EDD186AC", "B", StringExternal("Param/Value/C96E959D"));
        lv_eLITETEXT = TextExpressionAssemble("Param/Expression/EDD186AC");
    }
    lv_angelsAmount = UnitGroupCount(UnitGroup("Ghost", lp_pLAYER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterHallucination - 32))), 0), c_unitCountAlive);
    TextExpressionSetToken("Param/Expression/8FFE636B", "A", lv_hEROTEXT);
    TextExpressionSetToken("Param/Expression/8FFE636B", "B", lv_eLITETEXT);
    lv_tEXT = TextExpressionAssemble("Param/Expression/8FFE636B");
    return lv_tEXT;
}

bool gf_isRoleGood2 (int lp_role) {
    // Automatic Variable Declarations
    // Implementation
    return (lp_role <= 6);
}

string gf_numberwithspaces (int lp_num) {
    // Variable Declarations
    const int lv_width = 4;
    string lv_numstr;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_numstr = "";

    // Implementation
    lv_numstr = IntToString(lp_num);
    while ((StringLength(lv_numstr) < lv_width)) {
        lv_numstr = (" " + lv_numstr);
    }
    return lv_numstr;
}

void gf_RefreshCCG (int lp_player) {
    // Variable Declarations
    int lv_role;
    int lv_group;

    // Automatic Variable Declarations
    const int autoF37A3551_ae = 9;
    const int autoF37A3551_ai = 1;
    const int auto93D13252_ae = 9;
    const int auto93D13252_ai = 1;

    // Variable Initialization

    // Implementation
    lv_role = 0;
    for ( ; ( (autoF37A3551_ai >= 0 && lv_role <= autoF37A3551_ae) || (autoF37A3551_ai < 0 && lv_role >= autoF37A3551_ae) ) ; lv_role += autoF37A3551_ai ) {
        lv_group = 0;
        for ( ; ( (auto93D13252_ai >= 0 && lv_group <= auto93D13252_ae) || (auto93D13252_ai < 0 && lv_group >= auto93D13252_ae) ) ; lv_group += auto93D13252_ai ) {
            gv_banks.lv_controlGroups[lp_player][lv_role][lv_group] = gv_cCGData.lv_savedGroups[lp_player][lv_role][lv_group];
        }
    }
}

text gf_GetRoleNameColored (int lp_role) {
    // Automatic Variable Declarations
    int auto843CDB0F_val;

    // Implementation
    auto843CDB0F_val = lp_role;
    if (auto843CDB0F_val == gv_syn.lv_roleMessiah) {
        return StringExternal("Param/Value/896E8129");
    }
    else if (auto843CDB0F_val == gv_syn.lv_roleMichael) {
        return StringExternal("Param/Value/9208D5DF");
    }
    else if (auto843CDB0F_val == gv_syn.lv_roleUriel) {
        return StringExternal("Param/Value/4BCF8932");
    }
    else if (auto843CDB0F_val == gv_syn.lv_roleJehoel) {
        return StringExternal("Param/Value/29708A07");
    }
    else if (auto843CDB0F_val == gv_syn.lv_roleSeraphiel) {
        return StringExternal("Param/Value/522624DA");
    }
    else if (auto843CDB0F_val == gv_syn.lv_roleZadkiel) {
        return StringExternal("Param/Value/D7735A23");
    }
    else if (auto843CDB0F_val == gv_syn.lv_roleDevil) {
        return StringExternal("Param/Value/22572F86");
    }
    else if (auto843CDB0F_val == gv_syn.lv_roleAsmodeus) {
        return StringExternal("Param/Value/DB20E478");
    }
    else if (auto843CDB0F_val == gv_syn.lv_roleAstaroth) {
        return StringExternal("Param/Value/3FB52846");
    }
    else if (auto843CDB0F_val == gv_syn.lv_roleMoloch) {
        return StringExternal("Param/Value/E946F411");
    }
    else {
        return StringExternal("Param/Value/C0DF0CB1");
    }
}

void gf_UpdateStatsDisplay () {
    // Variable Declarations
    text[11] lv_nametext;
    int lv_slot;
    int lv_rolevar;
    int lv_winsum;
    int lv_losesum;
    int lv_gamesplayedsum;
    text lv_wtf;

    // Automatic Variable Declarations
    const int autoD92739B3_ae = 9;
    const int autoD92739B3_ai = 1;
    const int autoF7CE75A0_ae = 9;
    const int autoF7CE75A0_ai = 1;
    const int autoDA557741_ae = 9;
    const int autoDA557741_ai = 1;
    const int autoC4329B7B_ae = 9;
    const int autoC4329B7B_ai = 1;

    // Variable Initialization

    // Implementation
    lv_slot = 0;
    for ( ; ( (autoD92739B3_ai >= 0 && lv_slot <= autoD92739B3_ae) || (autoD92739B3_ai < 0 && lv_slot >= autoD92739B3_ae) ) ; lv_slot += autoD92739B3_ai ) {
        lv_wtf = PlayerName(gv_gameData.lv_rolesOwners[lv_slot]);
        if ((PlayerStatus(gv_gameData.lv_rolesOwners[lv_slot]) == c_playerStatusUnused)) {
            lv_nametext[lv_slot] = StringExternal("Param/Value/D3B7EBBE");
            lv_nametext[lv_slot] = StringExternal("Param/Value/95B8CC65");
        }
        else {
            lv_nametext[lv_slot] = TextWithColor(PlayerName(gv_gameData.lv_rolesOwners[lv_slot]), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(gv_gameData.lv_rolesOwners[lv_slot], false)));
        }
        lv_winsum = 0;
        lv_losesum = 0;
        lv_gamesplayedsum = 0;
        lv_rolevar = 0;
        for ( ; ( (autoF7CE75A0_ai >= 0 && lv_rolevar <= autoF7CE75A0_ae) || (autoF7CE75A0_ai < 0 && lv_rolevar >= autoF7CE75A0_ae) ) ; lv_rolevar += autoF7CE75A0_ai ) {
            lv_gamesplayedsum += gv_banks.lv_gamesStarted[gv_gameData.lv_rolesOwners[lv_slot]][lv_rolevar];
            lv_winsum += gv_banks.lv_wins[gv_gameData.lv_rolesOwners[lv_slot]][lv_rolevar];
            lv_losesum += gv_banks.lv_losses[gv_gameData.lv_rolesOwners[lv_slot]][lv_rolevar];
        }
        gv_banks.lv_statsListStrings[lv_slot] = (StringToText("") + StringToText(gf_numberwithspaces(lv_gamesplayedsum)) + StringExternal("Param/Value/CB07BA6E") + TextWithColor(StringToText(gf_numberwithspaces(lv_winsum)), Color(90.59, 76.08, 76.08)) + StringExternal("Param/Value/CD283B4F") + StringToText(gf_numberwithspaces(lv_losesum)));
    }
    DialogControlRemoveAllItems(gv_banks.lv_statisticsItem, PlayerGroupAll());
    lv_slot = 0;
    for ( ; ( (autoDA557741_ai >= 0 && lv_slot <= autoDA557741_ae) || (autoDA557741_ai < 0 && lv_slot >= autoDA557741_ae) ) ; lv_slot += autoDA557741_ai ) {
        DialogControlAddItem(gv_banks.lv_statisticsItem, PlayerGroupAll(), gv_banks.lv_statsListStrings[lv_slot]);
    }
    DialogControlRemoveAllItems(gv_banks.lv_statisticsItemNames, PlayerGroupAll());
    lv_slot = 0;
    for ( ; ( (autoC4329B7B_ai >= 0 && lv_slot <= autoC4329B7B_ae) || (autoC4329B7B_ai < 0 && lv_slot >= autoC4329B7B_ae) ) ; lv_slot += autoC4329B7B_ai ) {
        DialogControlAddItem(gv_banks.lv_statisticsItemNames, PlayerGroupAll(), lv_nametext[lv_slot]);
    }
}

bool gf_CheckAdminList (int lp_playerNumber) {
    // Automatic Variable Declarations
    // Implementation
    if (((PlayerHandle(lp_playerNumber) == ""))) {
        return true;
    }
    else {
        return false;
    }
}

void gf_CreateVotekickDialog (int lp_targetPlayer) {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_gameData.lv_tieTriggered == true)) {
        DialogCreate(550, 200, c_anchorTopRight, 0, 220, true);
    }
    else {
        DialogCreate(550, 200, c_anchorTopRight, 0, 0, true);
    }
    DialogSetTitle(DialogLastCreated(), (StringExternal("Param/Value/5B5DB227") + PlayerName(lp_targetPlayer) + StringExternal("Param/Value/F95F93C3")));
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    gv_gameData.lv_votekickDialog = DialogLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 80, 50, c_anchorBottomLeft, 50, 50, StringToText(""), StringExternal("Param/Value/526F78DD"), "");
    gv_gameData.lv_votekickYESButton = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 80, 50, c_anchorBottom, 0, 50, StringToText(""), StringExternal("Param/Value/C34C5E97"), "");
    gv_gameData.lv_votekickNOButton = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 100, 50, c_anchorBottomRight, 50, 50, StringToText(""), StringExternal("Param/Value/6D47005F"), "");
    gv_gameData.lv_votekickABSTAINButton = DialogControlLastCreated();
}

bool gf_VotekickingProcessOutcome () {
    // Variable Declarations
    int lv_totalPlayerAmount;
    fixed lv_timeRemaining;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_totalPlayerAmount = PlayerGroupCount(PlayerGroupActive());
    lv_timeRemaining = 20.0;

    // Implementation
    while ((lv_timeRemaining > 0.0) && (gv_gameData.lv_votekickYesVoteAmount <= (lv_totalPlayerAmount-gv_gameData.lv_votekickYesVoteAmount-gv_gameData.lv_votekickAbstainedAmount)) && (gv_gameData.lv_votekickNoVoteAmount <= (lv_totalPlayerAmount-gv_gameData.lv_votekickNoVoteAmount-gv_gameData.lv_votekickAbstainedAmount)) && ((lv_totalPlayerAmount - gv_gameData.lv_votekickAbstainedAmount) > 0)) {
        Wait(0.25, c_timeGame);
        lv_timeRemaining -= 0.25;
    }
    if ((gv_gameData.lv_votekickYesVoteAmount > (lv_totalPlayerAmount-gv_gameData.lv_votekickYesVoteAmount-gv_gameData.lv_votekickAbstainedAmount))) {
        return true;
    }

    return false;
}

void gf_KickMoveUnits (int lp_kickedPlayer) {
    // Automatic Variable Declarations
    int auto6159F112_val;
    unitgroup auto9F5563B6_g;
    int auto9F5563B6_u;
    unit auto9F5563B6_var;
    unitgroup auto714E19A7_g;
    int auto714E19A7_u;
    unit auto714E19A7_var;
    unitgroup auto9F51456A_g;
    int auto9F51456A_u;
    unit auto9F51456A_var;
    unitgroup auto4A2D2327_g;
    int auto4A2D2327_u;
    unit auto4A2D2327_var;
    unitgroup auto891FB1DF_g;
    int auto891FB1DF_u;
    unit auto891FB1DF_var;

    // Implementation
    if ((PlayerGroupHasPlayer(gv_gameData.lv_playerGroupHeaven, lp_kickedPlayer) == true)) {
        auto891FB1DF_g = UnitGroup(UnitGetType(EventUnit()), lp_kickedPlayer, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto891FB1DF_u = UnitGroupCount(auto891FB1DF_g, c_unitCountAll);
        for (;; auto891FB1DF_u -= 1) {
            auto891FB1DF_var = UnitGroupUnitFromEnd(auto891FB1DF_g, auto891FB1DF_u);
            if (auto891FB1DF_var == null) { break; }
            if ((UnitGetType(auto891FB1DF_var) != "SiegeTankSieged") && (UnitGetType(auto891FB1DF_var) != "Beacon_Zerg") && (UnitGetType(auto891FB1DF_var) != "Beacon_Terran") && (UnitGetType(auto891FB1DF_var) != "Beacon_Protoss")) {
                UnitSetPosition(auto891FB1DF_var, PointWithOffset(UnitGetPosition(UnitFromId(22)), 0.0, -8.0), false);
            }

        }
    }
    else {
        if ((PlayerGroupHasPlayer(gv_gameData.lv_playerGroupHell, lp_kickedPlayer) == true)) {
            auto6159F112_val = lp_kickedPlayer;
            if (auto6159F112_val == gv_gameData.lv_rolesOwners[gv_syn.lv_roleAstaroth]) {
                auto714E19A7_g = UnitGroup(null, lp_kickedPlayer, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                auto714E19A7_u = UnitGroupCount(auto714E19A7_g, c_unitCountAll);
                for (;; auto714E19A7_u -= 1) {
                    auto714E19A7_var = UnitGroupUnitFromEnd(auto714E19A7_g, auto714E19A7_u);
                    if (auto714E19A7_var == null) { break; }
                    UnitSetPosition(auto714E19A7_var, PointFromId(695), false);
                }
            }
            else if (auto6159F112_val == gv_gameData.lv_rolesOwners[gv_syn.lv_roleAsmodeus]) {
                auto9F51456A_g = UnitGroup(null, lp_kickedPlayer, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                auto9F51456A_u = UnitGroupCount(auto9F51456A_g, c_unitCountAll);
                for (;; auto9F51456A_u -= 1) {
                    auto9F51456A_var = UnitGroupUnitFromEnd(auto9F51456A_g, auto9F51456A_u);
                    if (auto9F51456A_var == null) { break; }
                    UnitSetPosition(auto9F51456A_var, PointFromId(694), false);
                }
            }
            else if (auto6159F112_val == gv_gameData.lv_rolesOwners[gv_syn.lv_roleDevil]) {
                auto4A2D2327_g = UnitGroup(null, lp_kickedPlayer, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                auto4A2D2327_u = UnitGroupCount(auto4A2D2327_g, c_unitCountAll);
                for (;; auto4A2D2327_u -= 1) {
                    auto4A2D2327_var = UnitGroupUnitFromEnd(auto4A2D2327_g, auto4A2D2327_u);
                    if (auto4A2D2327_var == null) { break; }
                    UnitSetPosition(auto4A2D2327_var, PointFromId(693), false);
                }
            }
            else {
                auto9F5563B6_g = UnitGroup(null, lp_kickedPlayer, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                auto9F5563B6_u = UnitGroupCount(auto9F5563B6_g, c_unitCountAll);
                for (;; auto9F5563B6_u -= 1) {
                    auto9F5563B6_var = UnitGroupUnitFromEnd(auto9F5563B6_g, auto9F5563B6_u);
                    if (auto9F5563B6_var == null) { break; }
                    UnitSetPosition(auto9F5563B6_var, PointFromId(696), false);
                }
            }
        }

    }
}

int gf_GetRoleNumber (string lp_role) {
    // Automatic Variable Declarations
    string auto618B1A54_val;

    // Implementation
    auto618B1A54_val = lp_role;
    if (auto618B1A54_val == "0001") {
        return gv_syn.lv_roleMessiah;
    }
    else if (auto618B1A54_val == "0003") {
        return gv_syn.lv_roleMichael;
    }
    else if (auto618B1A54_val == "0002") {
        return gv_syn.lv_roleUriel;
    }
    else if (auto618B1A54_val == "0005") {
        return gv_syn.lv_roleJehoel;
    }
    else if (auto618B1A54_val == "0004") {
        return gv_syn.lv_roleSeraphiel;
    }
    else if (auto618B1A54_val == "0006") {
        return gv_syn.lv_roleZadkiel;
    }
    else if (auto618B1A54_val == "0007") {
        return gv_syn.lv_roleDevil;
    }
    else if (auto618B1A54_val == "0008") {
        return gv_syn.lv_roleAsmodeus;
    }
    else if (auto618B1A54_val == "0009") {
        return gv_syn.lv_roleAstaroth;
    }
    else if (auto618B1A54_val == "0010") {
        return gv_syn.lv_roleMoloch;
    }
    else {
        return -1;
    }
}

//--------------------------------------------------------------------------------------------------
// Trigger: Main Initialization
//--------------------------------------------------------------------------------------------------
bool gt_MainInitialization_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoE99B53ED_g;
    int autoE99B53ED_var;
    playergroup autoC8670A29_g;
    int autoC8670A29_var;
    unitgroup auto36ABE705_g;
    int auto36ABE705_u;
    unit auto36ABE705_var;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_InitializeVariables, true, false);
    TechTreeUpgradeAddLevel(14, "PassiveController", 1);
    TechTreeUpgradeAddLevel(15, "PassiveController", 1);
    TriggerExecute(gt_PreloadUnits, true, false);
    TriggerExecute(gt_RemoveReducedModeBlockers, true, false);
    TriggerExecute(gt_DisplayPlayerHandles, true, false);
    TriggerExecute(gt_NewInitializationHookup, true, false);
    autoE99B53ED_g = PlayerGroupAll();
    autoE99B53ED_var = -1;
    while (true) {
        autoE99B53ED_var = PlayerGroupNextPlayer(autoE99B53ED_g, autoE99B53ED_var);
        if (autoE99B53ED_var < 0) { break; }
        gv_playerData[autoE99B53ED_var].lv_currentRole = gf_GetRoleNumber(GameAttributePlayerValue("1", autoE99B53ED_var));
    }
    TriggerExecute(gt_BankInitialize, true, false);
    TriggerExecute(gt_SetupStatsDisplayDialogs, true, false);
    autoC8670A29_g = PlayerGroupAll();
    autoC8670A29_var = -1;
    while (true) {
        autoC8670A29_var = PlayerGroupNextPlayer(autoC8670A29_g, autoC8670A29_var);
        if (autoC8670A29_var < 0) { break; }
        PlayerOptionOverride(autoC8670A29_var, "simplecommandcard", "0");
    }
    TriggerExecute(gt_ColorFixSaveUnitGroupsPrepareunitsforCinematic, true, false);
    TriggerExecute(gt_initHumansPlaying, true, false);
    TriggerExecute(gt_LagHack, true, false);
    Wait(1.5, c_timeReal);
    TriggerExecute(gt_IntroCinematic, true, false);
    TriggerExecute(gt_DuckRoleSelectorDialogV2, true, false);
    TriggerExecute(gt_CCGDialogs, true, false);
    auto36ABE705_g = UnitGroup("Bunker", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto36ABE705_u = UnitGroupCount(auto36ABE705_g, c_unitCountAll);
    for (;; auto36ABE705_u -= 1) {
        auto36ABE705_var = UnitGroupUnitFromEnd(auto36ABE705_g, auto36ABE705_u);
        if (auto36ABE705_var == null) { break; }
        UnitCargoCreate(auto36ABE705_var, "Marine", 4);
    }
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionEntireMap(), "MonlythLightBridge", c_animNameDefault, "Stand Work", c_animFlagPlayForever, c_animTimeDefault);
    TriggerExecute(gt_InitNydusRally, true, false);
    libNtve_gf_SetAllianceAspectForPlayerGroup(PlayerGroupAll(), c_allianceIdChat, true);
    HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/7B7CE0D9"), libNtve_ge_TipType_NormalTip), StringExternal("Param/Value/4173D75D"), StringExternal("Param/Value/70817CE0"), "Assets\\Textures\\ui_aicommand_build_open_aggressivepush.dds");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MainInitialization_Init () {
    gt_MainInitialization = TriggerCreate("gt_MainInitialization_Func");
    TriggerAddEventMapInit(gt_MainInitialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialize Variables
//--------------------------------------------------------------------------------------------------
bool gt_InitializeVariables_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_syn.lv_roleNames[gv_syn.lv_roleAsmodeus] = "Asmodeus";
    gv_syn.lv_roleNames[gv_syn.lv_roleAstaroth] = "Astaroth";
    gv_syn.lv_roleNames[gv_syn.lv_roleDevil] = "The Devil";
    gv_syn.lv_roleNames[gv_syn.lv_roleJehoel] = "Jehoel";
    gv_syn.lv_roleNames[gv_syn.lv_roleMessiah] = "The Messiah";
    gv_syn.lv_roleNames[gv_syn.lv_roleMichael] = "Michael";
    gv_syn.lv_roleNames[gv_syn.lv_roleMoloch] = "Moloch";
    gv_syn.lv_roleNames[gv_syn.lv_roleSeraphiel] = "Seraphiel";
    gv_syn.lv_roleNames[gv_syn.lv_roleUriel] = "Uriel";
    gv_syn.lv_roleNames[gv_syn.lv_roleZadkiel] = "Zadkiel";
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitializeVariables_Init () {
    gt_InitializeVariables = TriggerCreate("gt_InitializeVariables_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Lag Hack
//--------------------------------------------------------------------------------------------------
bool gt_LagHack_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    GameSetSpeedValue(c_gameSpeedSlow);
    GameSetGlobalTimeScale(1.75);
    CreepSetSpeed(c_creepSpeedGrowth, 175.0);
    CreepSetSpeed(c_creepSpeedDecay, 175.0);
    CreepSetSpeed(c_creepSpeedBlend, 175.0);
    GameSetSpeedLocked(true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LagHack_Init () {
    gt_LagHack = TriggerCreate("gt_LagHack_Func");
    TriggerEnable(gt_LagHack, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: initHumansPlaying
//--------------------------------------------------------------------------------------------------
bool gt_initHumansPlaying_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoA0D9E968_g;
    int autoA0D9E968_var;

    // Actions
    if (!runActions) {
        return true;
    }

    HelpPanelEnableTechGlossaryButton(PlayerGroupAll(), false);
    HelpPanelEnableTechTreeButton(PlayerGroupAll(), false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeResourcePanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeTeamResourceButton, false);
    autoA0D9E968_g = PlayerGroupActive();
    autoA0D9E968_var = -1;
    while (true) {
        autoA0D9E968_var = PlayerGroupNextPlayer(autoA0D9E968_g, autoA0D9E968_var);
        if (autoA0D9E968_var < 0) { break; }
        if ((PlayerStatus(autoA0D9E968_var) == c_playerStatusActive) && (PlayerType(autoA0D9E968_var) == c_playerTypeUser)) {
            PlayerGroupAdd(gv_gameData.lv_humansPlaying, autoA0D9E968_var);
        }

    }
    libNtve_gf_SetPlayerGroupAlliance(PlayerGroupAll(), libNtve_ge_AllianceSetting_AllyWithSharedVision);
    libNtve_gf_SetAlliance(14, 15, libNtve_ge_AllianceSetting_Enemy);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_initHumansPlaying_Init () {
    gt_initHumansPlaying = TriggerCreate("gt_initHumansPlaying_Func");
    TriggerEnable(gt_initHumansPlaying, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ColorFix/Save Unit Groups/Prepare units for Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_ColorFixSaveUnitGroupsPrepareunitsforCinematic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto296DE04D_g;
    int auto296DE04D_u;
    unit auto296DE04D_var;
    unitgroup auto2FD9F2F6_g;
    int auto2FD9F2F6_u;
    unit auto2FD9F2F6_var;
    unitgroup auto09F235D3_g;
    int auto09F235D3_u;
    unit auto09F235D3_var;
    unitgroup auto9116F813_g;
    int auto9116F813_u;
    unit auto9116F813_var;
    unitgroup autoF96ED206_g;
    int autoF96ED206_u;
    unit autoF96ED206_var;
    unitgroup autoB3930CA0_g;
    int autoB3930CA0_u;
    unit autoB3930CA0_var;
    unitgroup auto42C0B1C8_g;
    int auto42C0B1C8_u;
    unit auto42C0B1C8_var;
    unitgroup auto21BDF435_g;
    int auto21BDF435_u;
    unit auto21BDF435_var;
    unitgroup auto709251A7_g;
    int auto709251A7_u;
    unit auto709251A7_var;
    unitgroup autoB5FC5EEF_g;
    int autoB5FC5EEF_u;
    unit autoB5FC5EEF_var;
    unitgroup auto35518B13_g;
    int auto35518B13_u;
    unit auto35518B13_var;
    unitgroup autoD095BB41_g;
    int autoD095BB41_u;
    unit autoD095BB41_var;
    unitgroup auto1F1D1170_g;
    int auto1F1D1170_u;
    unit auto1F1D1170_var;

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerSetColorIndex(UnitGetOwner(UnitFromId(501)), 0, true);
    PlayerSetColorIndex(UnitGetOwner(UnitFromId(729)), 3, true);
    PlayerSetColorIndex(UnitGetOwner(UnitFromId(65)), 7, true);
    PlayerSetColorIndex(UnitGetOwner(UnitFromId(347)), 12, true);
    PlayerSetColorIndex(UnitGetOwner(UnitFromId(313)), 4, true);
    PlayerSetColorIndex(UnitGetOwner(UnitFromId(711)), 14, true);
    PlayerSetColorIndex(UnitGetOwner(UnitFromId(705)), 1, true);
    PlayerSetColorIndex(UnitGetOwner(UnitFromId(783)), 5, true);
    PlayerSetColorIndex(UnitGetOwner(UnitFromId(692)), 6, true);
    PlayerSetColorIndex(UnitGetOwner(UnitFromId(439)), 8, true);
    auto296DE04D_g = UnitGroup("Overseer", UnitGetOwner(UnitFromId(784)), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto296DE04D_u = UnitGroupCount(auto296DE04D_g, c_unitCountAll);
    for (;; auto296DE04D_u -= 1) {
        auto296DE04D_var = UnitGroupUnitFromEnd(auto296DE04D_g, auto296DE04D_u);
        if (auto296DE04D_var == null) { break; }
        UnitGroupAdd(gv_gameData.lv_playerGrigoriAmount[1], auto296DE04D_var);
        UnitSetCustomValue(auto296DE04D_var, gv_syn.lv_unitCustomValueCurrentRole, IntToFixed(gv_syn.lv_roleDevil));
    }
    auto2FD9F2F6_g = UnitGroup("Overseer", UnitGetOwner(UnitFromId(709)), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto2FD9F2F6_u = UnitGroupCount(auto2FD9F2F6_g, c_unitCountAll);
    for (;; auto2FD9F2F6_u -= 1) {
        auto2FD9F2F6_var = UnitGroupUnitFromEnd(auto2FD9F2F6_g, auto2FD9F2F6_u);
        if (auto2FD9F2F6_var == null) { break; }
        UnitGroupAdd(gv_gameData.lv_playerGrigoriAmount[2], auto2FD9F2F6_var);
        UnitSetCustomValue(auto2FD9F2F6_var, gv_syn.lv_unitCustomValueCurrentRole, IntToFixed(gv_syn.lv_roleAsmodeus));
    }
    auto09F235D3_g = UnitGroup("Overseer", UnitGetOwner(UnitFromId(785)), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto09F235D3_u = UnitGroupCount(auto09F235D3_g, c_unitCountAll);
    for (;; auto09F235D3_u -= 1) {
        auto09F235D3_var = UnitGroupUnitFromEnd(auto09F235D3_g, auto09F235D3_u);
        if (auto09F235D3_var == null) { break; }
        UnitGroupAdd(gv_gameData.lv_playerGrigoriAmount[3], auto09F235D3_var);
        UnitSetCustomValue(auto09F235D3_var, gv_syn.lv_unitCustomValueCurrentRole, IntToFixed(gv_syn.lv_roleAstaroth));
    }
    UnitGroupAddUnitGroup(gv_gameData.lv_rolesUnits[gv_syn.lv_roleMessiah], UnitGroup(null, UnitGetOwner(UnitFromId(501)), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(gv_gameData.lv_rolesUnits[gv_syn.lv_roleMichael], UnitGroup(null, UnitGetOwner(UnitFromId(729)), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(gv_gameData.lv_rolesUnits[gv_syn.lv_roleUriel], UnitGroup(null, UnitGetOwner(UnitFromId(65)), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(gv_gameData.lv_rolesUnits[gv_syn.lv_roleJehoel], UnitGroup(null, UnitGetOwner(UnitFromId(347)), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(gv_gameData.lv_rolesUnits[gv_syn.lv_roleSeraphiel], UnitGroup(null, UnitGetOwner(UnitFromId(313)), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(gv_gameData.lv_rolesUnits[gv_syn.lv_roleZadkiel], UnitGroup(null, UnitGetOwner(UnitFromId(711)), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(gv_gameData.lv_rolesUnits[gv_syn.lv_roleDevil], UnitGroup(null, UnitGetOwner(UnitFromId(705)), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(gv_gameData.lv_rolesUnits[gv_syn.lv_roleAsmodeus], UnitGroup(null, UnitGetOwner(UnitFromId(692)), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(gv_gameData.lv_rolesUnits[gv_syn.lv_roleAstaroth], UnitGroup(null, UnitGetOwner(UnitFromId(783)), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(gv_gameData.lv_rolesUnits[gv_syn.lv_roleMoloch], UnitGroup(null, UnitGetOwner(UnitFromId(439)), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    auto9116F813_g = UnitGroup(null, UnitGetOwner(UnitFromId(501)), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto9116F813_u = UnitGroupCount(auto9116F813_g, c_unitCountAll);
    for (;; auto9116F813_u -= 1) {
        auto9116F813_var = UnitGroupUnitFromEnd(auto9116F813_g, auto9116F813_u);
        if (auto9116F813_var == null) { break; }
        UnitSetCustomValue(auto9116F813_var, gv_syn.lv_unitCustomValueOriginalRole, gf_GetRoleNumber("0001"));
        UnitSetOwner(auto9116F813_var, 14, false);
    }
    autoF96ED206_g = UnitGroup(null, UnitGetOwner(UnitFromId(729)), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoF96ED206_u = UnitGroupCount(autoF96ED206_g, c_unitCountAll);
    for (;; autoF96ED206_u -= 1) {
        autoF96ED206_var = UnitGroupUnitFromEnd(autoF96ED206_g, autoF96ED206_u);
        if (autoF96ED206_var == null) { break; }
        UnitSetCustomValue(autoF96ED206_var, gv_syn.lv_unitCustomValueOriginalRole, gf_GetRoleNumber("0003"));
        UnitSetOwner(autoF96ED206_var, 14, false);
    }
    autoB3930CA0_g = UnitGroup(null, UnitGetOwner(UnitFromId(65)), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoB3930CA0_u = UnitGroupCount(autoB3930CA0_g, c_unitCountAll);
    for (;; autoB3930CA0_u -= 1) {
        autoB3930CA0_var = UnitGroupUnitFromEnd(autoB3930CA0_g, autoB3930CA0_u);
        if (autoB3930CA0_var == null) { break; }
        UnitSetCustomValue(autoB3930CA0_var, gv_syn.lv_unitCustomValueOriginalRole, gf_GetRoleNumber("0002"));
        UnitSetOwner(autoB3930CA0_var, 14, false);
    }
    auto42C0B1C8_g = UnitGroup(null, UnitGetOwner(UnitFromId(347)), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto42C0B1C8_u = UnitGroupCount(auto42C0B1C8_g, c_unitCountAll);
    for (;; auto42C0B1C8_u -= 1) {
        auto42C0B1C8_var = UnitGroupUnitFromEnd(auto42C0B1C8_g, auto42C0B1C8_u);
        if (auto42C0B1C8_var == null) { break; }
        UnitSetCustomValue(auto42C0B1C8_var, 62, gf_GetRoleNumber("0005"));
        UnitSetOwner(auto42C0B1C8_var, 14, false);
    }
    auto21BDF435_g = UnitGroup(null, UnitGetOwner(UnitFromId(313)), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto21BDF435_u = UnitGroupCount(auto21BDF435_g, c_unitCountAll);
    for (;; auto21BDF435_u -= 1) {
        auto21BDF435_var = UnitGroupUnitFromEnd(auto21BDF435_g, auto21BDF435_u);
        if (auto21BDF435_var == null) { break; }
        UnitSetCustomValue(auto21BDF435_var, 62, gf_GetRoleNumber("0004"));
        UnitSetOwner(auto21BDF435_var, 14, false);
    }
    auto709251A7_g = UnitGroup(null, UnitGetOwner(UnitFromId(711)), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto709251A7_u = UnitGroupCount(auto709251A7_g, c_unitCountAll);
    for (;; auto709251A7_u -= 1) {
        auto709251A7_var = UnitGroupUnitFromEnd(auto709251A7_g, auto709251A7_u);
        if (auto709251A7_var == null) { break; }
        UnitSetCustomValue(auto709251A7_var, 62, gf_GetRoleNumber("0006"));
        UnitSetOwner(auto709251A7_var, 14, false);
    }
    autoB5FC5EEF_g = UnitGroup(null, UnitGetOwner(UnitFromId(705)), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoB5FC5EEF_u = UnitGroupCount(autoB5FC5EEF_g, c_unitCountAll);
    for (;; autoB5FC5EEF_u -= 1) {
        autoB5FC5EEF_var = UnitGroupUnitFromEnd(autoB5FC5EEF_g, autoB5FC5EEF_u);
        if (autoB5FC5EEF_var == null) { break; }
        UnitSetCustomValue(autoB5FC5EEF_var, 62, gf_GetRoleNumber("0007"));
        UnitSetCustomValue(autoB5FC5EEF_var, gv_syn.lv_unitCustomValueCurrentRole, IntToFixed(gv_syn.lv_roleDevil));
        UnitSetOwner(autoB5FC5EEF_var, 15, false);
    }
    auto35518B13_g = UnitGroup(null, UnitGetOwner(UnitFromId(692)), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto35518B13_u = UnitGroupCount(auto35518B13_g, c_unitCountAll);
    for (;; auto35518B13_u -= 1) {
        auto35518B13_var = UnitGroupUnitFromEnd(auto35518B13_g, auto35518B13_u);
        if (auto35518B13_var == null) { break; }
        UnitSetCustomValue(auto35518B13_var, 62, gf_GetRoleNumber("0008"));
        UnitSetCustomValue(auto35518B13_var, gv_syn.lv_unitCustomValueCurrentRole, IntToFixed(gv_syn.lv_roleAsmodeus));
        UnitSetOwner(auto35518B13_var, 15, false);
    }
    autoD095BB41_g = UnitGroup(null, UnitGetOwner(UnitFromId(783)), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoD095BB41_u = UnitGroupCount(autoD095BB41_g, c_unitCountAll);
    for (;; autoD095BB41_u -= 1) {
        autoD095BB41_var = UnitGroupUnitFromEnd(autoD095BB41_g, autoD095BB41_u);
        if (autoD095BB41_var == null) { break; }
        UnitSetCustomValue(autoD095BB41_var, 62, gf_GetRoleNumber("0009"));
        UnitSetCustomValue(autoD095BB41_var, gv_syn.lv_unitCustomValueCurrentRole, IntToFixed(gv_syn.lv_roleAstaroth));
        UnitSetOwner(autoD095BB41_var, 15, false);
    }
    auto1F1D1170_g = UnitGroup(null, UnitGetOwner(UnitFromId(439)), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto1F1D1170_u = UnitGroupCount(auto1F1D1170_g, c_unitCountAll);
    for (;; auto1F1D1170_u -= 1) {
        auto1F1D1170_var = UnitGroupUnitFromEnd(auto1F1D1170_g, auto1F1D1170_u);
        if (auto1F1D1170_var == null) { break; }
        UnitSetCustomValue(auto1F1D1170_var, 62, gf_GetRoleNumber("0010"));
        UnitSetOwner(auto1F1D1170_var, 15, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ColorFixSaveUnitGroupsPrepareunitsforCinematic_Init () {
    gt_ColorFixSaveUnitGroupsPrepareunitsforCinematic = TriggerCreate("gt_ColorFixSaveUnitGroupsPrepareunitsforCinematic_Func");
    TriggerEnable(gt_ColorFixSaveUnitGroupsPrepareunitsforCinematic, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: New Initialization/Hookup
//--------------------------------------------------------------------------------------------------
bool gt_NewInitializationHookup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playa;
    int lv_item;

    // Automatic Variable Declarations
    unitgroup auto5917E280_g;
    int auto5917E280_u;
    unit auto5917E280_var;

    // Variable Initialization
    lv_item = c_invalidDialogControlId;

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetPlayerGroupAlliance(PlayerGroupAll(), libNtve_ge_AllianceSetting_AllyWithSharedVision);
    auto5917E280_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto5917E280_u = UnitGroupCount(auto5917E280_g, c_unitCountAll);
    for (;; auto5917E280_u -= 1) {
        auto5917E280_var = UnitGroupUnitFromEnd(auto5917E280_g, auto5917E280_u);
        if (auto5917E280_var == null) { break; }
        UnitSetState(auto5917E280_var, c_unitStateSelectable, false);
    }
    TimerStart(gv_gameData.lv_godTimer, (gv_gameData.lv_godTime * 60.0), false, c_timeReal);
    TimerWindowCreate(TimerLastStarted(), StringExternal("Param/Value/0CCD321F"), true, false);
    gv_gameData.lv_godTimerWindow = TimerWindowLastCreated();
    TimerPause(TimerLastStarted(), true);
    TimerWindowShow(TimerWindowLastCreated(), PlayerGroupAll(), false);
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/MenuBarConsoleAnchor");
    gv_roleSelect.lv_gENERALMenuUIPanel = DialogControlLastCreated();
    DialogControlSetPosition(gv_roleSelect.lv_gENERALMenuUIPanel, PlayerGroupAll(), c_anchorBottomRight, 0, 0);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeIdleWorkerButton, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeArmyButton, false);
    DialogControlHookupStandard(c_triggerControlTypeButton, "UIContainer/ConsoleUIContainer/IdleButton");
    gv_roleSelect.lv_gENERALIdleButton = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/ChatBar");
    gv_roleSelect.lv_gENERALChatInput = DialogControlLastCreated();
    lv_item = DialogControlLastCreated();
    DialogControlSetPosition(gv_roleSelect.lv_gENERALChatInput, PlayerGroupAll(), c_anchorBottomLeft, 650, 0);
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/ChatDisplay");
    gv_roleSelect.lv_gENERALChatDisplay = DialogControlLastCreated();
    lv_item = DialogControlLastCreated();
    DialogControlSetPosition(gv_roleSelect.lv_gENERALChatDisplay, PlayerGroupAll(), c_anchorBottomLeft, 650, 100);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NewInitializationHookup_Init () {
    gt_NewInitializationHookup = TriggerCreate("gt_NewInitializationHookup_Func");
    TriggerEnable(gt_NewInitializationHookup, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Display Player Handles
//--------------------------------------------------------------------------------------------------
bool gt_DisplayPlayerHandles_Func (bool testConds, bool runActions) {
    // Variable Declarations
    text lv_handles;

    // Automatic Variable Declarations
    playergroup auto24C4E1E6_g;
    int auto24C4E1E6_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto24C4E1E6_g = PlayerGroupAll();
    auto24C4E1E6_var = -1;
    while (true) {
        auto24C4E1E6_var = PlayerGroupNextPlayer(auto24C4E1E6_g, auto24C4E1E6_var);
        if (auto24C4E1E6_var < 0) { break; }
        if ((PlayerType(auto24C4E1E6_var) == c_playerTypeUser)) {
            lv_handles = (lv_handles + (PlayerName(auto24C4E1E6_var) + StringExternal("Param/Value/259AEAE1") + StringToText(PlayerHandle(auto24C4E1E6_var)) + StringExternal("Param/Value/EDF08504")));
        }

    }
    TransmissionSend(PlayerGroupAll(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/5FBAA37C"), lv_handles, 0.0, c_transmissionDurationAdd, false);
    Wait(0.1, c_timeGame);
    UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DisplayPlayerHandles_Init () {
    gt_DisplayPlayerHandles = TriggerCreate("gt_DisplayPlayerHandles_Func");
    TriggerEnable(gt_DisplayPlayerHandles, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Remove Reduced Mode Blockers
//--------------------------------------------------------------------------------------------------
bool gt_RemoveReducedModeBlockers_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoD5D26AFD_g;
    int autoD5D26AFD_u;
    unit autoD5D26AFD_var;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_gameData.lv_reducedMode == false)) {
        libNtve_gf_RemoveDoodadsinRegion(RegionFromId(30), null);
        autoD5D26AFD_g = UnitGroupFromId(6);
        autoD5D26AFD_u = UnitGroupCount(autoD5D26AFD_g, c_unitCountAll);
        for (;; autoD5D26AFD_u -= 1) {
            autoD5D26AFD_var = UnitGroupUnitFromEnd(autoD5D26AFD_g, autoD5D26AFD_u);
            if (autoD5D26AFD_var == null) { break; }
            UnitRemove(autoD5D26AFD_var);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RemoveReducedModeBlockers_Init () {
    gt_RemoveReducedModeBlockers = TriggerCreate("gt_RemoveReducedModeBlockers_Func");
    TriggerEnable(gt_RemoveReducedModeBlockers, false);
    TriggerAddEventMapInit(gt_RemoveReducedModeBlockers);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Preload Units
//--------------------------------------------------------------------------------------------------
bool gt_PreloadUnits_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_cycle;
    int lv_amount;
    string[81] lv_units;
    int lv_dialog;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_amount = 63;
    lv_dialog = c_invalidDialogId;

    // Actions
    if (!runActions) {
        return true;
    }

    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 0.0, 0.0);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDeath, 0.0, 0.0);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 0.0, 0.0);
    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 200, 50, c_anchorTopLeft, 50, 50, StringToText(""), "Assets\\Textures\\white.dds", c_triggerImageTypeNormal, true, Color(0,0,0), c_triggerBlendModeNormal);
    DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    lv_dialog = DialogLastCreated();
    Wait(0.0, c_timeGame);
    lv_units[0] = "Marine";
    lv_units[0] = "Artanis";
    lv_units[1] = "Loki";
    lv_units[2] = "Colossus";
    lv_units[3] = "Sentry";
    lv_units[4] = "Hellion";
    lv_units[5] = "Donatello";
    lv_units[6] = "WarPig";
    lv_units[7] = "Medivac";
    lv_units[8] = "Nova";
    lv_units[9] = "HelsAngelAssault";
    lv_units[10] = "HelsAngelFighter";
    lv_units[11] = "PrisonZealot";
    lv_units[12] = "Metatron";
    lv_units[13] = "DarkTemplar";
    lv_units[14] = "Mutalisk";
    lv_units[15] = "Infestor";
    lv_units[16] = "InfestorBurrowed";
    lv_units[17] = "Ultralisk";
    lv_units[18] = "UltraliskBurrowed";
    lv_units[19] = "Odin";
    lv_units[20] = "OdinFlying";
    lv_units[21] = "Karass";
    lv_units[22] = "Lurker";
    lv_units[23] = "LurkerBurrowed";
    lv_units[24] = "Hydralisk2";
    lv_units[25] = "HydraliskBurrowed2";
    lv_units[26] = "KerriganChar";
    lv_units[27] = "KerriganCharBurrowed";
    lv_units[28] = "Zeratul";
    lv_units[29] = "StoneZealot";
    lv_units[30] = "Predator";
    lv_units[31] = "Thor";
    lv_units[32] = "Spectre";
    lv_units[33] = "Goliath";
    lv_units[34] = "Reaper";
    lv_units[35] = "Firebat";
    lv_units[36] = "Marine";
    lv_units[37] = "Marauder";
    lv_units[38] = "Stalker2";
    lv_units[39] = "Zealot";
    lv_units[40] = "Diamondback";
    lv_units[41] = "Ultralisk2";
    lv_units[42] = "UltraliskBurrowed2";
    lv_units[43] = "Baneling";
    lv_units[44] = "BanelingBurrowed";
    lv_units[45] = "Hunterling";
    lv_units[46] = "SiegeBreakerSieged";
    lv_units[47] = "SiegeBreaker";
    lv_units[48] = "Immortal";
    lv_units[49] = "VikingAssault";
    lv_units[50] = "VikingFighter";
    lv_units[51] = "HunterKiller";
    lv_units[52] = "HunterKillerBurrowed";
    lv_units[53] = "Roach2";
    lv_units[54] = "RoachBurrowed2";
    lv_units[55] = "Fallen";
    lv_units[56] = "SiegeTankSieged";
    lv_units[57] = "Ghost";
    lv_units[58] = "Overseer";
    lv_units[59] = "Overlord";
    lv_units[60] = "OverlordCocoon";
    lv_units[61] = "Zergling";
    lv_units[62] = "Hydralisk";
    lv_units[63] = "Roach";
    while ((lv_cycle <= lv_amount)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_units[lv_cycle], c_unitCreateIgnorePlacement, 0, Point(10.0, 20.0));
        UnitKill(UnitLastCreated());
        lv_cycle += 1;
    }
    Wait(1.5, c_timeGame);
    DialogDestroy(lv_dialog);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 100.0, 0.0);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDeath, 100.0, 0.0);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 100.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PreloadUnits_Init () {
    gt_PreloadUnits = TriggerCreate("gt_PreloadUnits_Func");
    TriggerEnable(gt_PreloadUnits, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TEST MODE
//--------------------------------------------------------------------------------------------------
bool gt_TESTMODE_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGroupCount(PlayerGroupActive()) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/BDDC603E"));
    TriggerEnable(gt_ExpCommand, true);
    TriggerEnable(gt_HelpCommand, true);
    TriggerEnable(gt_AllyOnCommand, true);
    TriggerEnable(gt_ResOnCommand, true);
    TriggerEnable(gt_ResOffCommand, true);
    TriggerEnable(gt_SpawnGod, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TESTMODE_Init () {
    gt_TESTMODE = TriggerCreate("gt_TESTMODE_Func");
    TriggerAddEventChatMessage(gt_TESTMODE, c_playerAny, "-sandbox", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: HelpCommand
//--------------------------------------------------------------------------------------------------
bool gt_HelpCommand_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TransmissionSend(PlayerGroupAll(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/B71E5E5C"), StringExternal("Param/Value/AC332844"), 0.0, c_transmissionDurationAdd, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HelpCommand_Init () {
    gt_HelpCommand = TriggerCreate("gt_HelpCommand_Func");
    TriggerEnable(gt_HelpCommand, false);
    TriggerAddEventChatMessage(gt_HelpCommand, c_playerAny, "-help", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AllyOnCommand
//--------------------------------------------------------------------------------------------------
bool gt_AllyOnCommand_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoF0F7DD64_g;
    int autoF0F7DD64_var;

    // Actions
    if (!runActions) {
        return true;
    }

    autoF0F7DD64_g = PlayerGroupAll();
    autoF0F7DD64_var = -1;
    while (true) {
        autoF0F7DD64_var = PlayerGroupNextPlayer(autoF0F7DD64_g, autoF0F7DD64_var);
        if (autoF0F7DD64_var < 0) { break; }
        PlayerSetAlliance(autoF0F7DD64_var, c_allianceIdControl, EventPlayer(), true);
        PlayerSetAlliance(autoF0F7DD64_var, c_allianceIdVision, EventPlayer(), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AllyOnCommand_Init () {
    gt_AllyOnCommand = TriggerCreate("gt_AllyOnCommand_Func");
    TriggerEnable(gt_AllyOnCommand, false);
    TriggerAddEventChatMessage(gt_AllyOnCommand, c_playerAny, "-ally on", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AllyOffCommand
//--------------------------------------------------------------------------------------------------
bool gt_AllyOffCommand_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoF992013E_g;
    int autoF992013E_var;
    playergroup auto2D503055_g;
    int auto2D503055_var;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGroupHasPlayer(gv_gameData.lv_playerGroupHell, EventPlayer()) == true)) {
        auto2D503055_g = gv_gameData.lv_playerGroupHeaven;
        auto2D503055_var = -1;
        while (true) {
            auto2D503055_var = PlayerGroupNextPlayer(auto2D503055_g, auto2D503055_var);
            if (auto2D503055_var < 0) { break; }
            PlayerSetAlliance(auto2D503055_var, c_allianceIdControl, EventPlayer(), false);
            PlayerSetAlliance(auto2D503055_var, c_allianceIdVision, EventPlayer(), false);
        }
    }
    else {
        autoF992013E_g = gv_gameData.lv_playerGroupHell;
        autoF992013E_var = -1;
        while (true) {
            autoF992013E_var = PlayerGroupNextPlayer(autoF992013E_g, autoF992013E_var);
            if (autoF992013E_var < 0) { break; }
            PlayerSetAlliance(autoF992013E_var, c_allianceIdControl, EventPlayer(), false);
            PlayerSetAlliance(autoF992013E_var, c_allianceIdVision, EventPlayer(), false);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AllyOffCommand_Init () {
    gt_AllyOffCommand = TriggerCreate("gt_AllyOffCommand_Func");
    TriggerEnable(gt_AllyOffCommand, false);
    TriggerAddEventChatMessage(gt_AllyOffCommand, c_playerAny, "-ally off", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ExpCommand
//--------------------------------------------------------------------------------------------------
bool gt_ExpCommand_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, FixedToText(UnitGetPropertyFixed(UnitFromId(711), c_unitPropXP, c_unitPropCurrent), c_fixedPrecisionAny));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, FixedToText(UnitGetPropertyFixed(UnitFromId(439), c_unitPropXP, c_unitPropCurrent), c_fixedPrecisionAny));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ExpCommand_Init () {
    gt_ExpCommand = TriggerCreate("gt_ExpCommand_Func");
    TriggerEnable(gt_ExpCommand, false);
    TriggerAddEventChatMessage(gt_ExpCommand, c_playerAny, "-getstats", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ResOnCommand
//--------------------------------------------------------------------------------------------------
bool gt_ResOnCommand_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_ResurrectCommand, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ResOnCommand_Init () {
    gt_ResOnCommand = TriggerCreate("gt_ResOnCommand_Func");
    TriggerEnable(gt_ResOnCommand, false);
    TriggerAddEventChatMessage(gt_ResOnCommand, c_playerAny, "-res on", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ResurrectCommand
//--------------------------------------------------------------------------------------------------
bool gt_ResurrectCommand_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((!((UnitGetType(EventUnit()) == "Hydralisk") || (UnitGetType(EventUnit()) == "Zergling") || (UnitGetType(EventUnit()) == "Roach"))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_UnitCreateFacingPoint(1, UnitGetType(EventUnit()), 0, UnitGetOwner(EventUnit()), UnitGetPosition(EventUnit()), UnitGetPosition(EventUnit()));
    libNtve_gf_PauseUnit(UnitLastCreated(), true);
    libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
    Wait(2.0, c_timeGame);
    libNtve_gf_PauseUnit(UnitLastCreated(), false);
    libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ResurrectCommand_Init () {
    gt_ResurrectCommand = TriggerCreate("gt_ResurrectCommand_Func");
    TriggerEnable(gt_ResurrectCommand, false);
    TriggerAddEventUnitDied(gt_ResurrectCommand, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ResOffCommand
//--------------------------------------------------------------------------------------------------
bool gt_ResOffCommand_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_ResurrectCommand, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ResOffCommand_Init () {
    gt_ResOffCommand = TriggerCreate("gt_ResOffCommand_Func");
    TriggerEnable(gt_ResOffCommand, false);
    TriggerAddEventChatMessage(gt_ResOffCommand, c_playerAny, "-res off", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spawn God
//--------------------------------------------------------------------------------------------------
bool gt_SpawnGod_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_StopTimer(gv_gameData.lv_godTimer);
    gv_gameData.lv_godTime = 0.25;
    TriggerExecute(gt_CreateGodTimerWindow, true, false);
    TimerPause(gv_gameData.lv_godTimer, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpawnGod_Init () {
    gt_SpawnGod = TriggerCreate("gt_SpawnGod_Func");
    TriggerEnable(gt_SpawnGod, false);
    TriggerAddEventChatMessage(gt_SpawnGod, c_playerAny, "-spawn god", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_IntroCinematic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    unitgroup autoCB4D798D_g;
    int autoCB4D798D_u;
    unit autoCB4D798D_var;
    playergroup auto42AD2B34_g;
    int auto42AD2B34_var;
    const int auto15AFD586_ae = 6;
    int auto15AFD586_var;
    const int autoF5060AAD_ae = 10;
    const int autoF5060AAD_ai = 1;
    playergroup autoD1724449_g;
    int autoD1724449_var;
    unitgroup auto52AB46CA_g;
    int auto52AB46CA_u;
    unit auto52AB46CA_var;
    unitgroup auto6DB946EE_g;
    int auto6DB946EE_u;
    unit auto6DB946EE_var;
    playergroup auto83EDF429_g;
    int auto83EDF429_var;
    playergroup auto17C5D475_g;
    int auto17C5D475_var;
    playergroup auto41A693F4_g;
    int auto41A693F4_var;
    unitgroup auto038706C4_g;
    int auto038706C4_u;
    unit auto038706C4_var;
    unitgroup auto0683B26E_g;
    int auto0683B26E_u;
    unit auto0683B26E_var;
    unitgroup autoED391648_g;
    int autoED391648_u;
    unit autoED391648_var;
    unitgroup autoF8339246_g;
    int autoF8339246_u;
    unit autoF8339246_var;
    unitgroup auto550533A1_g;
    int auto550533A1_u;
    unit auto550533A1_var;
    playergroup auto7AB4F962_g;
    int auto7AB4F962_var;
    unitgroup auto93C1F712_g;
    int auto93C1F712_u;
    unit auto93C1F712_var;
    const int auto60CDA856_ae = 50;
    int auto60CDA856_var;
    playergroup auto7F428693_g;
    int auto7F428693_var;
    playergroup autoFA134B54_g;
    int autoFA134B54_var;
    playergroup auto9329867C_g;
    int auto9329867C_var;
    playergroup auto5AB0F9D5_g;
    int auto5AB0F9D5_var;
    playergroup auto1A3715C0_g;
    int auto1A3715C0_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeHeroPanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeConsolePanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMinimapPanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeCommandPanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeConsolePanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeControlGroupPanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMissionTimePanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeStatusUI, false);
    UnitSetPosition(UnitFromId(729), PointFromId(927), false);
    UnitIssueOrder(UnitFromId(729), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsWithDefaultFacing(6, "Ghost", 0, 14, PointFromId(928));
    UnitGroupIssueOrder(UnitLastCreatedGroup(), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    autoCB4D798D_g = UnitLastCreatedGroup();
    autoCB4D798D_u = UnitGroupCount(autoCB4D798D_g, c_unitCountAll);
    for (;; autoCB4D798D_u -= 1) {
        autoCB4D798D_var = UnitGroupUnitFromEnd(autoCB4D798D_g, autoCB4D798D_u);
        if (autoCB4D798D_var == null) { break; }
        UnitSetTeamColorIndex(autoCB4D798D_var, gf_ColorID_To_Color(gv_syn.lv_roleMichael));
        UnitSetState(autoCB4D798D_var, c_unitStateSelectable, false);
    }
    gv_cinematic.lv_cinematicUnits = UnitLastCreatedGroup();
    TriggerExecute(gt_CinematicTextTags, true, false);
    DialogCreate(1100, 750, c_anchorTopRight, 0, 0, false);
    gv_cinematic.lv_cinematicTextDialog = DialogLastCreated();
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogSetImage(DialogLastCreated(), "Assets\\Textures\\blank.dds");
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 1100, 400, c_anchorTopRight, 0, 100, StringExternal("Param/Value/7FC76E36"), Color(80.00, 70.20, 74.12), true, 2.0);
    gv_cinematic.lv_cinematicTextLabel = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "HBTutorialCinematic", PlayerGroupAll());
    auto42AD2B34_g = PlayerGroupAll();
    auto42AD2B34_var = -1;
    while (true) {
        auto42AD2B34_var = PlayerGroupNextPlayer(auto42AD2B34_g, auto42AD2B34_var);
        if (auto42AD2B34_var < 0) { break; }
        CameraLockInput(auto42AD2B34_var, true);
        libNtve_gf_SwooshCamera(auto42AD2B34_var, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 30.0), ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 30.0), PointFromId(925), 1.6667);
    }
    Wait(1.6667, c_timeGame);
    auto15AFD586_var = 1;
    for ( ; auto15AFD586_var <= auto15AFD586_ae; auto15AFD586_var += 1 ) {
        lv_i = 7;
        for ( ; ( (autoF5060AAD_ai >= 0 && lv_i <= autoF5060AAD_ae) || (autoF5060AAD_ai < 0 && lv_i >= autoF5060AAD_ae) ) ; lv_i += autoF5060AAD_ai ) {
            libNtve_gf_SetAlliance(auto15AFD586_var, lv_i, libNtve_ge_AllianceSetting_EnemyWithSharedVision);
        }
    }
    autoD1724449_g = PlayerGroupAll();
    autoD1724449_var = -1;
    while (true) {
        autoD1724449_var = PlayerGroupNextPlayer(autoD1724449_g, autoD1724449_var);
        if (autoD1724449_var < 0) { break; }
        libNtve_gf_SwooshCamera(autoD1724449_var, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 30.0), ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 50.0), PointFromId(925), 1.6667);
    }
    auto52AB46CA_g = UnitCargoGroup(gv_gameData.lv_nydusSatan);
    auto52AB46CA_u = UnitGroupCount(auto52AB46CA_g, c_unitCountAll);
    for (;; auto52AB46CA_u -= 1) {
        auto52AB46CA_var = UnitGroupUnitFromEnd(auto52AB46CA_g, auto52AB46CA_u);
        if (auto52AB46CA_var == null) { break; }
        UnitSetState(auto52AB46CA_var, c_unitStateSelectable, false);
        UnitSetTeamColorIndex(auto52AB46CA_var, gf_ColorID_To_Color(gv_syn.lv_roleDevil));
    }
    auto6DB946EE_g = UnitCargoGroup(gv_gameData.lv_nydusAsta);
    auto6DB946EE_u = UnitGroupCount(auto6DB946EE_g, c_unitCountAll);
    for (;; auto6DB946EE_u -= 1) {
        auto6DB946EE_var = UnitGroupUnitFromEnd(auto6DB946EE_g, auto6DB946EE_u);
        if (auto6DB946EE_var == null) { break; }
        UnitSetState(auto6DB946EE_var, c_unitStateSelectable, false);
        UnitSetTeamColorIndex(auto6DB946EE_var, gf_ColorID_To_Color(gv_syn.lv_roleAstaroth));
    }
    UnitIssueOrder(gv_gameData.lv_nydusSatan, Order(AbilityCommand("NydusCanalTransport", 1)), c_orderQueueReplace);
    UnitIssueOrder(gv_gameData.lv_nydusAsta, Order(AbilityCommand("NydusCanalTransport", 1)), c_orderQueueReplace);
    Wait(5.6667, c_timeGame);
    auto83EDF429_g = PlayerGroupAll();
    auto83EDF429_var = -1;
    while (true) {
        auto83EDF429_var = PlayerGroupNextPlayer(auto83EDF429_g, auto83EDF429_var);
        if (auto83EDF429_var < 0) { break; }
        libNtve_gf_SwooshCamera(auto83EDF429_var, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 50.0), ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 55.0), PointFromId(925), 4.6667);
        CameraPan(auto83EDF429_var, PointFromId(916), 3.3333, -1, 10.0, false);
    }
    Wait(5.6667, c_timeGame);
    auto17C5D475_g = PlayerGroupAll();
    auto17C5D475_var = -1;
    while (true) {
        auto17C5D475_var = PlayerGroupNextPlayer(auto17C5D475_g, auto17C5D475_var);
        if (auto17C5D475_var < 0) { break; }
        libNtve_gf_SwooshCamera(auto17C5D475_var, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 55.0), ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 80.0), CameraGetTarget(auto17C5D475_var), 1.3333);
        CameraPan(auto17C5D475_var, PointFromId(919), 2.3333, -1, 10.0, false);
    }
    libNtve_gf_SetDialogItemText(gv_cinematic.lv_cinematicTextLabel, StringExternal("Param/Value/AB8B34E5"), PlayerGroupAll());
    Wait(6.3333, c_timeGame);
    auto41A693F4_g = PlayerGroupAll();
    auto41A693F4_var = -1;
    while (true) {
        auto41A693F4_var = PlayerGroupNextPlayer(auto41A693F4_g, auto41A693F4_var);
        if (auto41A693F4_var < 0) { break; }
        libNtve_gf_SwooshCamera(auto41A693F4_var, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 80.0), ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + -5.0), CameraGetTarget(auto41A693F4_var), 2.3333);
        CameraPan(auto41A693F4_var, PointFromId(920), 1.6667, -1, 10.0, false);
    }
    libNtve_gf_SetDialogItemText(gv_cinematic.lv_cinematicTextLabel, StringExternal("Param/Value/06D75B72"), PlayerGroupAll());
    Wait(1.6667, c_timeGame);
    auto038706C4_g = UnitCargoGroup(gv_gameData.lv_nydusAsta);
    auto038706C4_u = UnitGroupCount(auto038706C4_g, c_unitCountAll);
    for (;; auto038706C4_u -= 1) {
        auto038706C4_var = UnitGroupUnitFromEnd(auto038706C4_g, auto038706C4_u);
        if (auto038706C4_var == null) { break; }
        UnitSetState(auto038706C4_var, c_unitStateSelectable, false);
        UnitSetTeamColorIndex(auto038706C4_var, gf_ColorID_To_Color(gv_syn.lv_roleAstaroth));
    }
    UnitIssueOrder(gv_gameData.lv_nydusAsta, Order(AbilityCommand("NydusCanalTransport", 1)), c_orderQueueReplace);
    Wait(5.0, c_timeGame);
    auto0683B26E_g = UnitCargoGroup(gv_gameData.lv_nydusAsta);
    auto0683B26E_u = UnitGroupCount(auto0683B26E_g, c_unitCountAll);
    for (;; auto0683B26E_u -= 1) {
        auto0683B26E_var = UnitGroupUnitFromEnd(auto0683B26E_g, auto0683B26E_u);
        if (auto0683B26E_var == null) { break; }
        UnitSetState(auto0683B26E_var, c_unitStateSelectable, false);
        UnitSetTeamColorIndex(auto0683B26E_var, gf_ColorID_To_Color(gv_syn.lv_roleAstaroth));
    }
    UnitIssueOrder(gv_gameData.lv_nydusAsta, Order(AbilityCommand("NydusCanalTransport", 1)), c_orderQueueReplace);
    lv_i = 0;
    libNtve_gf_AttachModelToUnit(UnitFromId(783), "ShapeArrowPointer", "Ref_Overhead");
    ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetTeamColor(libNtve_gf_ConvertPlayerColorToColor(gf_ColorID_To_Color(gv_syn.lv_roleAstaroth)), libNtve_gf_ConvertPlayerColorToColor(gf_ColorID_To_Color(gv_syn.lv_roleAstaroth))));
    gv_cinematic.lv_cinematicActors[lv_i] = libNtve_gf_ActorLastCreated();
    lv_i = (lv_i + 1);
    libNtve_gf_AttachModelToUnit(UnitFromId(707), "ShapeArrowPointer", "Ref_Overhead");
    ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetTeamColor(libNtve_gf_ConvertPlayerColorToColor(gf_ColorID_To_Color(gv_syn.lv_roleAstaroth)), libNtve_gf_ConvertPlayerColorToColor(gf_ColorID_To_Color(gv_syn.lv_roleAstaroth))));
    gv_cinematic.lv_cinematicActors[lv_i] = libNtve_gf_ActorLastCreated();
    lv_i = (lv_i + 1);
    libNtve_gf_AttachModelToUnit(UnitFromId(708), "ShapeArrowPointer", "Ref_Overhead");
    ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetTeamColor(libNtve_gf_ConvertPlayerColorToColor(gf_ColorID_To_Color(gv_syn.lv_roleAstaroth)), libNtve_gf_ConvertPlayerColorToColor(gf_ColorID_To_Color(gv_syn.lv_roleAstaroth))));
    gv_cinematic.lv_cinematicActors[lv_i] = libNtve_gf_ActorLastCreated();
    lv_i = (lv_i + 1);
    autoED391648_g = UnitGroup("Fallen", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoED391648_u = UnitGroupCount(autoED391648_g, c_unitCountAll);
    for (;; autoED391648_u -= 1) {
        autoED391648_var = UnitGroupUnitFromEnd(autoED391648_g, autoED391648_u);
        if (autoED391648_var == null) { break; }
        libNtve_gf_AttachModelToUnit(autoED391648_var, "ShapeArrowPointer2", "Ref_Overhead");
        ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetTeamColor(libNtve_gf_ConvertPlayerColorToColor(gf_ColorID_To_Color(gv_syn.lv_roleAstaroth)), libNtve_gf_ConvertPlayerColorToColor(gf_ColorID_To_Color(gv_syn.lv_roleAstaroth))));
        gv_cinematic.lv_cinematicActors[lv_i] = libNtve_gf_ActorLastCreated();
        lv_i = (lv_i + 1);
    }
    autoF8339246_g = UnitGroup("Roach2", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoF8339246_u = UnitGroupCount(autoF8339246_g, c_unitCountAll);
    for (;; autoF8339246_u -= 1) {
        autoF8339246_var = UnitGroupUnitFromEnd(autoF8339246_g, autoF8339246_u);
        if (autoF8339246_var == null) { break; }
        libNtve_gf_AttachModelToUnit(autoF8339246_var, "ShapeArrowPointer2", "Ref_Overhead");
        ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetTeamColor(libNtve_gf_ConvertPlayerColorToColor(gf_ColorID_To_Color(gv_syn.lv_roleAstaroth)), libNtve_gf_ConvertPlayerColorToColor(gf_ColorID_To_Color(gv_syn.lv_roleAstaroth))));
        gv_cinematic.lv_cinematicActors[lv_i] = libNtve_gf_ActorLastCreated();
        lv_i = (lv_i + 1);
    }
    auto550533A1_g = UnitGroup("HunterKiller", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto550533A1_u = UnitGroupCount(auto550533A1_g, c_unitCountAll);
    for (;; auto550533A1_u -= 1) {
        auto550533A1_var = UnitGroupUnitFromEnd(auto550533A1_g, auto550533A1_u);
        if (auto550533A1_var == null) { break; }
        libNtve_gf_AttachModelToUnit(auto550533A1_var, "ShapeArrowPointer2", "Ref_Overhead");
        ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetTeamColor(libNtve_gf_ConvertPlayerColorToColor(gf_ColorID_To_Color(gv_syn.lv_roleAstaroth)), libNtve_gf_ConvertPlayerColorToColor(gf_ColorID_To_Color(gv_syn.lv_roleAstaroth))));
        gv_cinematic.lv_cinematicActors[lv_i] = libNtve_gf_ActorLastCreated();
        lv_i = (lv_i + 1);
    }
    libNtve_gf_SetDialogItemText(gv_cinematic.lv_cinematicTextLabel, StringExternal("Param/Value/88C7FCDB"), PlayerGroupAll());
    auto7AB4F962_g = PlayerGroupAll();
    auto7AB4F962_var = -1;
    while (true) {
        auto7AB4F962_var = PlayerGroupNextPlayer(auto7AB4F962_g, auto7AB4F962_var);
        if (auto7AB4F962_var < 0) { break; }
        libNtve_gf_SwooshCamera(auto7AB4F962_var, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + -5.0), ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 30.0), CameraGetTarget(auto7AB4F962_var), 2.3333);
    }
    Wait(2.6667, c_timeGame);
    auto93C1F712_g = UnitCargoGroup(gv_gameData.lv_nydusAsta);
    auto93C1F712_u = UnitGroupCount(auto93C1F712_g, c_unitCountAll);
    for (;; auto93C1F712_u -= 1) {
        auto93C1F712_var = UnitGroupUnitFromEnd(auto93C1F712_g, auto93C1F712_u);
        if (auto93C1F712_var == null) { break; }
        UnitSetState(auto93C1F712_var, c_unitStateSelectable, false);
        UnitSetTeamColorIndex(auto93C1F712_var, gf_ColorID_To_Color(gv_syn.lv_roleAstaroth));
    }
    UnitIssueOrder(gv_gameData.lv_nydusAsta, Order(AbilityCommand("NydusCanalTransport", 1)), c_orderQueueReplace);
    Wait(3.3333, c_timeGame);
    auto60CDA856_var = 0;
    for ( ; auto60CDA856_var <= auto60CDA856_ae; auto60CDA856_var += 1 ) {
        libNtve_gf_KillModel(gv_cinematic.lv_cinematicActors[auto60CDA856_var]);
    }
    auto7F428693_g = PlayerGroupAll();
    auto7F428693_var = -1;
    while (true) {
        auto7F428693_var = PlayerGroupNextPlayer(auto7F428693_g, auto7F428693_var);
        if (auto7F428693_var < 0) { break; }
        libNtve_gf_SwooshCamera(auto7F428693_var, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 30.0), ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + -5.0), CameraGetTarget(auto7F428693_var), 2.3333);
        CameraPan(auto7F428693_var, PointFromId(921), 1.3333, -1, 10.0, false);
    }
    libNtve_gf_SetDialogItemText(gv_cinematic.lv_cinematicTextLabel, StringExternal("Param/Value/B3370DD9"), PlayerGroupAll());
    libNtve_gf_AttachModelToUnit(UnitFromId(729), "ShapeArrowPointer2", "Ref_Overhead");
    ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetTeamColor(libNtve_gf_ConvertPlayerColorToColor(gf_ColorID_To_Color(gv_syn.lv_roleMichael)), libNtve_gf_ConvertPlayerColorToColor(gf_ColorID_To_Color(gv_syn.lv_roleMichael))));
    gv_cinematic.lv_cinematicActors[0] = libNtve_gf_ActorLastCreated();
    Wait(6.6667, c_timeGame);
    libNtve_gf_KillModel(gv_cinematic.lv_cinematicActors[0]);
    autoFA134B54_g = PlayerGroupAll();
    autoFA134B54_var = -1;
    while (true) {
        autoFA134B54_var = PlayerGroupNextPlayer(autoFA134B54_g, autoFA134B54_var);
        if (autoFA134B54_var < 0) { break; }
        libNtve_gf_SwooshCamera(autoFA134B54_var, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + -5.0), ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 30.0), CameraGetTarget(autoFA134B54_var), 1.6667);
        CameraPan(autoFA134B54_var, PointFromId(922), 1.25, -1, 10.0, false);
    }
    libNtve_gf_SetDialogItemText(gv_cinematic.lv_cinematicTextLabel, StringExternal("Param/Value/03040C89"), PlayerGroupAll());
    Wait(2.3333, c_timeGame);
    auto9329867C_g = PlayerGroupAll();
    auto9329867C_var = -1;
    while (true) {
        auto9329867C_var = PlayerGroupNextPlayer(auto9329867C_g, auto9329867C_var);
        if (auto9329867C_var < 0) { break; }
        libNtve_gf_SwooshCamera(auto9329867C_var, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 30.0), ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 60.0), CameraGetTarget(auto9329867C_var), 2.3333);
        CameraPan(auto9329867C_var, PointFromId(923), 1.5, -1, 10.0, false);
    }
    Wait(2.3333, c_timeGame);
    auto5AB0F9D5_g = PlayerGroupAll();
    auto5AB0F9D5_var = -1;
    while (true) {
        auto5AB0F9D5_var = PlayerGroupNextPlayer(auto5AB0F9D5_g, auto5AB0F9D5_var);
        if (auto5AB0F9D5_var < 0) { break; }
        CameraPan(auto5AB0F9D5_var, PointFromId(924), 1.6667, -1, 10.0, false);
    }
    Wait(3.3333, c_timeGame);
    auto1A3715C0_g = PlayerGroupAll();
    auto1A3715C0_var = -1;
    while (true) {
        auto1A3715C0_var = PlayerGroupNextPlayer(auto1A3715C0_g, auto1A3715C0_var);
        if (auto1A3715C0_var < 0) { break; }
        CameraPan(auto1A3715C0_var, PointFromId(926), 6.0, -1, 10.0, false);
    }
    Wait(3.3333, c_timeGame);
    libNtve_gf_SetDialogItemText(gv_cinematic.lv_cinematicTextLabel, StringExternal("Param/Value/CB04294E"), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCinematic_Init () {
    gt_IntroCinematic = TriggerCreate("gt_IntroCinematic_Func");
    TriggerEnable(gt_IntroCinematic, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cinematic Text Tags
//--------------------------------------------------------------------------------------------------
bool gt_CinematicTextTags_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TextTagCreate(StringExternal("Param/Value/81E7CAEA"), 24, UnitGetPosition(gv_gameData.lv_nydusAsta), 1.0, true, false, PlayerGroupAll());
    gv_cinematic.lv_cinematicTags[lv_i] = TextTagLastCreated();
    lv_i += 1;
    TextTagCreate(StringExternal("Param/Value/9D75E98F"), 24, UnitGetPosition(UnitFromId(785)), 1.0, true, false, PlayerGroupAll());
    gv_cinematic.lv_cinematicTags[lv_i] = TextTagLastCreated();
    lv_i += 1;
    TextTagCreate(StringExternal("Param/Value/4520754E"), 24, UnitGetPosition(UnitFromId(488)), 1.0, true, false, PlayerGroupAll());
    gv_cinematic.lv_cinematicTags[lv_i] = TextTagLastCreated();
    lv_i += 1;
    TextTagCreate(StringExternal("Param/Value/7C7D7BF3"), 24, UnitGetPosition(UnitFromId(157)), 1.0, true, false, PlayerGroupAll());
    gv_cinematic.lv_cinematicTags[lv_i] = TextTagLastCreated();
    lv_i += 1;
    TextTagCreate(StringExternal("Param/Value/3EB83A1A"), 24, UnitGetPosition(UnitFromId(30)), 1.0, true, false, PlayerGroupAll());
    gv_cinematic.lv_cinematicTags[lv_i] = TextTagLastCreated();
    lv_i += 1;
    TextTagCreate(StringExternal("Param/Value/B223EA46"), 24, UnitGetPosition(UnitFromId(158)), 1.0, true, false, PlayerGroupAll());
    gv_cinematic.lv_cinematicTags[lv_i] = TextTagLastCreated();
    lv_i += 1;
    TextTagCreate(StringExternal("Param/Value/09EE8212"), 36, UnitGetPosition(UnitFromId(487)), 1.0, true, false, PlayerGroupAll());
    gv_cinematic.lv_cinematicTags[lv_i] = TextTagLastCreated();
    lv_i += 1;
    TextTagCreate(StringExternal("Param/Value/2A19CB06"), 36, UnitGetPosition(UnitFromId(486)), 1.0, true, false, PlayerGroupAll());
    gv_cinematic.lv_cinematicTags[lv_i] = TextTagLastCreated();
    lv_i += 1;
    TextTagCreate(StringExternal("Param/Value/E4E2C3C6"), 30, UnitGetPosition(UnitFromId(22)), 1.0, true, false, PlayerGroupAll());
    TextTagAttachToUnit(TextTagLastCreated(), UnitFromId(22), 5.0);
    gv_cinematic.lv_cinematicTags[lv_i] = TextTagLastCreated();
    lv_i += 1;
    TextTagCreate(StringExternal("Param/Value/DF9F5CC1"), 30, UnitGetPosition(UnitFromId(47)), 1.0, true, false, PlayerGroupAll());
    TextTagAttachToUnit(TextTagLastCreated(), UnitFromId(47), 5.0);
    gv_cinematic.lv_cinematicTags[lv_i] = TextTagLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CinematicTextTags_Init () {
    gt_CinematicTextTags = TriggerCreate("gt_CinematicTextTags_Func");
    TriggerEnable(gt_CinematicTextTags, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cleanup Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_CleanupCinematic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto9C9BDD43_ae = 9;
    int auto9C9BDD43_var;
    unitgroup auto0A5F7F41_g;
    int auto0A5F7F41_u;
    unit auto0A5F7F41_var;
    unitgroup autoEE32BF09_g;
    int autoEE32BF09_u;
    unit autoEE32BF09_var;
    unitgroup auto31FB49CA_g;
    int auto31FB49CA_u;
    unit auto31FB49CA_var;
    unitgroup auto4BD5BDB4_g;
    int auto4BD5BDB4_u;
    unit auto4BD5BDB4_var;
    unitgroup auto4951F0F8_g;
    int auto4951F0F8_u;
    unit auto4951F0F8_var;
    const int auto72727A9F_ae = 50;
    int auto72727A9F_var;
    playergroup autoA1DFEB79_g;
    int autoA1DFEB79_var;

    // Actions
    if (!runActions) {
        return true;
    }

    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeHeroPanel, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeConsolePanel, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMinimapPanel, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeCommandPanel, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeConsolePanel, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeControlGroupPanel, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMissionTimePanel, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeStatusUI, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeIdleWorkerButton, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeArmyButton, true);
    DialogControlSetPosition(gv_roleSelect.lv_gENERALMenuUIPanel, PlayerGroupAll(), c_anchorBottomRight, 0, 267);
    DialogControlSetPosition(gv_roleSelect.lv_gENERALChatInput, PlayerGroupAll(), c_anchorBottom, 0, 280);
    DialogControlSetPosition(gv_roleSelect.lv_gENERALChatDisplay, PlayerGroupAll(), c_anchorBottom, 0, 380);
    auto9C9BDD43_var = 0;
    for ( ; auto9C9BDD43_var <= auto9C9BDD43_ae; auto9C9BDD43_var += 1 ) {
        TextTagDestroy(gv_cinematic.lv_cinematicTags[auto9C9BDD43_var]);
    }
    UnitSetPosition(UnitFromId(729), PointFromId(698), false);
    auto0A5F7F41_g = gv_cinematic.lv_cinematicUnits;
    auto0A5F7F41_u = UnitGroupCount(auto0A5F7F41_g, c_unitCountAll);
    for (;; auto0A5F7F41_u -= 1) {
        auto0A5F7F41_var = UnitGroupUnitFromEnd(auto0A5F7F41_g, auto0A5F7F41_u);
        if (auto0A5F7F41_var == null) { break; }
        UnitRemove(auto0A5F7F41_var);
    }
    autoEE32BF09_g = UnitGroup("Roach", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    autoEE32BF09_u = UnitGroupCount(autoEE32BF09_g, c_unitCountAll);
    for (;; autoEE32BF09_u -= 1) {
        autoEE32BF09_var = UnitGroupUnitFromEnd(autoEE32BF09_g, autoEE32BF09_u);
        if (autoEE32BF09_var == null) { break; }
        UnitRemove(autoEE32BF09_var);
    }
    auto31FB49CA_g = UnitGroup("Hydralisk", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto31FB49CA_u = UnitGroupCount(auto31FB49CA_g, c_unitCountAll);
    for (;; auto31FB49CA_u -= 1) {
        auto31FB49CA_var = UnitGroupUnitFromEnd(auto31FB49CA_g, auto31FB49CA_u);
        if (auto31FB49CA_var == null) { break; }
        UnitRemove(auto31FB49CA_var);
    }
    auto4BD5BDB4_g = UnitGroup("Zergling", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto4BD5BDB4_u = UnitGroupCount(auto4BD5BDB4_g, c_unitCountAll);
    for (;; auto4BD5BDB4_u -= 1) {
        auto4BD5BDB4_var = UnitGroupUnitFromEnd(auto4BD5BDB4_g, auto4BD5BDB4_u);
        if (auto4BD5BDB4_var == null) { break; }
        UnitRemove(auto4BD5BDB4_var);
    }
    auto4951F0F8_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto4951F0F8_u = UnitGroupCount(auto4951F0F8_g, c_unitCountAll);
    for (;; auto4951F0F8_u -= 1) {
        auto4951F0F8_var = UnitGroupUnitFromEnd(auto4951F0F8_g, auto4951F0F8_u);
        if (auto4951F0F8_var == null) { break; }
        UnitSetPropertyFixed(auto4951F0F8_var, c_unitPropLifePercent, 100.0);
        UnitSetPropertyFixed(auto4951F0F8_var, c_unitPropShieldsPercent, 100.0);
    }
    auto72727A9F_var = 0;
    for ( ; auto72727A9F_var <= auto72727A9F_ae; auto72727A9F_var += 1 ) {
        libNtve_gf_KillModel(gv_cinematic.lv_cinematicActors[auto72727A9F_var]);
    }
    DialogSetVisible(gv_cinematic.lv_cinematicTextDialog, PlayerGroupAll(), false);
    CameraSetData(PlayerGroupAll(), "Dflt");
    autoA1DFEB79_g = PlayerGroupAll();
    autoA1DFEB79_var = -1;
    while (true) {
        autoA1DFEB79_var = PlayerGroupNextPlayer(autoA1DFEB79_g, autoA1DFEB79_var);
        if (autoA1DFEB79_var < 0) { break; }
        libNtve_gf_SwooshCamera(autoA1DFEB79_var, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 110.0), ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 0.0), CameraGetTarget(autoA1DFEB79_var), 1.75);
        CameraSetValue(autoA1DFEB79_var, c_cameraValueFieldOfView, 35.0, 1.75, -1, 10.0);
        CameraSetValue(autoA1DFEB79_var, c_cameraValuePitch, 59.0, 1.75, -1, 10.0);
        CameraLockInput(autoA1DFEB79_var, false);
    }
    TriggerStop(gt_IntroCinematic);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CleanupCinematic_Init () {
    gt_CleanupCinematic = TriggerCreate("gt_CleanupCinematic_Func");
    TriggerEnable(gt_CleanupCinematic, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: [Duck]Role Selector Dialog  V2
//--------------------------------------------------------------------------------------------------
bool gt_DuckRoleSelectorDialogV2_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    int lv_i;
    int lv_j;
    int lv_cycle;
    int lv_previousLabel;
    int lv_previousLabel2;
    int lv_previousButton;
    int lv_previousButtonIconHover;
    int lv_previousIcon;
    int lv_previousRank;
    int lv_previousRoleLabelBackground;
    int lv_previousWaringSign;
    int lv_distance;
    string[12] lv_icons;
    string[12] lv_names;
    text[12] lv_tooltips;
    fixed lv_fade;
    int lv_loop;

    // Automatic Variable Declarations
    int auto3E49838D_ae;
    const int auto3E49838D_ai = 1;

    // Variable Initialization
    lv_cycle = 1;
    lv_previousLabel = c_invalidDialogControlId;
    lv_previousLabel2 = c_invalidDialogControlId;
    lv_previousButton = c_invalidDialogControlId;
    lv_previousButtonIconHover = c_invalidDialogControlId;
    lv_previousIcon = c_invalidDialogControlId;
    lv_previousRank = c_invalidDialogControlId;
    lv_previousRoleLabelBackground = c_invalidDialogControlId;
    lv_previousWaringSign = c_invalidDialogControlId;
    lv_distance = 65;
    for (init_i = 0; init_i <= 11; init_i += 1) {
        lv_names[init_i] = "";
    }
    lv_fade = 55.0;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_DuckRankTable, true, true);
    lv_icons[1] = "Assets\\Textures\\btn-unit-terran-battlecruiserloki.dds";
    lv_names[1] = "The Messiah";
    lv_tooltips[1] = StringExternal("Param/Value/B26BFE1A");
    lv_icons[2] = "Assets\\Textures\\btn-unit-terran-hellionmercenary.dds";
    lv_names[2] = "Uriel";
    lv_tooltips[2] = StringExternal("Param/Value/3CAAA117");
    lv_icons[3] = "Assets\\Textures\\btn-unit-terran-marinemercenary.dds";
    lv_names[3] = "Michael";
    lv_tooltips[3] = StringExternal("Param/Value/B345517F");
    lv_icons[4] = "Assets\\Textures\\btn-unit-terran-nova.dds";
    lv_names[4] = "Seraphiel";
    lv_tooltips[4] = StringExternal("Param/Value/AFF893F8");
    lv_icons[5] = "Assets\\Textures\\btn-unit-protoss-prisonzealot.dds";
    lv_names[5] = "Jehoel";
    lv_tooltips[5] = StringExternal("Param/Value/2ECEC571");
    lv_icons[6] = "Assets\\Textures\\btn-unit-protoss-darktemplar.dds";
    lv_names[6] = "Zadkiel";
    lv_tooltips[6] = StringExternal("Param/Value/2803CFA4");
    lv_icons[7] = "Assets\\Textures\\btn-unit-zerg-mutalisk.dds";
    lv_names[7] = "The Devil";
    lv_tooltips[7] = StringExternal("Param/Value/6E7C8A9B");
    lv_icons[8] = "Assets\\Textures\\btn-unit-terran-odin.dds";
    lv_names[8] = "Asmodeus";
    lv_tooltips[8] = StringExternal("Param/Value/243B2FCC");
    lv_icons[9] = "Assets\\Textures\\btn-unit-zerg-hydralisk.dds";
    lv_names[9] = "Astaroth";
    lv_tooltips[9] = StringExternal("Param/Value/727A2FA1");
    lv_icons[10] = "Assets\\Textures\\btn-unit-protoss-stalker-dark.dds";
    lv_names[10] = "Moloch";
    lv_tooltips[10] = StringExternal("Param/Value/ED160996");
    lv_icons[11] = "Assets\\Textures\\ui_ingame_help_techtree_questionmark.dds";
    lv_names[11] = "Random";
    lv_tooltips[11] = StringToText("");
    DialogCreate(800, 900, c_anchorBottomLeft, 0, 0, true);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    gv_roleSelect.lv_dialog = DialogLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 800, 900, c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\ui_observer_custom_map_container.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 10.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 800, 900, c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\ui_ingame_tabbutton_metalframe.dds", c_triggerImageTypeBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemDesaturated(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 400, 80, c_anchorTop, 0, 20, StringExternal("Param/Value/572DDA44"), Color(100,100,100), false, 2.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 60, 60, c_anchorTopLeft, 30, 50, StringToText(""), lv_icons[1], c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, lv_fade);
    libNtve_gf_SetDialogItemDesaturated(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 513, PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), lv_tooltips[lv_cycle], PlayerGroupAll());
    lv_previousIcon = DialogControlLastCreated();
    gv_roleSelect.lv_roleIcon[lv_cycle] = DialogControlLastCreated();
    gf_DuckRoleSelectorSubRankIconTemplateRole(90, 68, lv_cycle, DialogLastCreated());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 210, 50, c_anchorTopLeft, 110, 60, StringToText(""), "Assets\\Textures\\ui_battlenet_challenge_frame_glowstroke.dds", c_triggerImageTypeEndCap, false, Color(100,100,100), c_triggerBlendModeNormal);
    lv_previousRoleLabelBackground = DialogControlLastCreated();
    gv_roleSelect.lv_roleLabelBackground[lv_cycle] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 60, c_anchorTopLeft, 130, 60, StringToText(lv_names[lv_cycle]), Color(149*100/255,150*100/255,151*100/255), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModLeftSize24Bold", PlayerGroupAll());
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, lv_fade);
    libNtve_gf_SetDialogItemDesaturated(DialogControlLastCreated(), true, PlayerGroupAll());
    lv_previousLabel = DialogControlLastCreated();
    gv_roleSelect.lv_roleLabelDefault[lv_cycle] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 60, c_anchorTopLeft, 130, 60, StringExternal("Param/Value/F3AD80A2"), Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModLeftSize20Bold", PlayerGroupAll());
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    lv_previousLabel2 = DialogControlLastCreated();
    gv_roleSelect.lv_roleLabelAssigned[lv_cycle] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 180, 80, c_anchorTopLeft, 130, 50, StringToText(""), StringToText(lv_names[0]), "Assets\\Textures\\black.dds");
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModLeftSize24Bold", PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\black.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 513, PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), lv_tooltips[lv_cycle], PlayerGroupAll());
    gv_roleSelect.lv_roleButton[lv_cycle] = DialogControlLastCreated();
    lv_previousButton = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 60, 60, c_anchorTopLeft, 30, 50, StringToText(""), StringToText(lv_names[0]), "Assets\\Textures\\black.dds");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\black.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 513, PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), lv_tooltips[lv_cycle], PlayerGroupAll());
    lv_previousButtonIconHover = DialogControlLastCreated();
    gv_roleSelect.lv_roleButtonIconHover[lv_cycle] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 60, 45, c_anchorTopLeft, 0, 0, StringToText(""), "Assets\\Textures\\ui_glues_helpmenu_achievementicon.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 40.0);
    libNtve_gf_SetDialogItemDesaturated(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_SetDialogItemDesaturationColor(DialogControlLastCreated(), Color(78*100/255,42*100/255,4*100/255), PlayerGroupAll());
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_roleSelect.lv_roleRating[0][lv_cycle], c_anchorCenter, 0, 0);
    lv_cycle = 2;
    while ((lv_cycle <= 11)) {
        if ((lv_cycle == 7)) {
            lv_distance += 20;
        }

        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), DialogControlGetWidth(lv_previousIcon, 0), DialogControlGetHeight(lv_previousIcon, 0), c_anchorTopLeft, DialogControlGetOffsetX(lv_previousIcon, 0), (DialogControlGetOffsetY(lv_previousIcon, 0)+lv_distance), StringToText(""), lv_icons[lv_cycle], c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, lv_fade);
        libNtve_gf_SetDialogItemDesaturated(DialogControlLastCreated(), true, PlayerGroupAll());
        libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 513, PlayerGroupAll());
        libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), lv_tooltips[lv_cycle], PlayerGroupAll());
        lv_previousIcon = DialogControlLastCreated();
        gv_roleSelect.lv_roleIcon[lv_cycle] = DialogControlLastCreated();
        gf_DuckRoleSelectorSubRankIconTemplateRole(DialogControlGetOffsetX(gv_roleSelect.lv_roleRating[0][(lv_cycle-1)], 0), (DialogControlGetOffsetY(gv_roleSelect.lv_roleRating[0][(lv_cycle-1)], 0)+lv_distance), lv_cycle, DialogLastCreated());
        if (((lv_cycle == 1) || (lv_cycle == 7) || (lv_cycle == 8) || (lv_cycle == 9))) {
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 60, 45, c_anchorTopLeft, 0, 0, StringToText(""), "Assets\\Textures\\ui_glues_helpmenu_achievementicon.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 40.0);
            libNtve_gf_SetDialogItemDesaturated(DialogControlLastCreated(), true, PlayerGroupAll());
            libNtve_gf_SetDialogItemDesaturationColor(DialogControlLastCreated(), Color(78*100/255,42*100/255,4*100/255), PlayerGroupAll());
            DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_roleSelect.lv_roleRating[0][lv_cycle], c_anchorCenter, 0, 0);
        }
        else {
            if (((lv_cycle == 6) || (lv_cycle == 10))) {
                libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 60, 45, c_anchorTopLeft, 0, 0, StringToText(""), "Assets\\Textures\\ui_glues_helpmenu_achievementicon.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 60.0);
                libNtve_gf_SetDialogItemDesaturated(DialogControlLastCreated(), true, PlayerGroupAll());
                libNtve_gf_SetDialogItemDesaturationColor(DialogControlLastCreated(), Color(149*100/255,150*100/255,151*100/255), PlayerGroupAll());
                DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_roleSelect.lv_roleRating[0][lv_cycle], c_anchorCenter, 0, 0);
                DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
            }

        }
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), DialogControlGetWidth(lv_previousRoleLabelBackground, 0), DialogControlGetHeight(lv_previousRoleLabelBackground, 0), c_anchorTopLeft, DialogControlGetOffsetX(lv_previousRoleLabelBackground, 0), (DialogControlGetOffsetY(lv_previousRoleLabelBackground, 0)+lv_distance), StringToText(""), (libNtve_gf_DialogItemImage(lv_previousRoleLabelBackground, 0)), libNtve_gf_DialogItemImageType(lv_previousRoleLabelBackground, 0), false, Color(100,100,100), c_triggerBlendModeNormal);
        lv_previousRoleLabelBackground = DialogControlLastCreated();
        gv_roleSelect.lv_roleLabelBackground[lv_cycle] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), DialogControlGetWidth(lv_previousLabel, 0), DialogControlGetHeight(lv_previousLabel, 0), c_anchorTopLeft, DialogControlGetOffsetX(lv_previousLabel, 0), (DialogControlGetOffsetY(lv_previousLabel, 0)+lv_distance), StringToText(lv_names[lv_cycle]), libNtve_gf_DialogItemColor(lv_previousLabel, 0), false, 2.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), libNtve_gf_DialogItemStyle(lv_previousLabel, 0), PlayerGroupAll());
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, lv_fade);
        libNtve_gf_SetDialogItemDesaturated(DialogControlLastCreated(), true, PlayerGroupAll());
        lv_previousLabel = DialogControlLastCreated();
        gv_roleSelect.lv_roleLabelDefault[lv_cycle] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), DialogControlGetWidth(lv_previousLabel2, 0), DialogControlGetHeight(lv_previousLabel2, 0), c_anchorTopLeft, DialogControlGetOffsetX(lv_previousLabel2, 0), (DialogControlGetOffsetY(lv_previousLabel2, 0)+lv_distance), StringExternal("Param/Value/6BE3F459"), libNtve_gf_DialogItemColor(lv_previousLabel2, 0), false, 2.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), libNtve_gf_DialogItemStyle(lv_previousLabel2, 0), PlayerGroupAll());
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        lv_previousLabel2 = DialogControlLastCreated();
        gv_roleSelect.lv_roleLabelAssigned[lv_cycle] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), DialogControlGetWidth(lv_previousButton, 0), DialogControlGetHeight(lv_previousButton, 0), c_anchorTopLeft, DialogControlGetOffsetX(lv_previousButton, 0), (DialogControlGetOffsetY(lv_previousButton, 0)+lv_distance), StringToText(""), StringToText(lv_names[0]), "Assets\\Textures\\black.dds");
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), libNtve_gf_DialogItemStyle(lv_previousButton, 0), PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), (libNtve_gf_DialogItemImage(lv_previousButton, 0)), PlayerGroupAll());
        libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 513, PlayerGroupAll());
        libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), lv_tooltips[lv_cycle], PlayerGroupAll());
        lv_previousButton = DialogControlLastCreated();
        gv_roleSelect.lv_roleButton[lv_cycle] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), DialogControlGetWidth(lv_previousButtonIconHover, 0), DialogControlGetHeight(lv_previousButtonIconHover, 0), c_anchorTopLeft, DialogControlGetOffsetX(lv_previousButtonIconHover, 0), (DialogControlGetOffsetY(lv_previousButtonIconHover, 0)+lv_distance), StringToText(""), StringToText(lv_names[0]), "Assets\\Textures\\black.dds");
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), (libNtve_gf_DialogItemImage(lv_previousButtonIconHover, 0)), PlayerGroupAll());
        libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 513, PlayerGroupAll());
        libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), lv_tooltips[lv_cycle], PlayerGroupAll());
        lv_previousButtonIconHover = DialogControlLastCreated();
        gv_roleSelect.lv_roleButtonIconHover[lv_cycle] = DialogControlLastCreated();
        if ((lv_cycle == 7)) {
            lv_distance -= 20;
        }

        lv_cycle += 1;
    }
    libNtve_gf_SetDialogItemColor(gv_roleSelect.lv_roleLabelBackground[1], Color(28*100/255,167*100/255,234*100/255), PlayerGroupAll());
    libNtve_gf_SetDialogItemColor(gv_roleSelect.lv_roleLabelBackground[2], Color(28*100/255,167*100/255,234*100/255), PlayerGroupAll());
    libNtve_gf_SetDialogItemColor(gv_roleSelect.lv_roleLabelBackground[3], Color(28*100/255,167*100/255,234*100/255), PlayerGroupAll());
    libNtve_gf_SetDialogItemColor(gv_roleSelect.lv_roleLabelBackground[4], Color(28*100/255,167*100/255,234*100/255), PlayerGroupAll());
    libNtve_gf_SetDialogItemColor(gv_roleSelect.lv_roleLabelBackground[5], Color(28*100/255,167*100/255,234*100/255), PlayerGroupAll());
    libNtve_gf_SetDialogItemColor(gv_roleSelect.lv_roleLabelBackground[6], Color(28*100/255,167*100/255,234*100/255), PlayerGroupAll());
    libNtve_gf_SetDialogItemColor(gv_roleSelect.lv_roleLabelBackground[7], Color(254*100/255,138*100/255,14*100/255), PlayerGroupAll());
    libNtve_gf_SetDialogItemColor(gv_roleSelect.lv_roleLabelBackground[8], Color(254*100/255,138*100/255,14*100/255), PlayerGroupAll());
    libNtve_gf_SetDialogItemColor(gv_roleSelect.lv_roleLabelBackground[9], Color(254*100/255,138*100/255,14*100/255), PlayerGroupAll());
    libNtve_gf_SetDialogItemColor(gv_roleSelect.lv_roleLabelBackground[10], Color(254*100/255,138*100/255,14*100/255), PlayerGroupAll());
    libNtve_gf_SetDialogItemColor(gv_roleSelect.lv_roleLabelDefault[11], Color(100,100,100), PlayerGroupAll());
    libNtve_gf_SetDialogItemDesaturated(gv_roleSelect.lv_roleIcon[11], false, PlayerGroupAll());
    libNtve_gf_SetDialogItemDesaturated(gv_roleSelect.lv_roleLabelDefault[11], false, PlayerGroupAll());
    DialogControlFadeTransparency(gv_roleSelect.lv_roleIcon[11], PlayerGroupAll(), 0.0, 0.0);
    DialogControlFadeTransparency(gv_roleSelect.lv_roleLabelDefault[11], PlayerGroupAll(), 0.0, 0.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 260, 820, c_anchorTopLeft, 520, 50, StringToText(""), "Assets\\Textures\\ui_battlenet_glue_frame_blueinnercontainerframe.dds", c_triggerImageTypeHorizontalBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 25.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 250, 80, c_anchorTopLeft, 530, 60, StringExternal("Param/Value/3FDF481E"), Color(149*100/255,150*100/255,151*100/255), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize24Bold", PlayerGroupAll());
    lv_cycle = 1;
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 260, 740, c_anchorTopLeft, 520, 130, StringToText(""), "Assets\\Textures\\ui_battlenet_glue_frame_blueinnercontainerframe.dds", c_triggerImageTypeHorizontalBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 60, c_anchorTopLeft, 560, 140, PlayerName(lv_cycle), Color(100,100,100), false, 2.0);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize20Bold", PlayerGroupAll());
    gv_roleSelect.lv_playerNameLabel[lv_cycle] = DialogControlLastCreated();
    lv_previousLabel = DialogControlLastCreated();
    gf_DuckRoleSelectorSubRankIconTemplateName(530, 145, lv_cycle, DialogLastCreated());
    lv_cycle = 2;
    lv_distance = 55;
    while ((lv_cycle <= 13)) {
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), DialogControlGetWidth(lv_previousLabel, 0), DialogControlGetHeight(lv_previousLabel, 0), c_anchorTopLeft, DialogControlGetOffsetX(lv_previousLabel, 0), (DialogControlGetOffsetY(lv_previousLabel, 0)+lv_distance), PlayerName(lv_cycle), libNtve_gf_DialogItemColor(lv_previousLabel, 0), false, 2.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), libNtve_gf_DialogItemStyle(lv_previousLabel, 0), PlayerGroupAll());
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        lv_previousLabel = DialogControlLastCreated();
        gv_roleSelect.lv_playerNameLabel[lv_cycle] = DialogControlLastCreated();
        gf_DuckRoleSelectorSubRankIconTemplateName(DialogControlGetOffsetX(gv_roleSelect.lv_playerNameRatingLabel[0][(lv_cycle-1)], 0), (DialogControlGetOffsetY(gv_roleSelect.lv_playerNameRatingLabel[0][(lv_cycle-1)], 0)+lv_distance), lv_cycle, DialogLastCreated());
        lv_cycle += 1;
    }
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 165, 55, c_anchorBottomLeft, 30, 40, StringToText(""), StringExternal("Param/Value/ACE0604D"), "Assets\\Textures\\ui_battlenet_glue_minibutton_blue_normaloverpressedover.dds");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_battlenet_glue_minibutton_blue_normalpressed.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeNormal, PlayerGroupAll());
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize20Bold", PlayerGroupAll());
    gv_roleSelect.lv_confirmButton = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 165, 55, c_anchorBottom, -45, 40, StringToText(""), StringExternal("Param/Value/EB491BD1"), "Assets\\Textures\\ui_battlenet_glue_minibutton_blue_normaloverpressedover.dds");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_battlenet_glue_minibutton_blue_normalpressed.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeNormal, PlayerGroupAll());
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize20Bold", PlayerGroupAll());
    gv_roleSelect.lv_observeButton = DialogControlLastCreated();
    if ((GameAttributeGameValue("2") == "0001")) {
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    }

    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 500, 50, c_anchorBottomLeft, 55, 0, StringExternal("Param/Value/97FE2B73"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModLeftSize16Bold", PlayerGroupAll());
    gv_roleSelect.lv_countdownLabel = DialogControlLastCreated();
    gf_DuckRoleSelectorPutPlayerstoLobbyRoles();
    gf_DuckRoleSelectPhaseCountdown();
    gf_CreatePushButton(gv_syn.lv_roleMessiah);
    gf_CreatePushButton(gv_syn.lv_roleZadkiel);
    gf_CreatePushButton(gv_syn.lv_roleDevil);
    gf_CreatePushButton(gv_syn.lv_roleAsmodeus);
    gf_CreatePushButton(gv_syn.lv_roleAstaroth);
    gf_CreatePushButton(gv_syn.lv_roleMoloch);
    DialogControlSetEnabled(gv_roleSelect.lv_pushButton[gv_syn.lv_pushButtonMessiah], gf_PlayerswithStarCount(0), false);
    DialogControlSetEnabled(gv_roleSelect.lv_pushButton[gv_syn.lv_pushButtonMessiah], gf_PlayerswithStarCount(1), false);
    DialogControlSetEnabled(gv_roleSelect.lv_pushButton[gv_syn.lv_pushButtonDevil], gf_PlayerswithStarCount(0), false);
    DialogControlSetEnabled(gv_roleSelect.lv_pushButton[gv_syn.lv_pushButtonDevil], gf_PlayerswithStarCount(1), false);
    DialogControlSetEnabled(gv_roleSelect.lv_pushButton[gv_syn.lv_pushButtonAsmodeus], gf_PlayerswithStarCount(0), false);
    DialogControlSetEnabled(gv_roleSelect.lv_pushButton[gv_syn.lv_pushButtonAsmodeus], gf_PlayerswithStarCount(1), false);
    DialogControlSetEnabled(gv_roleSelect.lv_pushButton[gv_syn.lv_pushButtonAstaroth], gf_PlayerswithStarCount(0), false);
    DialogControlSetEnabled(gv_roleSelect.lv_pushButton[gv_syn.lv_pushButtonAstaroth], gf_PlayerswithStarCount(1), false);
    DialogControlSetEnabled(gv_roleSelect.lv_pushButton[gv_syn.lv_pushButtonZadkiel], gf_PlayerswithStarCount(2), false);
    DialogControlSetEnabled(gv_roleSelect.lv_pushButton[gv_syn.lv_pushButtonZadkiel], gf_PlayerswithStarCount(3), false);
    DialogControlSetEnabled(gv_roleSelect.lv_pushButton[gv_syn.lv_pushButtonZadkiel], gf_PlayerswithStarCount(4), false);
    DialogControlSetEnabled(gv_roleSelect.lv_pushButton[gv_syn.lv_pushButtonZadkiel], gf_PlayerswithStarCount(5), false);
    DialogControlSetEnabled(gv_roleSelect.lv_pushButton[gv_syn.lv_pushButtonZadkiel], gf_PlayerswithStarCount(6), false);
    DialogControlSetEnabled(gv_roleSelect.lv_pushButton[gv_syn.lv_pushButtonMoloch], gf_PlayerswithStarCount(2), false);
    DialogControlSetEnabled(gv_roleSelect.lv_pushButton[gv_syn.lv_pushButtonMoloch], gf_PlayerswithStarCount(3), false);
    DialogControlSetEnabled(gv_roleSelect.lv_pushButton[gv_syn.lv_pushButtonMoloch], gf_PlayerswithStarCount(4), false);
    DialogControlSetEnabled(gv_roleSelect.lv_pushButton[gv_syn.lv_pushButtonMoloch], gf_PlayerswithStarCount(5), false);
    DialogControlSetEnabled(gv_roleSelect.lv_pushButton[gv_syn.lv_pushButtonMoloch], gf_PlayerswithStarCount(6), false);
    auto3E49838D_ae = PlayerGroupCount(PlayerGroupActive());
    lv_j = 1;
    for ( ; ( (auto3E49838D_ai >= 0 && lv_j <= auto3E49838D_ae) || (auto3E49838D_ai < 0 && lv_j >= auto3E49838D_ae) ) ; lv_j += auto3E49838D_ai ) {
        if ((gv_roleSelect.lv_gENERALPlayerRating[lv_j] == 0)) {
            PlayerGroupAdd(gv_gameData.lv_pushCommandNoobs, lv_j);
        }

    }
    DialogCreate(600, 135, c_anchorRight, 0, 0, true);
    DialogSetTitle(DialogLastCreated(), StringExternal("Param/Value/B5C6CDD4"));
    DialogSetVisible(DialogLastCreated(), gv_gameData.lv_pushCommandNoobs, true);
    gv_gameData.lv_pushCommandTooltip = DialogLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DuckRoleSelectorDialogV2_Init () {
    gt_DuckRoleSelectorDialogV2 = TriggerCreate("gt_DuckRoleSelectorDialogV2_Func");
    TriggerEnable(gt_DuckRoleSelectorDialogV2, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: [Duck] Role Selector: Select Slot/PressConfirm/PressObserve
//--------------------------------------------------------------------------------------------------
bool gt_DuckRoleSelectorSelectSlotPressConfirmPressObserve_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_cycle;

    // Automatic Variable Declarations
    playergroup autoB092B34D_g;
    int autoB092B34D_var;
    playergroup auto18177F00_g;
    int auto18177F00_var;

    // Variable Initialization
    lv_cycle = 1;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventDialogControl() == gv_roleSelect.lv_confirmButton)) {
        if ((gv_roleSelect.lv_playerReady[EventPlayer()] == false)) {
            gv_roleSelect.lv_playerReady[EventPlayer()] = true;
            libNtve_gf_SetDialogItemText(gv_roleSelect.lv_confirmButton, StringExternal("Param/Value/6E7410B7"), PlayerGroupSingle(EventPlayer()));
        }
        else {
            gv_roleSelect.lv_playerReady[EventPlayer()] = false;
            libNtve_gf_SetDialogItemText(gv_roleSelect.lv_confirmButton, StringExternal("Param/Value/E07CC5A9"), PlayerGroupSingle(EventPlayer()));
        }
        lv_cycle = gv_roleSelect.lv_gENERALPlayerRoles[EventPlayer()];
        gf_DuckRoleSelectorClearRole(EventPlayer(), lv_cycle);
        gf_DuckRoleSelectorAssignPlayertoRole(EventPlayer(), lv_cycle);
        auto18177F00_g = PlayerGroupActive();
        auto18177F00_var = -1;
        while (true) {
            auto18177F00_var = PlayerGroupNextPlayer(auto18177F00_g, auto18177F00_var);
            if (auto18177F00_var < 0) { break; }
            if ((gv_roleSelect.lv_playerReady[auto18177F00_var] != true)) {
                return true;
            }

        }
        gf_DuckRoleSelectorFinishFuseSystemData();
        return true;
    }
    else {
        if ((EventDialogControl() == gv_roleSelect.lv_observeButton)) {
            lv_cycle = gv_roleSelect.lv_gENERALPlayerRoles[EventPlayer()];
            if ((lv_cycle == 12)) {
                gf_DuckRoleSelectorClearRole(EventPlayer(), lv_cycle);
                gf_DuckRoleSelectorAssignPlayertoRole(EventPlayer(), 11);
            }
            else {
                gf_DuckRoleSelectorClearRole(EventPlayer(), lv_cycle);
                gf_DuckRoleSelectorAssignPlayertoRole(EventPlayer(), 12);
                autoB092B34D_g = PlayerGroupActive();
                autoB092B34D_var = -1;
                while (true) {
                    autoB092B34D_var = PlayerGroupNextPlayer(autoB092B34D_g, autoB092B34D_var);
                    if (autoB092B34D_var < 0) { break; }
                    if ((gv_roleSelect.lv_playerReady[autoB092B34D_var] != true)) {
                        return true;
                    }

                }
                gf_DuckRoleSelectorFinishFuseSystemData();
            }
            return true;
        }

    }
    while ((lv_cycle <= 11)) {
        if (((EventDialogControl() == gv_roleSelect.lv_roleButton[lv_cycle]) || (EventDialogControl() == gv_roleSelect.lv_roleButtonIconHover[lv_cycle])) && (gv_roleSelect.lv_roleTakenStatus[lv_cycle] == 0) && (gv_roleSelect.lv_gENERALPlayerRoles[EventPlayer()] != lv_cycle)) {
            gf_DuckRoleSelectorClearRole(EventPlayer(), gv_roleSelect.lv_gENERALPlayerRoles[EventPlayer()]);
            gf_DuckRoleSelectorAssignPlayertoRole(EventPlayer(), lv_cycle);
            libNtve_gf_SetDialogItemText(gv_roleSelect.lv_observeButton, StringExternal("Param/Value/782D3CDD"), PlayerGroupSingle(EventPlayer()));
            return true;
        }

        lv_cycle += 1;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DuckRoleSelectorSelectSlotPressConfirmPressObserve_Init () {
    gt_DuckRoleSelectorSelectSlotPressConfirmPressObserve = TriggerCreate("gt_DuckRoleSelectorSelectSlotPressConfirmPressObserve_Func");
    TriggerAddEventDialogControl(gt_DuckRoleSelectorSelectSlotPressConfirmPressObserve, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: [Duck] RoleSelector: Highlight Icons
//--------------------------------------------------------------------------------------------------
bool gt_DuckRoleSelectorHighlightIcons_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_cycle;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_cycle = 1;

    // Actions
    if (!runActions) {
        return true;
    }

    while ((EventDialogControlEventType() == c_triggerControlEventTypeMouseEnter) && (lv_cycle <= 10)) {
        if (((gv_roleSelect.lv_roleButton[lv_cycle] == EventDialogControl()) || (gv_roleSelect.lv_roleButtonIconHover[lv_cycle] == EventDialogControl())) && (gv_roleSelect.lv_roleTakenStatus[lv_cycle] == 0)) {
            libNtve_gf_SetDialogItemDesaturated(gv_roleSelect.lv_roleIcon[lv_cycle], false, PlayerGroupSingle(EventPlayer()));
            DialogControlFadeTransparency(gv_roleSelect.lv_roleLabelDefault[lv_cycle], PlayerGroupSingle(EventPlayer()), 0.0, 0.0);
            libNtve_gf_SetDialogItemColor(gv_roleSelect.lv_roleLabelDefault[lv_cycle], Color(100,100,100), PlayerGroupSingle(EventPlayer()));
        }

        lv_cycle += 1;
    }
    while ((EventDialogControlEventType() == c_triggerControlEventTypeMouseExit) && (lv_cycle <= 10)) {
        if (((gv_roleSelect.lv_roleButton[lv_cycle] == EventDialogControl()) || (gv_roleSelect.lv_roleButtonIconHover[lv_cycle] == EventDialogControl())) && (gv_roleSelect.lv_roleTakenStatus[lv_cycle] == 0)) {
            libNtve_gf_SetDialogItemDesaturated(gv_roleSelect.lv_roleIcon[lv_cycle], true, PlayerGroupSingle(EventPlayer()));
            DialogControlFadeTransparency(gv_roleSelect.lv_roleLabelDefault[lv_cycle], PlayerGroupSingle(EventPlayer()), 0.0, 55.0);
            libNtve_gf_SetDialogItemColor(gv_roleSelect.lv_roleLabelDefault[lv_cycle], Color(149*100/255,150*100/255,151*100/255), PlayerGroupSingle(EventPlayer()));
        }

        lv_cycle += 1;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DuckRoleSelectorHighlightIcons_Init () {
    gt_DuckRoleSelectorHighlightIcons = TriggerCreate("gt_DuckRoleSelectorHighlightIcons_Func");
    TriggerAddEventDialogControl(gt_DuckRoleSelectorHighlightIcons, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeMouseEnter);
    TriggerAddEventDialogControl(gt_DuckRoleSelectorHighlightIcons, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeMouseExit);
}

//--------------------------------------------------------------------------------------------------
// Trigger: [Duck] Rank Table
//--------------------------------------------------------------------------------------------------
bool gt_DuckRankTable_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_role;
    int lv_total;
    int lv_wins;
    text lv_rank;
    bool lv_veteranCheck;
    bool lv_masterCheck;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = 1;
    lv_veteranCheck = true;
    lv_masterCheck = true;

    // Actions
    if (!runActions) {
        return true;
    }

    while ((lv_player <= 10)) {
        lv_role = 0;
        lv_total = 0;
        lv_wins = 0;
        lv_veteranCheck = true;
        lv_masterCheck = true;
        lv_rank = StringExternal("Param/Value/A700DC06");
        gv_roleSelect.lv_playerNoobPushPower[lv_player] = 1;
        while ((lv_role <= 9)) {
            if ((gv_banks.lv_wins[lv_player][lv_role] < 35)) {
                lv_masterCheck = false;
            }

            if ((gv_banks.lv_gamesStarted[lv_player][lv_role] < 15) && (gv_banks.lv_wins[lv_player][lv_role] < 5)) {
                lv_veteranCheck = false;
            }

            lv_total += gv_banks.lv_gamesStarted[lv_player][lv_role];
            lv_wins += gv_banks.lv_wins[lv_player][lv_role];
            lv_role += 1;
        }
        if (((lv_total >= 5) || (lv_wins >= 1))) {
            lv_rank = StringExternal("Param/Value/2094B6A9");
            gv_roleSelect.lv_gENERALPlayerRating[lv_player] = 1;
            gv_roleSelect.lv_playerPushPower[lv_player] = 1;
            gv_roleSelect.lv_playerNoobPushPower[lv_player] = 1;
            gv_roleSelect.lv_playerCanBePushed[lv_player] = false;
        }

        if (((lv_total >= 100) || (lv_wins >= 40))) {
            lv_rank = StringExternal("Param/Value/73BBF0EB");
            gv_roleSelect.lv_gENERALPlayerRating[lv_player] = 2;
            gv_roleSelect.lv_playerPushPower[lv_player] = 1;
            gv_roleSelect.lv_playerNoobPushPower[lv_player] = 0;
            gv_roleSelect.lv_playerCanBePushed[lv_player] = false;
        }

        if (((lv_wins >= 200) || (lv_veteranCheck == true))) {
            lv_rank = StringExternal("Param/Value/CF1F9D3E");
            gv_roleSelect.lv_gENERALPlayerRating[lv_player] = 3;
            gv_roleSelect.lv_playerPushPower[lv_player] = 1;
            gv_roleSelect.lv_playerNoobPushPower[lv_player] = 0;
            gv_roleSelect.lv_playerCanBePushed[lv_player] = false;
        }

        if ((lv_masterCheck == true)) {
            lv_rank = StringExternal("Param/Value/5DBB28C4");
            gv_roleSelect.lv_gENERALPlayerRating[lv_player] = 4;
            gv_roleSelect.lv_playerPushPower[lv_player] = 1;
            gv_roleSelect.lv_playerNoobPushPower[lv_player] = 0;
            gv_roleSelect.lv_playerCanBePushed[lv_player] = false;
        }

        if ((gf_CheckAdminList(lv_player) == true)) {
            lv_rank = StringExternal("Param/Value/2EFFD922");
            gv_roleSelect.lv_gENERALPlayerRating[lv_player] = 5;
            gv_roleSelect.lv_playerPushPower[lv_player] = 1;
            gv_roleSelect.lv_playerNoobPushPower[lv_player] = 0;
            gv_roleSelect.lv_playerCanBePushed[lv_player] = false;
        }

        if ((gf_ScrubList(lv_player) == true)) {
            lv_rank = StringExternal("Param/Value/B93857F7");
            gv_roleSelect.lv_gENERALPlayerRating[lv_player] = 6;
            gv_roleSelect.lv_playerPushPower[lv_player] = 1;
            gv_roleSelect.lv_playerNoobPushPower[lv_player] = 0;
            gv_roleSelect.lv_playerCanBePushed[lv_player] = false;
        }

        TextExpressionSetToken("Param/Expression/01753DC0", "A", lv_rank);
        TextExpressionSetToken("Param/Expression/01753DC0", "B", IntToText(lv_total));
        TextExpressionSetToken("Param/Expression/01753DC0", "C", IntToText(lv_wins));
        gv_roleSelect.lv_ratingText[lv_player] = TextExpressionAssemble("Param/Expression/01753DC0");
        lv_player += 1;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DuckRankTable_Init () {
    gt_DuckRankTable = TriggerCreate("gt_DuckRankTable_Func");
    TriggerEnable(gt_DuckRankTable, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: [Duck] Player Leaves During Selection
//--------------------------------------------------------------------------------------------------
bool gt_DuckPlayerLeavesDuringSelection_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_roleSelect.lv_roleSelectDone == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_DuckRoleSelectorClearRole(EventPlayer(), gv_roleSelect.lv_gENERALPlayerRoles[EventPlayer()]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DuckPlayerLeavesDuringSelection_Init () {
    gt_DuckPlayerLeavesDuringSelection = TriggerCreate("gt_DuckPlayerLeavesDuringSelection_Func");
    TriggerAddEventPlayerLeft(gt_DuckPlayerLeavesDuringSelection, c_playerAny, c_gameResultUndecided);
}

//--------------------------------------------------------------------------------------------------
// Trigger: [DP] Push Buttons 3
//--------------------------------------------------------------------------------------------------
bool gt_DPPushButtons3_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_pushingPlayer;
    int lv_contendedRole;
    int lv_playertoBePushed;
    int lv_pushTimeAllowed;

    // Automatic Variable Declarations
    int auto758F44F1_val;
    playergroup autoA2DF73B6_g;
    int autoA2DF73B6_var;

    // Variable Initialization
    lv_pushingPlayer = EventPlayer();
    lv_playertoBePushed = -1;
    lv_pushTimeAllowed = 10;

    // Conditions
    if (testConds) {
        if (!((gv_roleSelect.lv_duration >= lv_pushTimeAllowed))) {
            return false;
        }

        if (!((gv_roleSelect.lv_roleSelectDone == false))) {
            return false;
        }

        if (!(((EventDialogControl() == gv_roleSelect.lv_pushButton[0]) || (EventDialogControl() == gv_roleSelect.lv_pushButton[1]) || (EventDialogControl() == gv_roleSelect.lv_pushButton[2]) || (EventDialogControl() == gv_roleSelect.lv_pushButton[3]) || (EventDialogControl() == gv_roleSelect.lv_pushButton[4]) || (EventDialogControl() == gv_roleSelect.lv_pushButton[5]) || (EventDialogControl() == gv_roleSelect.lv_pushButton[6])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto758F44F1_val = EventDialogControl();
    if (auto758F44F1_val == gv_roleSelect.lv_pushButton[gv_syn.lv_pushButtonMessiah]) {
        lv_contendedRole = gf_DuckGetRoleIdFromLobby("0001");
    }
    else if (auto758F44F1_val == gv_roleSelect.lv_pushButton[gv_syn.lv_pushButtonJehoel]) {
        lv_contendedRole = gf_DuckGetRoleIdFromLobby("0005");
    }
    else if (auto758F44F1_val == gv_roleSelect.lv_pushButton[gv_syn.lv_pushButtonZadkiel]) {
        lv_contendedRole = gf_DuckGetRoleIdFromLobby("0006");
    }
    else if (auto758F44F1_val == gv_roleSelect.lv_pushButton[gv_syn.lv_pushButtonDevil]) {
        lv_contendedRole = gf_DuckGetRoleIdFromLobby("0007");
    }
    else if (auto758F44F1_val == gv_roleSelect.lv_pushButton[gv_syn.lv_pushButtonAsmodeus]) {
        lv_contendedRole = gf_DuckGetRoleIdFromLobby("0008");
    }
    else if (auto758F44F1_val == gv_roleSelect.lv_pushButton[gv_syn.lv_pushButtonAstaroth]) {
        lv_contendedRole = gf_DuckGetRoleIdFromLobby("0009");
    }
    else if (auto758F44F1_val == gv_roleSelect.lv_pushButton[gv_syn.lv_pushButtonMoloch]) {
        lv_contendedRole = gf_DuckGetRoleIdFromLobby("0010");
    }
    else {
        return true;
    }
    autoA2DF73B6_g = PlayerGroupActive();
    autoA2DF73B6_var = -1;
    while (true) {
        autoA2DF73B6_var = PlayerGroupNextPlayer(autoA2DF73B6_g, autoA2DF73B6_var);
        if (autoA2DF73B6_var < 0) { break; }
        if ((gv_roleSelect.lv_gENERALPlayerRoles[autoA2DF73B6_var] == lv_contendedRole)) {
            lv_playertoBePushed = autoA2DF73B6_var;
        }

    }
    if ((lv_playertoBePushed == lv_pushingPlayer)) {
        UIDisplayMessage(PlayerGroupSingle(lv_pushingPlayer), c_messageAreaSubtitle, StringExternal("Param/Value/1587A11D"));
        return true;
    }

    if ((lv_playertoBePushed == -1)) {
        gf_DuckRoleSelectorClearRole(lv_pushingPlayer, gv_roleSelect.lv_gENERALPlayerRoles[lv_pushingPlayer]);
        gf_DuckRoleSelectorAssignPlayertoRole(lv_pushingPlayer, lv_contendedRole);
        UIDisplayMessage(PlayerGroupSingle(lv_pushingPlayer), c_messageAreaSubtitle, StringExternal("Param/Value/1C3DE80D"));
        return true;
    }

    if ((((gv_roleSelect.lv_gENERALPlayerRating[lv_pushingPlayer] == 0) && ((gv_roleSelect.lv_gENERALPlayerRating[lv_playertoBePushed] != 0) && (gv_roleSelect.lv_gENERALPlayerRating[lv_playertoBePushed] != 1)) && ((lv_contendedRole == gf_DuckGetRoleIdFromLobby("0006")) || (lv_contendedRole == gf_DuckGetRoleIdFromLobby("0010")))) || ((gv_roleSelect.lv_gENERALPlayerRating[lv_pushingPlayer] == 1) && (gv_roleSelect.lv_gENERALPlayerRating[lv_playertoBePushed] == 2) && ((lv_contendedRole == gf_DuckGetRoleIdFromLobby("0006")) || (lv_contendedRole == gf_DuckGetRoleIdFromLobby("0010")))) || ((gv_roleSelect.lv_gENERALPlayerRating[lv_pushingPlayer] == 2) && (gv_roleSelect.lv_gENERALPlayerRating[lv_playertoBePushed] == 0) && ((lv_contendedRole == gf_DuckGetRoleIdFromLobby("0008")) || (lv_contendedRole == gf_DuckGetRoleIdFromLobby("0009")) || (lv_contendedRole == gf_DuckGetRoleIdFromLobby("0007")) || (lv_contendedRole == gf_DuckGetRoleIdFromLobby("0001")))) || ((gv_roleSelect.lv_gENERALPlayerRating[lv_pushingPlayer] > 2) && (gv_roleSelect.lv_gENERALPlayerRating[lv_playertoBePushed] <= 2) && ((lv_contendedRole == gf_DuckGetRoleIdFromLobby("0008")) || (lv_contendedRole == gf_DuckGetRoleIdFromLobby("0009")) || (lv_contendedRole == gf_DuckGetRoleIdFromLobby("0007")) || (lv_contendedRole == gf_DuckGetRoleIdFromLobby("0001")))))) {
        TextExpressionSetToken("Param/Expression/172B48F3", "A", PlayerName(lv_pushingPlayer));
        TextExpressionSetToken("Param/Expression/172B48F3", "B", PlayerName(lv_playertoBePushed));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/172B48F3"));
        gf_DuckRoleSelectorClearRole(lv_playertoBePushed, gv_roleSelect.lv_gENERALPlayerRoles[lv_playertoBePushed]);
        gf_DuckRoleSelectorAssignPlayertoRole(lv_playertoBePushed, 11);
        gf_DuckRoleSelectorClearRole(lv_pushingPlayer, gv_roleSelect.lv_gENERALPlayerRoles[lv_pushingPlayer]);
        gf_DuckRoleSelectorAssignPlayertoRole(lv_pushingPlayer, lv_contendedRole);
        DialogControlSetEnabled(gv_roleSelect.lv_pushButton[gv_syn.lv_pushButtonMessiah], PlayerGroupSingle(lv_pushingPlayer), false);
        DialogControlSetEnabled(gv_roleSelect.lv_pushButton[gv_syn.lv_pushButtonZadkiel], PlayerGroupSingle(lv_pushingPlayer), false);
        DialogControlSetEnabled(gv_roleSelect.lv_pushButton[gv_syn.lv_pushButtonDevil], PlayerGroupSingle(lv_pushingPlayer), false);
        DialogControlSetEnabled(gv_roleSelect.lv_pushButton[gv_syn.lv_pushButtonAsmodeus], PlayerGroupSingle(lv_pushingPlayer), false);
        DialogControlSetEnabled(gv_roleSelect.lv_pushButton[gv_syn.lv_pushButtonAstaroth], PlayerGroupSingle(lv_pushingPlayer), false);
        DialogControlSetEnabled(gv_roleSelect.lv_pushButton[gv_syn.lv_pushButtonMoloch], PlayerGroupSingle(lv_pushingPlayer), false);
        lv_pushTimeAllowed -= 2;
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(lv_pushingPlayer), c_messageAreaSubtitle, StringExternal("Param/Value/AF2E71FA"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DPPushButtons3_Init () {
    gt_DPPushButtons3 = TriggerCreate("gt_DPPushButtons3_Func");
    TriggerAddEventDialogControl(gt_DPPushButtons3, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CCG Dialogs
//--------------------------------------------------------------------------------------------------
bool gt_CCGDialogs_Func (bool testConds, bool runActions) {
    int init_i;
    int init_j;

    // Variable Declarations
    const int lv_width = 800;
    string[11][10] lv_names;
    string[11][10] lv_icons;
    int lv_role;
    int lv_choice;
    int lv_index;
    const int lv_choiceYOffset = 70;
    const int lv_choiceXOffset = 20;
    const int lv_choiceWidth = 250;
    const int lv_choiceHeight = 50;
    const int lv_choiceSeparationCoefficient = 50;
    const int lv_choiceIconSize = 50;
    const int lv_choiceIconXOffset = 10;
    const int lv_choiceButtonWidth = 160;
    const int lv_choiceButtonHeight = 50;
    int lv_choiceButtonXOffset;
    const int lv_roleButtonWidth = 160;
    const int lv_roleButtonHeight = 35;
    const int lv_roleSeparationCoefficient = 40;
    int lv_groupXOffset;
    const int lv_groupButtonSize = 40;
    const int lv_groupSeparationCoefficient = 45;
    const int lv_selectionYOffset = 10;
    const int lv_selectionWidth = 400;
    const int lv_selectionHeight = 80;

    // Automatic Variable Declarations
    const int auto699D1DBC_ae = 4;
    const int auto699D1DBC_ai = 1;
    const int autoB6C1F89A_ae = 8;
    const int autoB6C1F89A_ai = 1;
    const int auto7F9BB449_ae = 9;
    const int auto7F9BB449_ai = 1;
    const int auto095E9862_ae = 8;
    const int auto095E9862_ai = 1;
    const int autoD2F805BE_ae = 10;
    const int autoD2F805BE_ai = 1;
    const int autoBC21DE24_ae = 13;
    const int autoBC21DE24_ai = 1;
    const int auto28F4C4B0_ae = 8;
    const int auto28F4C4B0_ai = 1;

    // Variable Initialization
    for (init_i = 0; init_i <= 10; init_i += 1) {
        for (init_j = 0; init_j <= 9; init_j += 1) {
            lv_names[init_i][init_j] = "";
        }
    }
    lv_choiceButtonXOffset = ((lv_choiceIconSize + lv_choiceIconXOffset) + (lv_choiceWidth + (lv_choiceXOffset + 20)));
    lv_groupXOffset = ((lv_choiceXOffset + lv_roleButtonWidth) + 35);

    // Actions
    if (!runActions) {
        return true;
    }

    lv_role = 0;
    for ( ; ( (auto699D1DBC_ai >= 0 && lv_role <= auto699D1DBC_ae) || (auto699D1DBC_ai < 0 && lv_role >= auto699D1DBC_ae) ) ; lv_role += auto699D1DBC_ai ) {
        lv_choice = 6;
        lv_icons[lv_role][lv_choice] = "Assets\\Textures\\btn-building-protoss-photoncannon.dds";
        lv_names[lv_role][lv_choice] = "Static Defense";
        lv_choice = 7;
        lv_icons[lv_role][lv_choice] = "Assets\\Textures\\btn-unit-terran-ghost.dds";
        lv_names[lv_role][lv_choice] = "Angels";
        lv_choice = 8;
        lv_icons[lv_role][lv_choice] = "Assets\\Textures\\btn-building-protoss-roboticssupportbay.dds";
        lv_names[lv_role][lv_choice] = "Throne of Heaven";
    }
    lv_role = 6;
    for ( ; ( (autoB6C1F89A_ai >= 0 && lv_role <= autoB6C1F89A_ae) || (autoB6C1F89A_ai < 0 && lv_role >= autoB6C1F89A_ae) ) ; lv_role += autoB6C1F89A_ai ) {
        lv_choice = 6;
        lv_icons[lv_role][lv_choice] = "Assets\\Textures\\btn-building-zerg-nydusworm.dds";
        lv_names[lv_role][lv_choice] = "Portal";
        lv_choice = 7;
        lv_icons[lv_role][lv_choice] = "Assets\\Textures\\btn-unit-zerg-overseer.dds";
        lv_names[lv_role][lv_choice] = "Grigori";
        lv_choice = 8;
        lv_icons[lv_role][lv_choice] = "Assets\\Textures\\btn-building-zerg-nydusnetwork.dds";
        lv_names[lv_role][lv_choice] = "Gate to Hell";
    }
    lv_role = gv_syn.lv_roleMessiah;
    lv_choice = 0;
    lv_icons[lv_role][lv_choice] = "Assets\\Textures\\btn-unit-terran-battlecruiserloki.dds";
    lv_names[lv_role][lv_choice] = "The Messiah";
    lv_choice = 1;
    lv_icons[lv_role][lv_choice] = "Assets\\Textures\\btn-unit-protoss-tassadar.dds";
    lv_names[lv_role][lv_choice] = "Gabriel";
    lv_choice = 2;
    lv_icons[lv_role][lv_choice] = "Assets\\Textures\\btn-unit-protoss-sentry.dds";
    lv_names[lv_role][lv_choice] = "Duma";
    lv_choice = 3;
    lv_icons[lv_role][lv_choice] = "Assets\\Textures\\btn-unit-terran-spectre.dds";
    lv_names[lv_role][lv_choice] = "Saints";
    lv_choice = 4;
    lv_icons[lv_role][lv_choice] = "Assets\\Textures\\btn-unit-terran-thor.dds";
    lv_names[lv_role][lv_choice] = "Chariots";
    lv_choice = 5;
    lv_icons[lv_role][lv_choice] = "Assets\\Textures\\btn-unit-terran-predator.dds";
    lv_names[lv_role][lv_choice] = "Thorns";
    lv_role = gv_syn.lv_roleMichael;
    lv_choice = 0;
    lv_icons[lv_role][lv_choice] = "Assets\\Textures\\btn-unit-terran-marinemercenary.dds";
    lv_names[lv_role][lv_choice] = "Michael";
    lv_choice = 1;
    lv_icons[lv_role][lv_choice] = "Assets\\Textures\\btn-unit-terran-medivac.dds";
    lv_names[lv_role][lv_choice] = "Raphael";
    lv_choice = 2;
    lv_icons[lv_role][lv_choice] = "Assets\\Textures\\btn-unit-terran-marine.dds";
    lv_names[lv_role][lv_choice] = "Warrior Angels";
    lv_choice = 3;
    lv_icons[lv_role][lv_choice] = "Assets\\Textures\\btn-unit-terran-firebat.dds";
    lv_names[lv_role][lv_choice] = "Principalities";
    lv_role = gv_syn.lv_roleUriel;
    lv_choice = 0;
    lv_icons[lv_role][lv_choice] = "Assets\\Textures\\btn-unit-terran-hellionmercenary.dds";
    lv_names[lv_role][lv_choice] = "Uriel";
    lv_choice = 1;
    lv_icons[lv_role][lv_choice] = "Assets\\Textures\\btn-unit-terran-reapermercenary.dds";
    lv_names[lv_role][lv_choice] = "Donatello";
    lv_choice = 2;
    lv_icons[lv_role][lv_choice] = "Assets\\Textures\\btn-unit-terran-goliath.dds";
    lv_names[lv_role][lv_choice] = "Dominions";
    lv_choice = 3;
    lv_icons[lv_role][lv_choice] = "Assets\\Textures\\btn-unit-terran-reaper.dds";
    lv_names[lv_role][lv_choice] = "Angels of Death";
    lv_role = gv_syn.lv_roleJehoel;
    lv_choice = 0;
    lv_icons[lv_role][lv_choice] = "Assets\\Textures\\btn-unit-protoss-prisonzealot.dds";
    lv_names[lv_role][lv_choice] = "Jehoel";
    lv_choice = 1;
    lv_icons[lv_role][lv_choice] = "Assets\\Textures\\btn-unit-protoss-archon.dds";
    lv_names[lv_role][lv_choice] = "Metatron";
    lv_choice = 2;
    lv_icons[lv_role][lv_choice] = "Assets\\Textures\\btn-unit-terran-diamondback.dds";
    lv_names[lv_role][lv_choice] = "Seraphs";
    lv_choice = 3;
    lv_icons[lv_role][lv_choice] = "Assets\\Textures\\btn-unit-protoss-zealot.dds";
    lv_names[lv_role][lv_choice] = "Powers";
    lv_role = gv_syn.lv_roleSeraphiel;
    lv_choice = 0;
    lv_icons[lv_role][lv_choice] = "Assets\\Textures\\btn-unit-terran-nova.dds";
    lv_names[lv_role][lv_choice] = "Seraphiel";
    lv_choice = 1;
    lv_icons[lv_role][lv_choice] = "Assets\\Textures\\btn-unit-terran-merc-viking.dds";
    lv_names[lv_role][lv_choice] = "Nathaniel";
    lv_choice = 2;
    lv_icons[lv_role][lv_choice] = "Assets\\Textures\\btn-unit-protoss-stalker.dds";
    lv_names[lv_role][lv_choice] = "Virtues";
    lv_choice = 3;
    lv_icons[lv_role][lv_choice] = "Assets\\Textures\\btn-unit-terran-marauder.dds";
    lv_names[lv_role][lv_choice] = "Cherubs";
    lv_role = gv_syn.lv_roleZadkiel;
    lv_choice = 0;
    lv_icons[lv_role][lv_choice] = "Assets\\Textures\\btn-unit-protoss-darktemplar.dds";
    lv_names[lv_role][lv_choice] = "Zadkiel";
    lv_choice = 8;
    lv_icons[lv_role][lv_choice] = "Assets\\Textures\\btn-building-protoss-roboticssupportbay.dds";
    lv_names[lv_role][lv_choice] = "Throne of Heaven";
    lv_role = gv_syn.lv_roleDevil;
    lv_choice = 0;
    lv_icons[lv_role][lv_choice] = "Assets\\Textures\\btn-unit-zerg-mutalisk.dds";
    lv_names[lv_role][lv_choice] = "The Devil";
    lv_choice = 1;
    lv_icons[lv_role][lv_choice] = "Assets\\Textures\\btn-unit-zerg-infestor.dds";
    lv_names[lv_role][lv_choice] = "Beelzebub";
    lv_choice = 2;
    lv_icons[lv_role][lv_choice] = "Assets\\Textures\\btn-unit-zerg-ultralisk.dds";
    lv_names[lv_role][lv_choice] = "Mammon";
    lv_choice = 3;
    lv_icons[lv_role][lv_choice] = "Assets\\Textures\\btn-unit-zerg-ultralisk.dds";
    lv_names[lv_role][lv_choice] = "Behemoths";
    lv_choice = 4;
    lv_icons[lv_role][lv_choice] = "Assets\\Textures\\btn-unit-zerg-brutalisk.dds";
    lv_names[lv_role][lv_choice] = "Harpies";
    lv_choice = 5;
    lv_icons[lv_role][lv_choice] = "Assets\\Textures\\btn-unit-zerg-baneling.dds";
    lv_names[lv_role][lv_choice] = "Tormented Souls";
    lv_role = gv_syn.lv_roleAsmodeus;
    lv_choice = 0;
    lv_icons[lv_role][lv_choice] = "Assets\\Textures\\btn-unit-terran-odin.dds";
    lv_names[lv_role][lv_choice] = "Asmodeus";
    lv_choice = 1;
    lv_icons[lv_role][lv_choice] = "Assets\\Textures\\btn-unit-protoss-hightemplar.dds";
    lv_names[lv_role][lv_choice] = "Sammyazza";
    lv_choice = 2;
    lv_icons[lv_role][lv_choice] = "Assets\\Textures\\btn-unit-zerg-lurker.dds";
    lv_names[lv_role][lv_choice] = "Azazel";
    lv_choice = 3;
    lv_icons[lv_role][lv_choice] = "Assets\\Textures\\btn-unit-protoss-immortal.dds";
    lv_names[lv_role][lv_choice] = "Golems";
    lv_choice = 4;
    lv_icons[lv_role][lv_choice] = "Assets\\Textures\\btn-unit-terran-vikingassault.dds";
    lv_names[lv_role][lv_choice] = "Gargoyles";
    lv_choice = 5;
    lv_icons[lv_role][lv_choice] = "Assets\\Textures\\btn-unit-terran-siegetankmercenary-tank.dds";
    lv_names[lv_role][lv_choice] = "Hellfires";
    lv_role = gv_syn.lv_roleAstaroth;
    lv_choice = 0;
    lv_icons[lv_role][lv_choice] = "Assets\\Textures\\btn-unit-zerg-hydralisk.dds";
    lv_names[lv_role][lv_choice] = "Astaroth";
    lv_choice = 1;
    lv_icons[lv_role][lv_choice] = "Assets\\Textures\\btn-unit-zerg-kerrigan.dds";
    lv_names[lv_role][lv_choice] = "Abaddon";
    lv_choice = 2;
    lv_icons[lv_role][lv_choice] = "Assets\\Textures\\btn-unit-protoss-zeratul.dds";
    lv_names[lv_role][lv_choice] = "Berith";
    lv_choice = 3;
    lv_icons[lv_role][lv_choice] = "Assets\\Textures\\btn-unit-zerg-hydralisk.dds";
    lv_names[lv_role][lv_choice] = "Flayed";
    lv_choice = 4;
    lv_icons[lv_role][lv_choice] = "Assets\\Textures\\btn-unit-zerg-zergling.dds";
    lv_names[lv_role][lv_choice] = "Fallen";
    lv_choice = 5;
    lv_icons[lv_role][lv_choice] = "Assets\\Textures\\btn-unit-zerg-roach.dds";
    lv_names[lv_role][lv_choice] = "Forgotten";
    lv_role = gv_syn.lv_roleMoloch;
    lv_choice = 0;
    lv_icons[lv_role][lv_choice] = "Assets\\Textures\\btn-unit-protoss-stalker-dark.dds";
    lv_names[lv_role][lv_choice] = "Moloch";
    DialogCreate(lv_width, 80, c_anchorTopRight, 20, 20, true);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    gv_cCGData.lv_dialog[1] = DialogLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_width, 80, c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\ui_observer_custom_map_container.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 10.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_width, 80, c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\ui_ingame_tabbutton_metalframe.dds", c_triggerImageTypeBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemDesaturated(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), (lv_width / 2), 80, c_anchorTop, 0, 20, StringExternal("Param/Value/75DF0B65"), Color(100,100,100), false, 2.0);
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 165, 55, c_anchorLeft, 20, 0, StringToText(""), StringExternal("Param/Value/76FEAEE9"), "Assets\\Textures\\ui_battlenet_glue_minibutton_blue_normaloverpressedover.dds");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_battlenet_glue_minibutton_blue_normalpressed.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeNormal, PlayerGroupAll());
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize20Bold", PlayerGroupAll());
    gv_cCGData.lv_toggleBox[1] = DialogControlLastCreated();
    DialogCreate(lv_width, 600, c_anchorTopRight, 20, 20, true);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
    DialogSetImageVisible(DialogLastCreated(), false);
    gv_cCGData.lv_dialog[0] = DialogLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_width, 600, c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\ui_observer_custom_map_container.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 10.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_width, 600, c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\ui_ingame_tabbutton_metalframe.dds", c_triggerImageTypeBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemDesaturated(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), (lv_width / 2), 80, c_anchorTop, 0, 20, StringExternal("Param/Value/5FB63998"), Color(100,100,100), false, 2.0);
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 165, 55, c_anchorBottomLeft, 20, 10, StringToText(""), StringExternal("Param/Value/56BDD356"), "Assets\\Textures\\ui_battlenet_glue_minibutton_blue_normaloverpressedover.dds");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_battlenet_glue_minibutton_blue_normalpressed.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeNormal, PlayerGroupAll());
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize20Bold", PlayerGroupAll());
    gv_cCGData.lv_toggleBox[0] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 165, 55, c_anchorBottomRight, 20, 10, StringToText(""), StringExternal("Param/Value/7FF39B20"), "Assets\\Textures\\ui_battlenet_glue_minibutton_blue_normaloverpressedover.dds");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_battlenet_glue_minibutton_blue_normalpressed.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeNormal, PlayerGroupAll());
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize20Bold", PlayerGroupAll());
    gv_cCGData.lv_save = DialogControlLastCreated();
    lv_role = 0;
    for ( ; ( (auto7F9BB449_ai >= 0 && lv_role <= auto7F9BB449_ae) || (auto7F9BB449_ai < 0 && lv_role >= auto7F9BB449_ae) ) ; lv_role += auto7F9BB449_ai ) {
        lv_choice = 0;
        for ( ; ( (auto095E9862_ai >= 0 && lv_choice <= auto095E9862_ae) || (auto095E9862_ai < 0 && lv_choice >= auto095E9862_ae) ) ; lv_choice += auto095E9862_ai ) {
            if ((lv_icons[lv_role][lv_choice] != null)) {
                libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), lv_choiceWidth, lv_choiceHeight, c_anchorTopRight, (lv_choiceXOffset + 0), (lv_choiceYOffset + (lv_choice * lv_choiceSeparationCoefficient)), StringToText(lv_names[lv_role][lv_choice]), ColorWithAlpha(0,0,0,0), false, 0.0);
                libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeNormal, PlayerGroupAll());
                libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize20Bold", PlayerGroupAll());
                DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
                gv_cCGData.lv_cCGOptionsText[lv_role][lv_choice] = DialogControlLastCreated();
                libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_choiceIconSize, lv_choiceIconSize, c_anchorTopRight, ((lv_choiceXOffset + lv_choiceWidth) + lv_choiceIconXOffset), (lv_choiceYOffset + (lv_choice * lv_choiceSeparationCoefficient)), StringToText(""), lv_icons[lv_role][lv_choice], c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, gv_cCGData.lv_cCGIconFade);
                libNtve_gf_SetDialogItemDesaturated(DialogControlLastCreated(), true, PlayerGroupAll());
                libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 513, PlayerGroupAll());
                DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
                gv_cCGData.lv_cCGOptionsIcons[lv_role][lv_choice] = DialogControlLastCreated();
                libNtve_gf_CreateDialogItemButton(DialogLastCreated(), lv_choiceButtonWidth, lv_choiceButtonHeight, c_anchorTopRight, lv_choiceButtonXOffset, (lv_choiceYOffset + (lv_choice * lv_choiceSeparationCoefficient)), StringToText(""), StringExternal("Param/Value/FA0261A0"), "Assets\\Textures\\ui_battlenet_glue_minibutton_blue_normaloverpressedover.dds");
                libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_battlenet_glue_minibutton_blue_normalpressed.dds", PlayerGroupAll());
                libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeNormal, PlayerGroupAll());
                libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize16", PlayerGroupAll());
                DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
                gv_cCGData.lv_cCGOptionsButtons[lv_role][lv_choice][0] = DialogControlLastCreated();
                libNtve_gf_CreateDialogItemButton(DialogLastCreated(), lv_choiceButtonWidth, lv_choiceButtonHeight, c_anchorTopRight, lv_choiceButtonXOffset, (lv_choiceYOffset + (lv_choice * lv_choiceSeparationCoefficient)), StringToText(""), StringExternal("Param/Value/2614443A"), "Assets\\Textures\\ui_battlenet_glue_minibutton_blue_normaloverpressedover.dds");
                libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_battlenet_glue_minibutton_blue_normalpressed.dds", PlayerGroupAll());
                libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeNormal, PlayerGroupAll());
                libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize16", PlayerGroupAll());
                DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
                gv_cCGData.lv_cCGOptionsButtons[lv_role][lv_choice][1] = DialogControlLastCreated();
            }

        }
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), lv_roleButtonWidth, lv_roleButtonHeight, c_anchorTopLeft, lv_choiceXOffset, (lv_choiceYOffset + (lv_role * lv_roleSeparationCoefficient)), StringToText(""), StringToText(lv_names[lv_role][0]), "Assets\\Textures\\ui_battlenet_glue_minibutton_green_normaloverpressedover.dds");
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_battlenet_glue_minibutton_green_normalpressed.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeNormal, PlayerGroupAll());
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize16", PlayerGroupAll());
        gv_cCGData.lv_cCGRoles[lv_role] = DialogControlLastCreated();
    }
    lv_index = 1;
    for ( ; ( (autoD2F805BE_ai >= 0 && lv_index <= autoD2F805BE_ae) || (autoD2F805BE_ai < 0 && lv_index >= autoD2F805BE_ae) ) ; lv_index += autoD2F805BE_ai ) {
        if ((lv_index == 10)) {
            libNtve_gf_CreateDialogItemButton(DialogLastCreated(), lv_groupButtonSize, lv_groupButtonSize, c_anchorTopLeft, lv_groupXOffset, (lv_choiceYOffset + ((lv_index - 1) * lv_groupSeparationCoefficient)), StringToText(""), IntToText(0), "Assets\\Textures\\ui_gamemenu_menubutton_normaloverpressedover_terran.dds");
            gv_cCGData.lv_cCGGroups[0] = DialogControlLastCreated();
        }
        else {
            libNtve_gf_CreateDialogItemButton(DialogLastCreated(), lv_groupButtonSize, lv_groupButtonSize, c_anchorTopLeft, lv_groupXOffset, (lv_choiceYOffset + ((lv_index - 1) * lv_groupSeparationCoefficient)), StringToText(""), IntToText(lv_index), "Assets\\Textures\\ui_gamemenu_menubutton_normaloverpressedover_terran.dds");
            gv_cCGData.lv_cCGGroups[lv_index] = DialogControlLastCreated();
        }
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_gamemenu_menubutton_normalpressed_terran.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeNormal, PlayerGroupAll());
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize16", PlayerGroupAll());
    }
    lv_index = 0;
    for ( ; ( (autoBC21DE24_ai >= 0 && lv_index <= autoBC21DE24_ae) || (autoBC21DE24_ai < 0 && lv_index >= autoBC21DE24_ae) ) ; lv_index += autoBC21DE24_ai ) {
        TextExpressionSetToken("Param/Expression/53B943E3", "A", StringToText("None"));
        TextExpressionSetToken("Param/Expression/53B943E3", "B", StringToText("None"));
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), lv_selectionWidth, lv_selectionHeight, c_anchorBottom, 0, lv_selectionYOffset, TextExpressionAssemble("Param/Expression/53B943E3"), ColorWithAlpha(0,0,0,0), false, 0.0);
        libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeNormal, PlayerGroupAll());
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize20Bold", PlayerGroupAll());
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(lv_index), true);
        gv_cCGData.lv_selection[lv_index] = DialogControlLastCreated();
    }
    lv_choice = 0;
    for ( ; ( (auto28F4C4B0_ai >= 0 && lv_choice <= auto28F4C4B0_ae) || (auto28F4C4B0_ai < 0 && lv_choice >= auto28F4C4B0_ae) ) ; lv_choice += auto28F4C4B0_ai ) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_choiceWidth - 20), (lv_choiceHeight - 10), c_anchorTopRight, (lv_choiceXOffset + 10), (lv_choiceYOffset + (lv_choice * (lv_choiceSeparationCoefficient + 0))), StringToText(""), "Assets\\Textures\\ui_battlenet_challenge_frame_glowstroke.dds", c_triggerImageTypeEndCap, false, Color(100,100,100), c_triggerBlendModeNormal);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(100,100,100), PlayerGroupAll());
        gv_cCGData.lv_cCGOptionsBackground[lv_choice] = DialogControlLastCreated();
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CCGDialogs_Init () {
    gt_CCGDialogs = TriggerCreate("gt_CCGDialogs_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CCG Toggle
//--------------------------------------------------------------------------------------------------
bool gt_CCGToggle_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_roleSelect.lv_roleSelectDone == false))) {
            return false;
        }

        if (!(((EventDialogControl() == gv_cCGData.lv_toggleBox[0]) || (EventDialogControl() == gv_cCGData.lv_toggleBox[1])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventDialogControl() == gv_cCGData.lv_toggleBox[0])) {
        DialogSetVisible(gv_cCGData.lv_dialog[0], PlayerGroupSingle(EventPlayer()), false);
        DialogSetVisible(gv_cCGData.lv_dialog[1], PlayerGroupSingle(EventPlayer()), true);
    }
    else {
        gf_UpdateCCGDialogs(EventPlayer(), gv_cCGData.lv_selectedRole[EventPlayer()], gv_cCGData.lv_selectedGroup[EventPlayer()]);
        DialogSetVisible(gv_cCGData.lv_dialog[1], PlayerGroupSingle(EventPlayer()), false);
        DialogSetVisible(gv_cCGData.lv_dialog[0], PlayerGroupSingle(EventPlayer()), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CCGToggle_Init () {
    gt_CCGToggle = TriggerCreate("gt_CCGToggle_Func");
    TriggerAddEventDialogControl(gt_CCGToggle, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CCG Use Button
//--------------------------------------------------------------------------------------------------
bool gt_CCGUseButton_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_role;
    int lv_group;
    int lv_choice;
    int lv_i;
    int lv_j;

    // Automatic Variable Declarations
    const int auto49EC40B8_ae = 9;
    const int auto49EC40B8_ai = 1;
    const int auto8B43AFE9_ae = 8;
    const int auto8B43AFE9_ai = 1;
    const int auto4C892AB7_ae = 9;
    const int auto4C892AB7_ai = 1;
    const int autoF4365D6A_ae = 9;
    const int autoF4365D6A_ai = 1;
    const int auto3F143A88_ae = 9;
    const int auto3F143A88_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_roleSelect.lv_roleSelectDone == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_role = 0;
    for ( ; ( (auto49EC40B8_ai >= 0 && lv_role <= auto49EC40B8_ae) || (auto49EC40B8_ai < 0 && lv_role >= auto49EC40B8_ae) ) ; lv_role += auto49EC40B8_ai ) {
        if ((EventDialogControl() == gv_cCGData.lv_cCGRoles[lv_role])) {
            gv_cCGData.lv_selectedRole[EventPlayer()] = lv_role;
            gf_UpdateCCGDialogs(EventPlayer(), gv_cCGData.lv_selectedRole[EventPlayer()], gv_cCGData.lv_selectedGroup[EventPlayer()]);
        }

        lv_choice = 0;
        for ( ; ( (auto8B43AFE9_ai >= 0 && lv_choice <= auto8B43AFE9_ae) || (auto8B43AFE9_ai < 0 && lv_choice >= auto8B43AFE9_ae) ) ; lv_choice += auto8B43AFE9_ai ) {
            if (((EventDialogControl() == gv_cCGData.lv_cCGOptionsButtons[lv_role][lv_choice][0]) || (EventDialogControl() == gv_cCGData.lv_cCGOptionsButtons[lv_role][lv_choice][1]))) {
                if ((EventDialogControl() == gv_cCGData.lv_cCGOptionsButtons[lv_role][lv_choice][0])) {
                    gv_cCGData.lv_savedGroups[EventPlayer()][gv_cCGData.lv_selectedRole[EventPlayer()]][gv_cCGData.lv_selectedGroup[EventPlayer()]] += PowI(2.0, (8 - lv_choice));
                }
                else {
                    gv_cCGData.lv_savedGroups[EventPlayer()][gv_cCGData.lv_selectedRole[EventPlayer()]][gv_cCGData.lv_selectedGroup[EventPlayer()]] -= PowI(2.0, (8 - lv_choice));
                }
                gf_UpdateCCGDialogs(EventPlayer(), gv_cCGData.lv_selectedRole[EventPlayer()], gv_cCGData.lv_selectedGroup[EventPlayer()]);
            }

        }
    }
    lv_group = 0;
    for ( ; ( (auto4C892AB7_ai >= 0 && lv_group <= auto4C892AB7_ae) || (auto4C892AB7_ai < 0 && lv_group >= auto4C892AB7_ae) ) ; lv_group += auto4C892AB7_ai ) {
        if ((EventDialogControl() == gv_cCGData.lv_cCGGroups[lv_group])) {
            gv_cCGData.lv_selectedGroup[EventPlayer()] = lv_group;
            gf_UpdateCCGDialogs(EventPlayer(), gv_cCGData.lv_selectedRole[EventPlayer()], gv_cCGData.lv_selectedGroup[EventPlayer()]);
        }

    }
    if ((EventDialogControl() == gv_cCGData.lv_save)) {
        gf_RefreshCCG(EventPlayer());
        lv_i = 0;
        for ( ; ( (autoF4365D6A_ai >= 0 && lv_i <= autoF4365D6A_ae) || (autoF4365D6A_ai < 0 && lv_i >= autoF4365D6A_ae) ) ; lv_i += autoF4365D6A_ai ) {
            lv_j = 0;
            for ( ; ( (auto3F143A88_ai >= 0 && lv_j <= auto3F143A88_ae) || (auto3F143A88_ai < 0 && lv_j >= auto3F143A88_ae) ) ; lv_j += auto3F143A88_ai ) {
                BankValueSetFromInt(gv_banks.lv_playerBanks[EventPlayer()], "ControlGroups", IntToString((lv_j + (lv_i * 10))), gv_banks.lv_controlGroups[EventPlayer()][lv_i][lv_j]);
            }
        }
        BankSave(gv_banks.lv_playerBanks[EventPlayer()]);
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/764D5AB7"));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CCGUseButton_Init () {
    gt_CCGUseButton = TriggerCreate("gt_CCGUseButton_Func");
    TriggerAddEventDialogControl(gt_CCGUseButton, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ReducedMode
//--------------------------------------------------------------------------------------------------
bool gt_ReducedMode_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto29FC7FFE_g;
    int auto29FC7FFE_u;
    unit auto29FC7FFE_var;
    unitgroup auto07A0F03F_g;
    int auto07A0F03F_u;
    unit auto07A0F03F_var;
    unitgroup auto715AE4EA_g;
    int auto715AE4EA_u;
    unit auto715AE4EA_var;
    unitgroup autoF008F321_g;
    int autoF008F321_u;
    unit autoF008F321_var;
    unitgroup auto5AAF0CB9_g;
    int auto5AAF0CB9_u;
    unit auto5AAF0CB9_var;
    unitgroup auto6D89E52D_g;
    int auto6D89E52D_u;
    unit auto6D89E52D_var;
    unitgroup autoBD02BE58_g;
    int autoBD02BE58_u;
    unit autoBD02BE58_var;
    unitgroup autoA653CF8F_g;
    int autoA653CF8F_u;
    unit autoA653CF8F_var;
    unitgroup auto4E9FE727_g;
    int auto4E9FE727_u;
    unit auto4E9FE727_var;
    unitgroup auto8267C562_g;
    int auto8267C562_u;
    unit auto8267C562_var;
    unitgroup auto8CA7A3F4_g;
    int auto8CA7A3F4_u;
    unit auto8CA7A3F4_var;
    unitgroup autoBE4DCD21_g;
    int autoBE4DCD21_u;
    unit autoBE4DCD21_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto29FC7FFE_g = gv_gameData.lv_rolesUnits[gv_syn.lv_roleJehoel];
    auto29FC7FFE_u = UnitGroupCount(auto29FC7FFE_g, c_unitCountAll);
    for (;; auto29FC7FFE_u -= 1) {
        auto29FC7FFE_var = UnitGroupUnitFromEnd(auto29FC7FFE_g, auto29FC7FFE_u);
        if (auto29FC7FFE_var == null) { break; }
        UnitSetOwner(auto29FC7FFE_var, gv_gameData.lv_rolesOwners[gv_syn.lv_roleMichael], true);
        UnitSetTeamColorIndex(auto29FC7FFE_var, 3);
    }
    auto07A0F03F_g = gv_gameData.lv_rolesUnits[gv_syn.lv_roleSeraphiel];
    auto07A0F03F_u = UnitGroupCount(auto07A0F03F_g, c_unitCountAll);
    for (;; auto07A0F03F_u -= 1) {
        auto07A0F03F_var = UnitGroupUnitFromEnd(auto07A0F03F_g, auto07A0F03F_u);
        if (auto07A0F03F_var == null) { break; }
        UnitSetOwner(auto07A0F03F_var, gv_gameData.lv_rolesOwners[gv_syn.lv_roleUriel], true);
        UnitSetTeamColorIndex(auto07A0F03F_var, 7);
    }
    auto715AE4EA_g = UnitGroup("Metatron", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto715AE4EA_u = UnitGroupCount(auto715AE4EA_g, c_unitCountAll);
    for (;; auto715AE4EA_u -= 1) {
        auto715AE4EA_var = UnitGroupUnitFromEnd(auto715AE4EA_g, auto715AE4EA_u);
        if (auto715AE4EA_var == null) { break; }
        UnitSetOwner(auto715AE4EA_var, gv_gameData.lv_rolesOwners[gv_syn.lv_roleMessiah], true);
        UnitSetTeamColorIndex(auto715AE4EA_var, 0);
    }
    autoF008F321_g = UnitGroup("Nova", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoF008F321_u = UnitGroupCount(autoF008F321_g, c_unitCountAll);
    for (;; autoF008F321_u -= 1) {
        autoF008F321_var = UnitGroupUnitFromEnd(autoF008F321_g, autoF008F321_u);
        if (autoF008F321_var == null) { break; }
        UnitSetOwner(autoF008F321_var, gv_gameData.lv_rolesOwners[gv_syn.lv_roleMessiah], true);
        UnitSetTeamColorIndex(autoF008F321_var, 0);
    }
    auto5AAF0CB9_g = UnitGroup("Stalker2", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto5AAF0CB9_u = UnitGroupCount(auto5AAF0CB9_g, c_unitCountAll);
    for (;; auto5AAF0CB9_u -= 1) {
        auto5AAF0CB9_var = UnitGroupUnitFromEnd(auto5AAF0CB9_g, auto5AAF0CB9_u);
        if (auto5AAF0CB9_var == null) { break; }
        UnitSetOwner(auto5AAF0CB9_var, gv_gameData.lv_rolesOwners[gv_syn.lv_roleMessiah], true);
        UnitSetTeamColorIndex(auto5AAF0CB9_var, 0);
    }
    auto6D89E52D_g = UnitGroup("Diamondback", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto6D89E52D_u = UnitGroupCount(auto6D89E52D_g, c_unitCountAll);
    for (;; auto6D89E52D_u -= 1) {
        auto6D89E52D_var = UnitGroupUnitFromEnd(auto6D89E52D_g, auto6D89E52D_u);
        if (auto6D89E52D_var == null) { break; }
        UnitSetOwner(auto6D89E52D_var, gv_gameData.lv_rolesOwners[gv_syn.lv_roleMessiah], true);
        UnitSetTeamColorIndex(auto6D89E52D_var, 0);
    }
    autoBD02BE58_g = UnitGroup("Spectre", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoBD02BE58_u = UnitGroupCount(autoBD02BE58_g, c_unitCountAll);
    for (;; autoBD02BE58_u -= 1) {
        autoBD02BE58_var = UnitGroupUnitFromEnd(autoBD02BE58_g, autoBD02BE58_u);
        if (autoBD02BE58_var == null) { break; }
        UnitRemove(autoBD02BE58_var);
    }
    autoA653CF8F_g = UnitGroup("Predator", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoA653CF8F_u = UnitGroupCount(autoA653CF8F_g, c_unitCountAll);
    for (;; autoA653CF8F_u -= 1) {
        autoA653CF8F_var = UnitGroupUnitFromEnd(autoA653CF8F_g, autoA653CF8F_u);
        if (autoA653CF8F_var == null) { break; }
        UnitRemove(autoA653CF8F_var);
    }
    auto4E9FE727_g = UnitGroup("Thor", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto4E9FE727_u = UnitGroupCount(auto4E9FE727_g, c_unitCountAll);
    for (;; auto4E9FE727_u -= 1) {
        auto4E9FE727_var = UnitGroupUnitFromEnd(auto4E9FE727_g, auto4E9FE727_u);
        if (auto4E9FE727_var == null) { break; }
        UnitRemove(auto4E9FE727_var);
    }
    auto8267C562_g = UnitGroup("Sentry", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto8267C562_u = UnitGroupCount(auto8267C562_g, c_unitCountAll);
    for (;; auto8267C562_u -= 1) {
        auto8267C562_var = UnitGroupUnitFromEnd(auto8267C562_g, auto8267C562_u);
        if (auto8267C562_var == null) { break; }
        UnitRemove(auto8267C562_var);
    }
    auto8CA7A3F4_g = UnitGroup("Colossus", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto8CA7A3F4_u = UnitGroupCount(auto8CA7A3F4_g, c_unitCountAll);
    for (;; auto8CA7A3F4_u -= 1) {
        auto8CA7A3F4_var = UnitGroupUnitFromEnd(auto8CA7A3F4_g, auto8CA7A3F4_u);
        if (auto8CA7A3F4_var == null) { break; }
        UnitRemove(auto8CA7A3F4_var);
    }
    autoBE4DCD21_g = gv_gameData.lv_rolesUnits[gv_syn.lv_roleDevil];
    autoBE4DCD21_u = UnitGroupCount(autoBE4DCD21_g, c_unitCountAll);
    for (;; autoBE4DCD21_u -= 1) {
        autoBE4DCD21_var = UnitGroupUnitFromEnd(autoBE4DCD21_g, autoBE4DCD21_u);
        if (autoBE4DCD21_var == null) { break; }
        if ((UnitGetType(autoBE4DCD21_var) != "CreepTumorBurrowed")) {
            UnitRemove(autoBE4DCD21_var);
        }
        else {
            UnitSetOwner(autoBE4DCD21_var, gv_gameData.lv_rolesOwners[gv_syn.lv_roleMoloch], true);
            UnitSetTeamColorIndex(autoBE4DCD21_var, 15);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReducedMode_Init () {
    gt_ReducedMode = TriggerCreate("gt_ReducedMode_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Role Selector Finished 2
//--------------------------------------------------------------------------------------------------
bool gt_RoleSelectorFinished2_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    int lv_rolevar;
    int lv_playervar;
    int lv_currentuntakenrole;
    int lv_numRandomPlayers;
    int lv_numUntakenGoodArmyRoles;
    int lv_numUntakenEvilArmyRoles;
    int lv_numUntakenSoloHeroRoles;
    int lv_numUntakenObserverRoles;
    int lv_rand;
    int[6] lv_untakenGoodArmyRoles;
    int[4] lv_untakenEvilArmyRoles;
    int[3] lv_untakenSoloHeroRoles;
    int lv_numGood;
    int lv_numEvil;
    int[15] lv_numIdealGood;
    int[15] lv_numIdealEvil;
    int[14] lv_randomRolesToBeAssigned;
    int lv_numActivePlayers;
    int lv_i;

    // Automatic Variable Declarations
    const int auto106F9327_ae = 13;
    const int auto106F9327_ai = 1;
    const int autoE13DECDB_ae = 13;
    const int autoE13DECDB_ai = 1;
    const int auto14FBCFA4_ae = 4;
    const int auto14FBCFA4_ai = 1;
    const int auto809B9363_ae = 13;
    const int auto809B9363_ai = 1;
    const int auto483FBB0E_ae = 8;
    const int auto483FBB0E_ai = 1;
    const int auto6586FE2B_ae = 13;
    const int auto6586FE2B_ai = 1;
    const int auto9B37A750_ae = 13;
    const int auto9B37A750_ai = 1;
    const int auto2818DBD1_ae = 13;
    const int auto2818DBD1_ai = 1;
    int autoDE4A1704_ae;
    const int autoDE4A1704_ai = 1;
    int autoC01BEA4D_ae;
    const int autoC01BEA4D_ai = 1;
    int autoF9F66D44_ae;
    const int autoF9F66D44_ai = 1;
    int auto9457BBCD_ae;
    int auto9457BBCD_var;
    int auto8EE3ADC1_ae;
    int auto8EE3ADC1_var;
    const int auto3249AE38_ae = 8;
    const int auto3249AE38_ai = 1;
    int auto03AFBE9D_ae;
    int auto03AFBE9D_var;
    int autoF5D4CEDF_ae;
    int autoF5D4CEDF_var;
    int autoDC0FF9CE_ae;
    const int autoDC0FF9CE_ai = 1;
    const int autoE5429148_ae = 13;
    const int autoE5429148_ai = 1;

    // Variable Initialization
    for (init_i = 0; init_i <= 5; init_i += 1) {
        lv_untakenGoodArmyRoles[init_i] = -1;
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        lv_untakenEvilArmyRoles[init_i] = -1;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        lv_untakenSoloHeroRoles[init_i] = -1;
    }
    for (init_i = 0; init_i <= 13; init_i += 1) {
        lv_randomRolesToBeAssigned[init_i] = -1;
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_playervar = 1;
    for ( ; ( (auto106F9327_ai >= 0 && lv_playervar <= auto106F9327_ae) || (auto106F9327_ai < 0 && lv_playervar >= auto106F9327_ae) ) ; lv_playervar += auto106F9327_ai ) {
        if ((gv_playerData[lv_playervar].lv_currentRole == -1) && (PlayerStatus(lv_playervar) == c_playerStatusActive) && (PlayerType(lv_playervar) == c_playerTypeUser)) {
            lv_numRandomPlayers = (lv_numRandomPlayers + 1);
        }

    }
    lv_playervar = 1;
    for ( ; ( (autoE13DECDB_ai >= 0 && lv_playervar <= autoE13DECDB_ae) || (autoE13DECDB_ai < 0 && lv_playervar >= autoE13DECDB_ae) ) ; lv_playervar += autoE13DECDB_ai ) {
        if (((PlayerStatus(lv_playervar) != c_playerStatusActive) || (PlayerType(lv_playervar) != c_playerTypeUser) || (gv_playerData[lv_playervar].lv_currentRole == -2))) {
            gv_playerData[lv_playervar].lv_currentRole = -2;
        }
        else {
            lv_numActivePlayers += 1;
        }
    }
    lv_numUntakenObserverRoles = (lv_numActivePlayers - 10);
    lv_currentuntakenrole = 0;
    lv_rolevar = 0;
    for ( ; ( (auto14FBCFA4_ai >= 0 && lv_rolevar <= auto14FBCFA4_ae) || (auto14FBCFA4_ai < 0 && lv_rolevar >= auto14FBCFA4_ae) ) ; lv_rolevar += auto14FBCFA4_ai ) {
        lv_playervar = 1;
        for ( ; ( (auto809B9363_ai >= 0 && lv_playervar <= auto809B9363_ae) || (auto809B9363_ai < 0 && lv_playervar >= auto809B9363_ae) ) ; lv_playervar += auto809B9363_ai ) {
            if ((gv_playerData[lv_playervar].lv_currentRole == lv_rolevar)) {
                lv_numGood = (lv_numGood + 1);
                break;
            }
            else {
                if ((lv_playervar == 13)) {
                    lv_untakenGoodArmyRoles[lv_currentuntakenrole] = lv_rolevar;
                    lv_currentuntakenrole = (lv_currentuntakenrole + 1);
                }

            }
        }
    }
    lv_numUntakenGoodArmyRoles = lv_currentuntakenrole;
    lv_currentuntakenrole = 0;
    lv_rolevar = 6;
    for ( ; ( (auto483FBB0E_ai >= 0 && lv_rolevar <= auto483FBB0E_ae) || (auto483FBB0E_ai < 0 && lv_rolevar >= auto483FBB0E_ae) ) ; lv_rolevar += auto483FBB0E_ai ) {
        lv_playervar = 1;
        for ( ; ( (auto6586FE2B_ai >= 0 && lv_playervar <= auto6586FE2B_ae) || (auto6586FE2B_ai < 0 && lv_playervar >= auto6586FE2B_ae) ) ; lv_playervar += auto6586FE2B_ai ) {
            if ((gv_playerData[lv_playervar].lv_currentRole == lv_rolevar)) {
                lv_numEvil = (lv_numEvil + 1);
                break;
            }
            else {
                if ((lv_playervar == 13)) {
                    lv_untakenEvilArmyRoles[lv_currentuntakenrole] = lv_rolevar;
                    lv_currentuntakenrole = (lv_currentuntakenrole + 1);
                }

            }
        }
    }
    lv_numUntakenEvilArmyRoles = lv_currentuntakenrole;
    lv_currentuntakenrole = 0;
    lv_rolevar = 5;
    lv_playervar = 1;
    for ( ; ( (auto9B37A750_ai >= 0 && lv_playervar <= auto9B37A750_ae) || (auto9B37A750_ai < 0 && lv_playervar >= auto9B37A750_ae) ) ; lv_playervar += auto9B37A750_ai ) {
        if ((gv_playerData[lv_playervar].lv_currentRole == lv_rolevar)) {
            lv_numGood = (lv_numGood + 1);
            break;
        }
        else {
            if ((lv_playervar == 13)) {
                lv_untakenSoloHeroRoles[lv_currentuntakenrole] = lv_rolevar;
                lv_currentuntakenrole = (lv_currentuntakenrole + 1);
            }

        }
    }
    lv_rolevar = 9;
    lv_playervar = 1;
    for ( ; ( (auto2818DBD1_ai >= 0 && lv_playervar <= auto2818DBD1_ae) || (auto2818DBD1_ai < 0 && lv_playervar >= auto2818DBD1_ae) ) ; lv_playervar += auto2818DBD1_ai ) {
        if ((gv_playerData[lv_playervar].lv_currentRole == lv_rolevar)) {
            lv_numEvil = (lv_numEvil + 1);
            break;
        }
        else {
            if ((lv_playervar == 13)) {
                lv_untakenSoloHeroRoles[lv_currentuntakenrole] = lv_rolevar;
                lv_currentuntakenrole = (lv_currentuntakenrole + 1);
            }

        }
    }
    lv_numUntakenSoloHeroRoles = lv_currentuntakenrole;
    autoDE4A1704_ae = (lv_numUntakenGoodArmyRoles - 1);
    lv_playervar = 0;
    for ( ; ( (autoDE4A1704_ai >= 0 && lv_playervar <= autoDE4A1704_ae) || (autoDE4A1704_ai < 0 && lv_playervar >= autoDE4A1704_ae) ) ; lv_playervar += autoDE4A1704_ai ) {
        lv_rand = RandomInt(lv_playervar, (lv_numUntakenGoodArmyRoles - 1));
        lv_rolevar = lv_untakenGoodArmyRoles[lv_rand];
        lv_untakenGoodArmyRoles[lv_rand] = lv_untakenGoodArmyRoles[lv_playervar];
        lv_untakenGoodArmyRoles[lv_playervar] = lv_rolevar;
    }
    autoC01BEA4D_ae = (lv_numUntakenEvilArmyRoles - 1);
    lv_playervar = 0;
    for ( ; ( (autoC01BEA4D_ai >= 0 && lv_playervar <= autoC01BEA4D_ae) || (autoC01BEA4D_ai < 0 && lv_playervar >= autoC01BEA4D_ae) ) ; lv_playervar += autoC01BEA4D_ai ) {
        lv_rand = RandomInt(lv_playervar, (lv_numUntakenEvilArmyRoles - 1));
        lv_rolevar = lv_untakenEvilArmyRoles[lv_rand];
        lv_untakenEvilArmyRoles[lv_rand] = lv_untakenEvilArmyRoles[lv_playervar];
        lv_untakenEvilArmyRoles[lv_playervar] = lv_rolevar;
    }
    autoF9F66D44_ae = (lv_numUntakenSoloHeroRoles - 1);
    lv_playervar = 0;
    for ( ; ( (autoF9F66D44_ai >= 0 && lv_playervar <= autoF9F66D44_ae) || (autoF9F66D44_ai < 0 && lv_playervar >= autoF9F66D44_ae) ) ; lv_playervar += autoF9F66D44_ai ) {
        lv_rand = RandomInt(lv_playervar, (lv_numUntakenSoloHeroRoles - 1));
        lv_rolevar = lv_untakenSoloHeroRoles[lv_rand];
        lv_untakenSoloHeroRoles[lv_rand] = lv_untakenSoloHeroRoles[lv_playervar];
        lv_untakenSoloHeroRoles[lv_playervar] = lv_rolevar;
    }
    lv_numIdealGood[1] = 0;
    lv_numIdealEvil[1] = 1;
    lv_numIdealGood[2] = 1;
    lv_numIdealEvil[2] = 1;
    lv_numIdealGood[3] = 2;
    lv_numIdealEvil[3] = 1;
    lv_numIdealGood[4] = 2;
    lv_numIdealEvil[4] = 2;
    lv_numIdealGood[5] = 3;
    lv_numIdealEvil[5] = 2;
    lv_numIdealGood[6] = 4;
    lv_numIdealEvil[6] = 2;
    lv_numIdealGood[7] = 4;
    lv_numIdealEvil[7] = 3;
    lv_numIdealGood[8] = 5;
    lv_numIdealEvil[8] = 3;
    lv_numIdealGood[9] = 5;
    lv_numIdealEvil[9] = 4;
    lv_numIdealGood[10] = 6;
    lv_numIdealEvil[10] = 4;
    lv_numIdealGood[11] = 6;
    lv_numIdealEvil[11] = 4;
    lv_numIdealGood[12] = 6;
    lv_numIdealEvil[12] = 4;
    lv_numIdealGood[13] = 6;
    lv_numIdealEvil[13] = 4;
    lv_rolevar = 0;
    auto9457BBCD_ae = ((lv_numIdealGood[lv_numActivePlayers] - lv_numGood) - 1);
    auto9457BBCD_var = 0;
    for ( ; auto9457BBCD_var <= auto9457BBCD_ae; auto9457BBCD_var += 1 ) {
        if (((lv_untakenGoodArmyRoles[auto9457BBCD_var] == -1) || (auto9457BBCD_var == 5))) {
            break;
        }
        else {
            lv_randomRolesToBeAssigned[lv_rolevar] = lv_untakenGoodArmyRoles[auto9457BBCD_var];
            lv_rolevar = (lv_rolevar + 1);
        }
    }
    auto8EE3ADC1_ae = ((lv_numIdealEvil[lv_numActivePlayers] - lv_numEvil) - 1);
    auto8EE3ADC1_var = 0;
    for ( ; auto8EE3ADC1_var <= auto8EE3ADC1_ae; auto8EE3ADC1_var += 1 ) {
        if (((lv_untakenEvilArmyRoles[auto8EE3ADC1_var] == -1) || (auto8EE3ADC1_var == 3))) {
            break;
        }
        else {
            lv_randomRolesToBeAssigned[lv_rolevar] = lv_untakenEvilArmyRoles[auto8EE3ADC1_var];
            lv_rolevar = (lv_rolevar + 1);
        }
    }
    lv_i = 0;
    lv_i = 0;
    for ( ; ( (auto3249AE38_ai >= 0 && lv_i <= auto3249AE38_ae) || (auto3249AE38_ai < 0 && lv_i >= auto3249AE38_ae) ) ; lv_i += auto3249AE38_ai ) {
        if ((lv_randomRolesToBeAssigned[lv_i] == -1)) {
            break;
        }

    }
    auto03AFBE9D_ae = ((lv_numRandomPlayers - lv_i) - 1);
    auto03AFBE9D_var = 0;
    for ( ; auto03AFBE9D_var <= auto03AFBE9D_ae; auto03AFBE9D_var += 1 ) {
        if (((lv_untakenSoloHeroRoles[auto03AFBE9D_var] == -1) || (auto03AFBE9D_var == 2))) {
            break;
        }
        else {
            lv_randomRolesToBeAssigned[lv_rolevar] = lv_untakenSoloHeroRoles[auto03AFBE9D_var];
            lv_rolevar = (lv_rolevar + 1);
        }
    }
    autoF5D4CEDF_ae = (lv_numUntakenObserverRoles - 1);
    autoF5D4CEDF_var = 0;
    for ( ; autoF5D4CEDF_var <= autoF5D4CEDF_ae; autoF5D4CEDF_var += 1 ) {
        lv_randomRolesToBeAssigned[lv_rolevar] = -2;
        lv_rolevar = (lv_rolevar + 1);
    }
    autoDC0FF9CE_ae = (lv_numRandomPlayers - 1);
    lv_playervar = 0;
    for ( ; ( (autoDC0FF9CE_ai >= 0 && lv_playervar <= autoDC0FF9CE_ae) || (autoDC0FF9CE_ai < 0 && lv_playervar >= autoDC0FF9CE_ae) ) ; lv_playervar += autoDC0FF9CE_ai ) {
        lv_rand = RandomInt(lv_playervar, (lv_numRandomPlayers - 1));
        lv_rolevar = lv_randomRolesToBeAssigned[lv_rand];
        lv_randomRolesToBeAssigned[lv_rand] = lv_randomRolesToBeAssigned[lv_playervar];
        lv_randomRolesToBeAssigned[lv_playervar] = lv_rolevar;
    }
    lv_rolevar = 0;
    lv_playervar = 1;
    for ( ; ( (autoE5429148_ai >= 0 && lv_playervar <= autoE5429148_ae) || (autoE5429148_ai < 0 && lv_playervar >= autoE5429148_ae) ) ; lv_playervar += autoE5429148_ai ) {
        if ((gv_playerData[lv_playervar].lv_currentRole == -1) && (PlayerStatus(lv_playervar) == c_playerStatusActive) && (PlayerType(lv_playervar) == c_playerTypeUser)) {
            gv_playerData[lv_playervar].lv_currentRole = lv_randomRolesToBeAssigned[lv_rolevar];
            lv_rolevar = (lv_rolevar + 1);
        }

    }
    if ((gv_roleSelect.lv_dialog != c_invalidDialogId)) {
        DialogSetVisible(gv_roleSelect.lv_dialog, PlayerGroupAll(), false);
    }

    TriggerExecute(gt_StartActualGame, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RoleSelectorFinished2_Init () {
    gt_RoleSelectorFinished2 = TriggerCreate("gt_RoleSelectorFinished2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Actual Game
//--------------------------------------------------------------------------------------------------
bool gt_StartActualGame_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto63340779_g;
    int auto63340779_u;
    unit auto63340779_var;
    unitgroup auto9B376DAF_g;
    int auto9B376DAF_u;
    unit auto9B376DAF_var;
    unitgroup autoD53D07B6_g;
    int autoD53D07B6_u;
    unit autoD53D07B6_var;
    unitgroup autoE872E744_g;
    int autoE872E744_u;
    unit autoE872E744_var;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_gameData.lv_gameStarted = true;
    TriggerEnable(gt_DuckPlayerLeavesDuringSelection, false);
    TriggerExecute(gt_CleanupCinematic, true, false);
    auto63340779_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto63340779_u = UnitGroupCount(auto63340779_g, c_unitCountAll);
    for (;; auto63340779_u -= 1) {
        auto63340779_var = UnitGroupUnitFromEnd(auto63340779_g, auto63340779_u);
        if (auto63340779_var == null) { break; }
        UnitSetState(auto63340779_var, c_unitStatePaused, false);
        UnitSetState(auto63340779_var, c_unitStateSelectable, true);
    }
    TriggerEnable(gt_RoleSelectorFinished2, false);
    TriggerExecute(gt_RoleInitialization, true, true);
    if ((PlayerGroupCount(gv_gameData.lv_humansPlaying) <= 4)) {
        gv_banks.lv_statsdisabled = true;
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/EA2D8014"));
    }

    gf_AddHeroGlowtoAllHeroics();
    gv_gameData.lv_pingsHeavenPoV[gv_syn.lv_pingsGateway] = gf_CreateObjectivePing(UnitFromId(200), gv_gameData.lv_playerGroupHeaven, StringExternal("Param/Value/8D862129"));
    gv_gameData.lv_pingsHeavenPoV[gv_syn.lv_pingsCitadel] = gf_CreateObjectivePing(UnitFromId(45), gv_gameData.lv_playerGroupHeaven, StringExternal("Param/Value/263D8F30"));
    gv_gameData.lv_pingsHeavenPoV[gv_syn.lv_pingsEnclave] = gf_CreateObjectivePing(UnitFromId(46), gv_gameData.lv_playerGroupHeaven, StringExternal("Param/Value/EC4B10CE"));
    gv_gameData.lv_pingsHeavenPoV[gv_syn.lv_pingsBenediction] = gf_CreateObjectivePing(UnitFromId(47), gv_gameData.lv_playerGroupHeaven, StringExternal("Param/Value/FBC0C2FF"));
    gv_gameData.lv_pingsHeavenPoV[gv_syn.lv_pingsThrone] = gf_CreateObjectivePing(UnitFromId(22), gv_gameData.lv_playerGroupHeaven, StringExternal("Param/Value/4B31D7FA"));
    gv_gameData.lv_pingsHellPoV[gv_syn.lv_pingsGateway] = gf_CreateObjectivePing(UnitFromId(200), gv_gameData.lv_playerGroupHell, StringExternal("Param/Value/CC861304"));
    gv_gameData.lv_pingsHellPoV[gv_syn.lv_pingsThrone] = gf_CreateObjectivePing(UnitFromId(22), gv_gameData.lv_playerGroupHell, StringExternal("Param/Value/D8506A63"));
    gf_CreateObjectives();
    TriggerExecute(gt_IntroText, true, false);
    TriggerEnable(gt_TieTextTrigger, true);
    TriggerExecute(gt_CustomControlGroups, true, false);
    TriggerExecute(gt_TextTags, true, false);
    TriggerExecute(gt_Tips, true, false);
    TriggerExecute(gt_IncrementGamesPlayed, true, true);
    TriggerExecute(gt_PeriodicBankSave, true, false);
    gf_UpdateStatsDisplay();
    TriggerExecute(gt_CreateGodTimerWindow, true, false);
    TimerPause(gv_gameData.lv_godTimer, false);
    DialogControlSetVisible(gv_banks.lv_statisticsButtonToMaximize, PlayerGroupAll(), true);
    auto9B376DAF_g = UnitGroup("Beacon_Protoss", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto9B376DAF_u = UnitGroupCount(auto9B376DAF_g, c_unitCountAll);
    for (;; auto9B376DAF_u -= 1) {
        auto9B376DAF_var = UnitGroupUnitFromEnd(auto9B376DAF_g, auto9B376DAF_u);
        if (auto9B376DAF_var == null) { break; }
        UnitSetState(auto9B376DAF_var, c_unitStateSelectable, false);
    }
    autoD53D07B6_g = UnitGroup("Beacon_Terran", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoD53D07B6_u = UnitGroupCount(autoD53D07B6_g, c_unitCountAll);
    for (;; autoD53D07B6_u -= 1) {
        autoD53D07B6_var = UnitGroupUnitFromEnd(autoD53D07B6_g, autoD53D07B6_u);
        if (autoD53D07B6_var == null) { break; }
        UnitSetState(autoD53D07B6_var, c_unitStateSelectable, false);
    }
    autoE872E744_g = UnitGroup("Beacon_Zerg", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoE872E744_u = UnitGroupCount(autoE872E744_g, c_unitCountAll);
    for (;; autoE872E744_u -= 1) {
        autoE872E744_var = UnitGroupUnitFromEnd(autoE872E744_g, autoE872E744_u);
        if (autoE872E744_var == null) { break; }
        UnitSetState(autoE872E744_var, c_unitStateSelectable, false);
    }
    TimerStart(gv__35minuterealtimer, (7 * 30), true, c_timeReal);
    DialogDestroy(gv_gameData.lv_pushCommandTooltip);
    DialogDestroy(gv_cCGData.lv_dialog[0]);
    DialogDestroy(gv_cCGData.lv_dialog[1]);
    TriggerExecute(gt_CreateRaphaelCargo, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartActualGame_Init () {
    gt_StartActualGame = TriggerCreate("gt_StartActualGame_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tips
//--------------------------------------------------------------------------------------------------
bool gt_Tips_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    HelpPanelAddHint(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/9C7515A0"), libNtve_ge_TipType_NormalTip), StringExternal("Param/Value/6A3FAB94"), "Assets\\Textures\\btn-ability-protoss-recallondeath.dds");
    HelpPanelAddHint(PlayerGroupAll(), StringExternal("Param/Value/BF5348DA"), StringExternal("Param/Value/69E5785D"), "Assets\\Textures\\ui_achievement.dds");
    HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/0E5F7489"), libNtve_ge_TipType_NormalTip), StringExternal("Param/Value/8769179F"), StringExternal("Param/Value/C9C5A69C"), "Assets\\Textures\\btn-tips-hotkeys.dds");
    HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/EC3685D0"), libNtve_ge_TipType_NormalTip), StringExternal("Param/Value/0C368523"), StringExternal("Param/Value/BD13AEB9"), "Assets\\Textures\\ui_help_frame_tips_checkmark_terran.dds");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Tips_Init () {
    gt_Tips = TriggerCreate("gt_Tips_Func");
    TriggerEnable(gt_Tips, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Move Nydus Forward Tip
//--------------------------------------------------------------------------------------------------
bool gt_MoveNydusForwardTip_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(UnitFromId(200)) == false))) {
            return false;
        }

        if (!(((UnitIsAlive(UnitFromId(47)) == true) || (UnitIsAlive(UnitFromId(45)) == true) || (UnitIsAlive(UnitFromId(46)) == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupCount(UnitGroup("NydusCanal", c_playerAny, RegionFromId(31), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
        UIDisplayMessage(gv_gameData.lv_primeEvils, c_messageAreaSubtitle, StringExternal("Param/Value/3ABC30E6"));
    }
    else {
        TriggerEnable(TriggerGetCurrent(), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MoveNydusForwardTip_Init () {
    gt_MoveNydusForwardTip = TriggerCreate("gt_MoveNydusForwardTip_Func");
    TriggerAddEventTimePeriodic(gt_MoveNydusForwardTip, 90.0, c_timeReal);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Role Initialization
//--------------------------------------------------------------------------------------------------
bool gt_RoleInitialization_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    unit lv_unitt;
    int lv_playplaya;
    int lv_playa;
    int[4] lv_observerColors;
    int lv_observerColorIterator;

    // Automatic Variable Declarations
    unitgroup autoEB41B173_g;
    int autoEB41B173_u;
    unit autoEB41B173_var;
    playergroup auto3C223006_g;
    int autoB83977F4_val;
    unitgroup auto043B82CC_g;
    int auto043B82CC_u;
    unitgroup auto2719CE1A_g;
    int auto2719CE1A_u;
    unitgroup autoBDF588ED_g;
    int autoBDF588ED_u;
    unitgroup autoBDC0A735_g;
    int autoBDC0A735_u;
    unitgroup auto3841BF94_g;
    int auto3841BF94_u;
    unitgroup autoCC04BAA0_g;
    int autoCC04BAA0_u;
    unitgroup autoE4316155_g;
    int autoE4316155_u;
    unitgroup autoC10FBA7B_g;
    int autoC10FBA7B_u;
    unitgroup autoD4D9BD07_g;
    int autoD4D9BD07_u;
    unitgroup auto69493FEF_g;
    int auto69493FEF_u;
    int autoD909A1F1_ae;
    int autoD909A1F1_var;
    unitgroup auto5891C89E_g;
    int auto5891C89E_u;
    int auto2ED23E97_ae;
    int auto2ED23E97_var;
    unitgroup autoCC593B36_g;
    int autoCC593B36_u;
    unitgroup auto7A38C883_g;
    int auto7A38C883_u;
    unit auto7A38C883_var;
    playergroup auto8FF9DB59_g;
    playergroup auto8A4311EB_g;
    playergroup autoA67441CD_g;
    playergroup autoFC47911E_g;
    playergroup auto53C0AAB6_g;
    int auto53C0AAB6_var;
    playergroup autoCA666B48_g;

    // Variable Initialization
    for (init_i = 0; init_i <= 3; init_i += 1) {
        lv_observerColors[init_i] = 1;
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_observerColors[0] = 2;
    lv_observerColors[1] = 9;
    lv_observerColors[2] = 13;
    if ((gv_gameData.lv_reducedMode == false)) {
        libNtve_gf_RemoveDoodadsinRegion(RegionFromId(30), null);
        autoEB41B173_g = UnitGroupFromId(6);
        autoEB41B173_u = UnitGroupCount(autoEB41B173_g, c_unitCountAll);
        for (;; autoEB41B173_u -= 1) {
            autoEB41B173_var = UnitGroupUnitFromEnd(autoEB41B173_g, autoEB41B173_u);
            if (autoEB41B173_var == null) { break; }
            UnitRemove(autoEB41B173_var);
        }
    }

    libNtve_gf_SetPlayerGroupAlliance(PlayerGroupAll(), libNtve_ge_AllianceSetting_Enemy);
    PlayerGroupAdd(gv_gameData.lv_playerGroupHeaven, 14);
    PlayerGroupAdd(gv_gameData.lv_playerGroupHell, 15);
    auto3C223006_g = PlayerGroupAll();
    lv_playa = -1;
    while (true) {
        lv_playa = PlayerGroupNextPlayer(auto3C223006_g, lv_playa);
        if (lv_playa < 0) { break; }
        autoB83977F4_val = gv_playerData[lv_playa].lv_currentRole;
        if (autoB83977F4_val == gv_syn.lv_roleAsmodeus) {
            gv_gameData.lv_rolesOwners[gv_syn.lv_roleAsmodeus] = lv_playa;
            auto043B82CC_g = gv_gameData.lv_rolesUnits[gv_syn.lv_roleAsmodeus];
            auto043B82CC_u = UnitGroupCount(auto043B82CC_g, c_unitCountAll);
            for (;; auto043B82CC_u -= 1) {
                lv_unitt = UnitGroupUnitFromEnd(auto043B82CC_g, auto043B82CC_u);
                if (lv_unitt == null) { break; }
                UnitSetOwner(lv_unitt, lv_playa, true);
            }
            CameraPan(lv_playa, PointFromId(694), 1.5, -1, 10, false);
            PlayerGroupAdd(gv_gameData.lv_playerGroupHell, lv_playa);
            PlayerSetColorIndex(lv_playa, 6, true);
            UnitSelect(UnitFromId(629), lv_playa, true);
            gf_TUTORIALInitilizePRIMETutorial(gv_playerData[lv_playa].lv_currentRole);
        }
        else if (autoB83977F4_val == gv_syn.lv_roleAstaroth) {
            gv_gameData.lv_rolesOwners[gv_syn.lv_roleAstaroth] = lv_playa;
            auto2719CE1A_g = gv_gameData.lv_rolesUnits[gv_syn.lv_roleAstaroth];
            auto2719CE1A_u = UnitGroupCount(auto2719CE1A_g, c_unitCountAll);
            for (;; auto2719CE1A_u -= 1) {
                lv_unitt = UnitGroupUnitFromEnd(auto2719CE1A_g, auto2719CE1A_u);
                if (lv_unitt == null) { break; }
                UnitSetOwner(lv_unitt, lv_playa, true);
            }
            CameraPan(lv_playa, PointFromId(695), 1.5, -1, 10, false);
            PlayerGroupAdd(gv_gameData.lv_playerGroupHell, lv_playa);
            PlayerSetColorIndex(lv_playa, 5, true);
            UnitSelect(UnitFromId(670), lv_playa, true);
            gf_TUTORIALInitilizePRIMETutorial(gv_playerData[lv_playa].lv_currentRole);
        }
        else if (autoB83977F4_val == gv_syn.lv_roleUriel) {
            gv_gameData.lv_rolesOwners[gv_syn.lv_roleUriel] = lv_playa;
            autoBDF588ED_g = gv_gameData.lv_rolesUnits[gv_syn.lv_roleUriel];
            autoBDF588ED_u = UnitGroupCount(autoBDF588ED_g, c_unitCountAll);
            for (;; autoBDF588ED_u -= 1) {
                lv_unitt = UnitGroupUnitFromEnd(autoBDF588ED_g, autoBDF588ED_u);
                if (lv_unitt == null) { break; }
                UnitSetOwner(lv_unitt, lv_playa, true);
            }
            CameraPan(lv_playa, PointFromId(699), 1.5, -1, 10, false);
            PlayerGroupAdd(gv_gameData.lv_playerGroupHeaven, lv_playa);
            PlayerSetColorIndex(lv_playa, 7, true);
            UnitSelect(UnitFromId(65), lv_playa, true);
        }
        else if (autoB83977F4_val == gv_syn.lv_roleJehoel) {
            gv_gameData.lv_rolesOwners[gv_syn.lv_roleJehoel] = lv_playa;
            autoBDC0A735_g = gv_gameData.lv_rolesUnits[gv_syn.lv_roleJehoel];
            autoBDC0A735_u = UnitGroupCount(autoBDC0A735_g, c_unitCountAll);
            for (;; autoBDC0A735_u -= 1) {
                lv_unitt = UnitGroupUnitFromEnd(autoBDC0A735_g, autoBDC0A735_u);
                if (lv_unitt == null) { break; }
                UnitSetOwner(lv_unitt, lv_playa, true);
            }
            CameraPan(lv_playa, PointFromId(701), 1.5, -1, 10, false);
            PlayerGroupAdd(gv_gameData.lv_playerGroupHeaven, lv_playa);
            PlayerSetColorIndex(lv_playa, 12, true);
            UnitSelect(UnitFromId(347), lv_playa, true);
        }
        else if (autoB83977F4_val == gv_syn.lv_roleMessiah) {
            gv_gameData.lv_rolesOwners[gv_syn.lv_roleMessiah] = lv_playa;
            auto3841BF94_g = gv_gameData.lv_rolesUnits[gv_syn.lv_roleMessiah];
            auto3841BF94_u = UnitGroupCount(auto3841BF94_g, c_unitCountAll);
            for (;; auto3841BF94_u -= 1) {
                lv_unitt = UnitGroupUnitFromEnd(auto3841BF94_g, auto3841BF94_u);
                if (lv_unitt == null) { break; }
                UnitSetOwner(lv_unitt, lv_playa, true);
            }
            CameraPan(lv_playa, PointFromId(697), 1.5, -1, 10, false);
            PlayerGroupAdd(gv_gameData.lv_playerGroupHeaven, lv_playa);
            PlayerSetColorIndex(lv_playa, 0, true);
            UnitSelect(UnitFromId(501), lv_playa, true);
        }
        else if (autoB83977F4_val == gv_syn.lv_roleMichael) {
            gv_gameData.lv_rolesOwners[gv_syn.lv_roleMichael] = lv_playa;
            autoCC04BAA0_g = gv_gameData.lv_rolesUnits[gv_syn.lv_roleMichael];
            autoCC04BAA0_u = UnitGroupCount(autoCC04BAA0_g, c_unitCountAll);
            for (;; autoCC04BAA0_u -= 1) {
                lv_unitt = UnitGroupUnitFromEnd(autoCC04BAA0_g, autoCC04BAA0_u);
                if (lv_unitt == null) { break; }
                UnitSetOwner(lv_unitt, lv_playa, true);
            }
            CameraPan(lv_playa, PointFromId(698), 1.5, -1, 10, false);
            PlayerGroupAdd(gv_gameData.lv_playerGroupHeaven, lv_playa);
            PlayerSetColorIndex(lv_playa, 3, true);
            UnitSelect(UnitFromId(729), lv_playa, true);
        }
        else if (autoB83977F4_val == gv_syn.lv_roleMoloch) {
            gv_gameData.lv_rolesOwners[gv_syn.lv_roleMoloch] = lv_playa;
            autoE4316155_g = gv_gameData.lv_rolesUnits[gv_syn.lv_roleMoloch];
            autoE4316155_u = UnitGroupCount(autoE4316155_g, c_unitCountAll);
            for (;; autoE4316155_u -= 1) {
                lv_unitt = UnitGroupUnitFromEnd(autoE4316155_g, autoE4316155_u);
                if (lv_unitt == null) { break; }
                UnitSetOwner(lv_unitt, lv_playa, true);
            }
            CameraPan(lv_playa, PointFromId(696), 1.5, -1, 10, false);
            PlayerGroupAdd(gv_gameData.lv_playerGroupHell, lv_playa);
            PlayerSetColorIndex(lv_playa, 8, true);
            UnitSelect(UnitFromId(439), lv_playa, true);
        }
        else if (autoB83977F4_val == gv_syn.lv_roleDevil) {
            gv_gameData.lv_rolesOwners[gv_syn.lv_roleDevil] = lv_playa;
            autoC10FBA7B_g = gv_gameData.lv_rolesUnits[gv_syn.lv_roleDevil];
            autoC10FBA7B_u = UnitGroupCount(autoC10FBA7B_g, c_unitCountAll);
            for (;; autoC10FBA7B_u -= 1) {
                lv_unitt = UnitGroupUnitFromEnd(autoC10FBA7B_g, autoC10FBA7B_u);
                if (lv_unitt == null) { break; }
                UnitSetOwner(lv_unitt, lv_playa, true);
            }
            CameraPan(lv_playa, PointFromId(693), 1.5, -1, 10, false);
            PlayerGroupAdd(gv_gameData.lv_playerGroupHell, lv_playa);
            PlayerSetColorIndex(lv_playa, 1, true);
            UnitSelect(UnitFromId(648), lv_playa, true);
            gf_TUTORIALInitilizePRIMETutorial(gv_playerData[lv_playa].lv_currentRole);
        }
        else if (autoB83977F4_val == gv_syn.lv_roleSeraphiel) {
            gv_gameData.lv_rolesOwners[gv_syn.lv_roleSeraphiel] = lv_playa;
            autoD4D9BD07_g = gv_gameData.lv_rolesUnits[gv_syn.lv_roleSeraphiel];
            autoD4D9BD07_u = UnitGroupCount(autoD4D9BD07_g, c_unitCountAll);
            for (;; autoD4D9BD07_u -= 1) {
                lv_unitt = UnitGroupUnitFromEnd(autoD4D9BD07_g, autoD4D9BD07_u);
                if (lv_unitt == null) { break; }
                UnitSetOwner(lv_unitt, lv_playa, true);
            }
            CameraPan(lv_playa, PointFromId(700), 1.5, -1, 10, false);
            PlayerGroupAdd(gv_gameData.lv_playerGroupHeaven, lv_playa);
            PlayerSetColorIndex(lv_playa, 4, true);
            UnitSelect(UnitFromId(313), lv_playa, true);
        }
        else if (autoB83977F4_val == gv_syn.lv_roleZadkiel) {
            gv_gameData.lv_rolesOwners[gv_syn.lv_roleZadkiel] = lv_playa;
            auto69493FEF_g = gv_gameData.lv_rolesUnits[gv_syn.lv_roleZadkiel];
            auto69493FEF_u = UnitGroupCount(auto69493FEF_g, c_unitCountAll);
            for (;; auto69493FEF_u -= 1) {
                lv_unitt = UnitGroupUnitFromEnd(auto69493FEF_g, auto69493FEF_u);
                if (lv_unitt == null) { break; }
                UnitSetOwner(lv_unitt, lv_playa, true);
            }
            CameraPan(lv_playa, PointFromId(702), 1.5, -1, 10, false);
            PlayerGroupAdd(gv_gameData.lv_playerGroupHeaven, lv_playa);
            PlayerSetColorIndex(lv_playa, 14, true);
            UnitSelect(UnitFromId(711), lv_playa, true);
        }
        else if (autoB83977F4_val == -2) {
            PlayerGroupRemove(gv_gameData.lv_humansPlaying, lv_playa);
            if ((PlayerType(lv_playa) == c_playerTypeUser) && (PlayerStatus(lv_playa) == c_playerStatusActive)) {
                CameraPan(lv_playa, PointFromId(702), 1.5, -1, 10, false);
                PlayerGroupAdd(gv_gameData.lv_playerGroupObservers, lv_playa);
                PlayerSetColorIndex(lv_playa, lv_observerColors[ModI(lv_observerColorIterator, 3)], false);
                lv_observerColorIterator = (lv_observerColorIterator + 1);
            }

        }
        else {
        }
    }
    autoD909A1F1_ae = gv_syn.lv_roleZadkiel;
    autoD909A1F1_var = gv_syn.lv_roleMessiah;
    for ( ; autoD909A1F1_var <= autoD909A1F1_ae; autoD909A1F1_var += 1 ) {
        if ((gv_gameData.lv_rolesOwners[autoD909A1F1_var] == -1)) {
            gv_gameData.lv_rolesOwners[autoD909A1F1_var] = 14;
            auto5891C89E_g = gv_gameData.lv_rolesUnits[autoD909A1F1_var];
            auto5891C89E_u = UnitGroupCount(auto5891C89E_g, c_unitCountAll);
            for (;; auto5891C89E_u -= 1) {
                lv_unitt = UnitGroupUnitFromEnd(auto5891C89E_g, auto5891C89E_u);
                if (lv_unitt == null) { break; }
                UnitSetTeamColorIndex(lv_unitt, gf_ColorID_To_Color(autoD909A1F1_var));
                UnitSetOwner(lv_unitt, gv_gameData.lv_rolesOwners[autoD909A1F1_var], false);
            }
        }

    }
    auto2ED23E97_ae = gv_syn.lv_roleMoloch;
    auto2ED23E97_var = gv_syn.lv_roleDevil;
    for ( ; auto2ED23E97_var <= auto2ED23E97_ae; auto2ED23E97_var += 1 ) {
        if ((gv_gameData.lv_rolesOwners[auto2ED23E97_var] == -1)) {
            gv_gameData.lv_rolesOwners[auto2ED23E97_var] = 15;
            autoCC593B36_g = gv_gameData.lv_rolesUnits[auto2ED23E97_var];
            autoCC593B36_u = UnitGroupCount(autoCC593B36_g, c_unitCountAll);
            for (;; autoCC593B36_u -= 1) {
                lv_unitt = UnitGroupUnitFromEnd(autoCC593B36_g, autoCC593B36_u);
                if (lv_unitt == null) { break; }
                UnitSetOwner(lv_unitt, gv_gameData.lv_rolesOwners[auto2ED23E97_var], true);
                UnitSetTeamColorIndex(lv_unitt, gf_ColorID_To_Color(auto2ED23E97_var));
            }
        }

    }
    auto7A38C883_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto7A38C883_u = UnitGroupCount(auto7A38C883_g, c_unitCountAll);
    for (;; auto7A38C883_u -= 1) {
        auto7A38C883_var = UnitGroupUnitFromEnd(auto7A38C883_g, auto7A38C883_u);
        if (auto7A38C883_var == null) { break; }
        if ((UnitTypeTestAttribute(UnitGetType(auto7A38C883_var), c_unitAttributeRobotic) == true)) {
            gv_playerData[UnitGetOwner(auto7A38C883_var)].lv_aftermathElitesTotal += 1;
        }

        if ((UnitTypeTestAttribute(UnitGetType(auto7A38C883_var), c_unitAttributeHeroic) == true)) {
            gv_playerData[UnitGetOwner(auto7A38C883_var)].lv_aftermathHeroesTotal += 1;
        }

    }
    libNtve_gf_SetPlayerGroupAlliance(gv_gameData.lv_playerGroupHeaven, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetPlayerGroupAlliance(gv_gameData.lv_playerGroupHell, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    auto8FF9DB59_g = gv_gameData.lv_playerGroupHeaven;
    lv_playa = -1;
    while (true) {
        lv_playa = PlayerGroupNextPlayer(auto8FF9DB59_g, lv_playa);
        if (lv_playa < 0) { break; }
        auto8A4311EB_g = gv_gameData.lv_playerGroupHell;
        lv_playplaya = -1;
        while (true) {
            lv_playplaya = PlayerGroupNextPlayer(auto8A4311EB_g, lv_playplaya);
            if (lv_playplaya < 0) { break; }
            libNtve_gf_SetAlliance(lv_playa, lv_playplaya, libNtve_ge_AllianceSetting_Enemy);
            PlayerSetAlliance(lv_playa, c_allianceIdPushable, lv_playplaya, false);
            PlayerSetAlliance(lv_playplaya, c_allianceIdPushable, lv_playa, false);
        }
    }
    autoA67441CD_g = gv_gameData.lv_playerGroupHeaven;
    lv_playa = -1;
    while (true) {
        lv_playa = PlayerGroupNextPlayer(autoA67441CD_g, lv_playa);
        if (lv_playa < 0) { break; }
        libNtve_gf_SetAllianceOneWay(14, lv_playa, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndControl);
        PlayerSetAlliance(14, c_allianceIdPushable, lv_playa, true);
        PlayerSetAlliance(lv_playa, c_allianceIdPushable, 14, true);
    }
    autoFC47911E_g = gv_gameData.lv_playerGroupHell;
    lv_playa = -1;
    while (true) {
        lv_playa = PlayerGroupNextPlayer(autoFC47911E_g, lv_playa);
        if (lv_playa < 0) { break; }
        libNtve_gf_SetAllianceOneWay(15, lv_playa, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndControl);
        PlayerSetAlliance(15, c_allianceIdPushable, lv_playa, true);
        PlayerSetAlliance(lv_playa, c_allianceIdPushable, 15, true);
    }
    libNtve_gf_AddPlayerGroupToPlayerGroup(gv_gameData.lv_playerGroupHeaven, gv_gameData.lv_goodArmyPlayers);
    PlayerGroupRemove(gv_gameData.lv_goodArmyPlayers, gv_gameData.lv_rolesOwners[gv_syn.lv_roleZadkiel]);
    libNtve_gf_AddPlayerGroupToPlayerGroup(gv_gameData.lv_playerGroupHell, gv_gameData.lv_primeEvils);
    PlayerGroupRemove(gv_gameData.lv_primeEvils, gv_gameData.lv_rolesOwners[gv_syn.lv_roleMoloch]);
    auto53C0AAB6_g = gv_gameData.lv_playerGroupObservers;
    auto53C0AAB6_var = -1;
    while (true) {
        auto53C0AAB6_var = PlayerGroupNextPlayer(auto53C0AAB6_g, auto53C0AAB6_var);
        if (auto53C0AAB6_var < 0) { break; }
        VisRevealArea(auto53C0AAB6_var, RegionEntireMap(), 32767.0, false);
        autoCA666B48_g = PlayerGroupAll();
        lv_playa = -1;
        while (true) {
            lv_playa = PlayerGroupNextPlayer(autoCA666B48_g, lv_playa);
            if (lv_playa < 0) { break; }
            libNtve_gf_SetAllianceOneWay(lv_playa, auto53C0AAB6_var, libNtve_ge_AllianceSetting_AllyWithSharedVision);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RoleInitialization_Init () {
    gt_RoleInitialization = TriggerCreate("gt_RoleInitialization_Func");
    TriggerEnable(gt_RoleInitialization, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Command Groups
//--------------------------------------------------------------------------------------------------
bool gt_CommandGroups_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_rolesPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_rolesPlayer = gv_gameData.lv_rolesOwners[gv_syn.lv_roleAstaroth];
    UnitControlGroupAddUnits(lv_rolesPlayer, 1, libNtve_gf_ConvertUnitToUnitGroup(UnitFromId(783)));
    UnitControlGroupAddUnits(lv_rolesPlayer, 2, libNtve_gf_ConvertUnitToUnitGroup(UnitFromId(707)));
    UnitControlGroupAddUnits(lv_rolesPlayer, 3, libNtve_gf_ConvertUnitToUnitGroup(UnitFromId(708)));
    UnitControlGroupAddUnits(lv_rolesPlayer, 4, libNtve_gf_ConvertUnitToUnitGroup(UnitFromId(670)));
    UnitControlGroupAddUnits(lv_rolesPlayer, 5, libNtve_gf_ConvertUnitToUnitGroup(UnitFromId(785)));
    lv_rolesPlayer = gv_gameData.lv_rolesOwners[gv_syn.lv_roleAsmodeus];
    UnitControlGroupAddUnits(lv_rolesPlayer, 1, libNtve_gf_ConvertUnitToUnitGroup(UnitFromId(692)));
    UnitControlGroupAddUnits(lv_rolesPlayer, 2, libNtve_gf_ConvertUnitToUnitGroup(UnitFromId(703)));
    UnitControlGroupAddUnits(lv_rolesPlayer, 3, libNtve_gf_ConvertUnitToUnitGroup(UnitFromId(704)));
    UnitControlGroupAddUnits(lv_rolesPlayer, 4, libNtve_gf_ConvertUnitToUnitGroup(UnitFromId(629)));
    UnitControlGroupAddUnits(lv_rolesPlayer, 5, libNtve_gf_ConvertUnitToUnitGroup(UnitFromId(709)));
    lv_rolesPlayer = gv_gameData.lv_rolesOwners[gv_syn.lv_roleDevil];
    UnitControlGroupAddUnits(lv_rolesPlayer, 1, libNtve_gf_ConvertUnitToUnitGroup(UnitFromId(705)));
    UnitControlGroupAddUnits(lv_rolesPlayer, 2, libNtve_gf_ConvertUnitToUnitGroup(UnitFromId(706)));
    UnitControlGroupAddUnits(lv_rolesPlayer, 3, libNtve_gf_ConvertUnitToUnitGroup(UnitFromId(710)));
    UnitControlGroupAddUnits(lv_rolesPlayer, 4, libNtve_gf_ConvertUnitToUnitGroup(UnitFromId(648)));
    UnitControlGroupAddUnits(lv_rolesPlayer, 5, libNtve_gf_ConvertUnitToUnitGroup(UnitFromId(784)));
    lv_rolesPlayer = gv_gameData.lv_rolesOwners[gv_syn.lv_roleMessiah];
    UnitControlGroupAddUnits(lv_rolesPlayer, 1, libNtve_gf_ConvertUnitToUnitGroup(UnitFromId(501)));
    UnitControlGroupAddUnits(lv_rolesPlayer, 2, libNtve_gf_ConvertUnitToUnitGroup(UnitFromId(238160895)));
    UnitControlGroupAddUnits(lv_rolesPlayer, 3, libNtve_gf_ConvertUnitToUnitGroup(UnitFromId(622)));
    UnitControlGroupAddUnits(lv_rolesPlayer, 4, libNtve_gf_ConvertUnitToUnitGroup(UnitFromId(22)));
    lv_rolesPlayer = gv_gameData.lv_rolesOwners[gv_syn.lv_roleMichael];
    UnitControlGroupAddUnits(lv_rolesPlayer, 1, libNtve_gf_ConvertUnitToUnitGroup(UnitFromId(729)));
    UnitControlGroupAddUnits(lv_rolesPlayer, 2, libNtve_gf_ConvertUnitToUnitGroup(UnitFromId(211)));
    UnitControlGroupAddUnits(lv_rolesPlayer, 4, libNtve_gf_ConvertUnitToUnitGroup(UnitFromId(22)));
    lv_rolesPlayer = gv_gameData.lv_rolesOwners[gv_syn.lv_roleJehoel];
    UnitControlGroupAddUnits(lv_rolesPlayer, 1, libNtve_gf_ConvertUnitToUnitGroup(UnitFromId(347)));
    UnitControlGroupAddUnits(lv_rolesPlayer, 2, libNtve_gf_ConvertUnitToUnitGroup(UnitFromId(348)));
    UnitControlGroupAddUnits(lv_rolesPlayer, 4, libNtve_gf_ConvertUnitToUnitGroup(UnitFromId(22)));
    lv_rolesPlayer = gv_gameData.lv_rolesOwners[gv_syn.lv_roleSeraphiel];
    UnitControlGroupAddUnits(lv_rolesPlayer, 1, libNtve_gf_ConvertUnitToUnitGroup(UnitFromId(313)));
    UnitControlGroupAddUnits(lv_rolesPlayer, 2, libNtve_gf_ConvertUnitToUnitGroup(UnitFromId(330)));
    UnitControlGroupAddUnits(lv_rolesPlayer, 4, libNtve_gf_ConvertUnitToUnitGroup(UnitFromId(22)));
    lv_rolesPlayer = gv_gameData.lv_rolesOwners[gv_syn.lv_roleUriel];
    UnitControlGroupAddUnits(lv_rolesPlayer, 1, libNtve_gf_ConvertUnitToUnitGroup(UnitFromId(65)));
    UnitControlGroupAddUnits(lv_rolesPlayer, 2, libNtve_gf_ConvertUnitToUnitGroup(UnitFromId(440)));
    UnitControlGroupAddUnits(lv_rolesPlayer, 4, libNtve_gf_ConvertUnitToUnitGroup(UnitFromId(22)));
    lv_rolesPlayer = gv_gameData.lv_rolesOwners[gv_syn.lv_roleZadkiel];
    UnitControlGroupAddUnits(lv_rolesPlayer, 1, libNtve_gf_ConvertUnitToUnitGroup(UnitFromId(711)));
    UnitControlGroupAddUnits(lv_rolesPlayer, 4, libNtve_gf_ConvertUnitToUnitGroup(UnitFromId(22)));
    lv_rolesPlayer = gv_gameData.lv_rolesOwners[gv_syn.lv_roleMoloch];
    UnitControlGroupAddUnits(lv_rolesPlayer, 1, libNtve_gf_ConvertUnitToUnitGroup(UnitFromId(439)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CommandGroups_Init () {
    gt_CommandGroups = TriggerCreate("gt_CommandGroups_Func");
    TriggerEnable(gt_CommandGroups, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Custom Control Groups
//--------------------------------------------------------------------------------------------------
bool gt_CustomControlGroups_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_rolesPlayer;
    int lv_role;
    int lv_group;
    unitgroup lv_controlGroup;
    unit lv_dummyUnit;

    // Automatic Variable Declarations
    const int auto260E9BAB_ae = 9;
    const int auto260E9BAB_ai = 1;
    unitgroup auto141CF159_g;
    int auto141CF159_u;
    const int autoCE8D8B8C_ae = 9;
    const int autoCE8D8B8C_ai = 1;
    unitgroup autoF79B103F_g;
    int autoF79B103F_u;
    const int autoEFD6C48B_ae = 9;
    const int autoEFD6C48B_ai = 1;
    unitgroup autoAC4A767F_g;
    int autoAC4A767F_u;
    const int auto7C2F76D9_ae = 9;
    const int auto7C2F76D9_ai = 1;
    unitgroup autoE9F14054_g;
    int autoE9F14054_u;
    const int auto164D6127_ae = 9;
    const int auto164D6127_ai = 1;
    unitgroup autoDDBF4D0D_g;
    int autoDDBF4D0D_u;
    const int autoE0222C98_ae = 9;
    const int autoE0222C98_ai = 1;
    unitgroup auto6B5B86E3_g;
    int auto6B5B86E3_u;
    const int auto80ED89FA_ae = 9;
    const int auto80ED89FA_ai = 1;
    unitgroup autoD80A2580_g;
    int autoD80A2580_u;
    const int autoEC295C81_ae = 9;
    const int autoEC295C81_ai = 1;
    unitgroup auto88A7678E_g;
    int auto88A7678E_u;
    const int auto578F0186_ae = 9;
    const int auto578F0186_ai = 1;
    unitgroup autoB1B7377D_g;
    int autoB1B7377D_u;
    const int autoCA21798D_ae = 9;
    const int autoCA21798D_ai = 1;
    unitgroup auto7899CC63_g;
    int auto7899CC63_u;

    // Variable Initialization
    lv_controlGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_rolesPlayer = gv_gameData.lv_rolesOwners[gv_syn.lv_roleAstaroth];
    lv_role = gv_syn.lv_roleAstaroth;
    lv_group = 0;
    for ( ; ( (auto260E9BAB_ai >= 0 && lv_group <= auto260E9BAB_ae) || (auto260E9BAB_ai < 0 && lv_group >= auto260E9BAB_ae) ) ; lv_group += auto260E9BAB_ai ) {
        lv_controlGroup = gf_ControlGroupFromInteger(gv_banks.lv_controlGroups[lv_rolesPlayer][lv_role][lv_group], lv_role, lv_group);
        UnitControlGroupAddUnits(lv_rolesPlayer, lv_group, lv_controlGroup);
        UnitGroupRemoveUnitGroup(lv_controlGroup, UnitControlGroup(lv_rolesPlayer, lv_group));
        auto141CF159_g = lv_controlGroup;
        auto141CF159_u = UnitGroupCount(auto141CF159_g, c_unitCountAll);
        for (;; auto141CF159_u -= 1) {
            lv_dummyUnit = UnitGroupUnitFromEnd(auto141CF159_g, auto141CF159_u);
            if (lv_dummyUnit == null) { break; }
            if ((UnitFilterMatch(lv_dummyUnit, UnitGetOwner(lv_dummyUnit), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true)) {
                UnitControlGroupAddUnit(lv_rolesPlayer, lv_group, lv_dummyUnit);
            }

        }
    }
    lv_rolesPlayer = gv_gameData.lv_rolesOwners[gv_syn.lv_roleAsmodeus];
    lv_role = gv_syn.lv_roleAsmodeus;
    lv_group = 0;
    for ( ; ( (autoCE8D8B8C_ai >= 0 && lv_group <= autoCE8D8B8C_ae) || (autoCE8D8B8C_ai < 0 && lv_group >= autoCE8D8B8C_ae) ) ; lv_group += autoCE8D8B8C_ai ) {
        lv_controlGroup = gf_ControlGroupFromInteger(gv_banks.lv_controlGroups[lv_rolesPlayer][lv_role][lv_group], lv_role, lv_group);
        UnitControlGroupAddUnits(lv_rolesPlayer, lv_group, lv_controlGroup);
        UnitGroupRemoveUnitGroup(lv_controlGroup, UnitControlGroup(lv_rolesPlayer, lv_group));
        autoF79B103F_g = lv_controlGroup;
        autoF79B103F_u = UnitGroupCount(autoF79B103F_g, c_unitCountAll);
        for (;; autoF79B103F_u -= 1) {
            lv_dummyUnit = UnitGroupUnitFromEnd(autoF79B103F_g, autoF79B103F_u);
            if (lv_dummyUnit == null) { break; }
            if ((UnitFilterMatch(lv_dummyUnit, UnitGetOwner(lv_dummyUnit), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true)) {
                UnitControlGroupAddUnit(lv_rolesPlayer, lv_group, lv_dummyUnit);
            }

        }
    }
    lv_rolesPlayer = gv_gameData.lv_rolesOwners[gv_syn.lv_roleDevil];
    lv_role = gv_syn.lv_roleDevil;
    lv_group = 0;
    for ( ; ( (autoEFD6C48B_ai >= 0 && lv_group <= autoEFD6C48B_ae) || (autoEFD6C48B_ai < 0 && lv_group >= autoEFD6C48B_ae) ) ; lv_group += autoEFD6C48B_ai ) {
        lv_controlGroup = gf_ControlGroupFromInteger(gv_banks.lv_controlGroups[lv_rolesPlayer][lv_role][lv_group], lv_role, lv_group);
        UnitControlGroupAddUnits(lv_rolesPlayer, lv_group, lv_controlGroup);
        UnitGroupRemoveUnitGroup(lv_controlGroup, UnitControlGroup(lv_rolesPlayer, lv_group));
        autoAC4A767F_g = lv_controlGroup;
        autoAC4A767F_u = UnitGroupCount(autoAC4A767F_g, c_unitCountAll);
        for (;; autoAC4A767F_u -= 1) {
            lv_dummyUnit = UnitGroupUnitFromEnd(autoAC4A767F_g, autoAC4A767F_u);
            if (lv_dummyUnit == null) { break; }
            if ((UnitFilterMatch(lv_dummyUnit, UnitGetOwner(lv_dummyUnit), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true)) {
                UnitControlGroupAddUnit(lv_rolesPlayer, lv_group, lv_dummyUnit);
            }

        }
    }
    lv_rolesPlayer = gv_gameData.lv_rolesOwners[gv_syn.lv_roleMessiah];
    lv_role = gv_syn.lv_roleMessiah;
    lv_group = 0;
    for ( ; ( (auto7C2F76D9_ai >= 0 && lv_group <= auto7C2F76D9_ae) || (auto7C2F76D9_ai < 0 && lv_group >= auto7C2F76D9_ae) ) ; lv_group += auto7C2F76D9_ai ) {
        lv_controlGroup = gf_ControlGroupFromInteger(gv_banks.lv_controlGroups[lv_rolesPlayer][lv_role][lv_group], lv_role, lv_group);
        UnitControlGroupAddUnits(lv_rolesPlayer, lv_group, lv_controlGroup);
        UnitGroupRemoveUnitGroup(lv_controlGroup, UnitControlGroup(lv_rolesPlayer, lv_group));
        autoE9F14054_g = lv_controlGroup;
        autoE9F14054_u = UnitGroupCount(autoE9F14054_g, c_unitCountAll);
        for (;; autoE9F14054_u -= 1) {
            lv_dummyUnit = UnitGroupUnitFromEnd(autoE9F14054_g, autoE9F14054_u);
            if (lv_dummyUnit == null) { break; }
            if ((UnitFilterMatch(lv_dummyUnit, UnitGetOwner(lv_dummyUnit), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true)) {
                UnitControlGroupAddUnit(lv_rolesPlayer, lv_group, lv_dummyUnit);
            }

        }
    }
    lv_rolesPlayer = gv_gameData.lv_rolesOwners[gv_syn.lv_roleMichael];
    lv_role = gv_syn.lv_roleMichael;
    lv_group = 0;
    for ( ; ( (auto164D6127_ai >= 0 && lv_group <= auto164D6127_ae) || (auto164D6127_ai < 0 && lv_group >= auto164D6127_ae) ) ; lv_group += auto164D6127_ai ) {
        lv_controlGroup = gf_ControlGroupFromInteger(gv_banks.lv_controlGroups[lv_rolesPlayer][lv_role][lv_group], lv_role, lv_group);
        UnitControlGroupAddUnits(lv_rolesPlayer, lv_group, lv_controlGroup);
        UnitGroupRemoveUnitGroup(lv_controlGroup, UnitControlGroup(lv_rolesPlayer, lv_group));
        autoDDBF4D0D_g = lv_controlGroup;
        autoDDBF4D0D_u = UnitGroupCount(autoDDBF4D0D_g, c_unitCountAll);
        for (;; autoDDBF4D0D_u -= 1) {
            lv_dummyUnit = UnitGroupUnitFromEnd(autoDDBF4D0D_g, autoDDBF4D0D_u);
            if (lv_dummyUnit == null) { break; }
            if ((UnitFilterMatch(lv_dummyUnit, UnitGetOwner(lv_dummyUnit), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true)) {
                UnitControlGroupAddUnit(lv_rolesPlayer, lv_group, lv_dummyUnit);
            }

        }
    }
    lv_rolesPlayer = gv_gameData.lv_rolesOwners[gv_syn.lv_roleJehoel];
    lv_role = gv_syn.lv_roleJehoel;
    lv_group = 0;
    for ( ; ( (autoE0222C98_ai >= 0 && lv_group <= autoE0222C98_ae) || (autoE0222C98_ai < 0 && lv_group >= autoE0222C98_ae) ) ; lv_group += autoE0222C98_ai ) {
        lv_controlGroup = gf_ControlGroupFromInteger(gv_banks.lv_controlGroups[lv_rolesPlayer][lv_role][lv_group], lv_role, lv_group);
        UnitControlGroupAddUnits(lv_rolesPlayer, lv_group, lv_controlGroup);
        UnitGroupRemoveUnitGroup(lv_controlGroup, UnitControlGroup(lv_rolesPlayer, lv_group));
        auto6B5B86E3_g = lv_controlGroup;
        auto6B5B86E3_u = UnitGroupCount(auto6B5B86E3_g, c_unitCountAll);
        for (;; auto6B5B86E3_u -= 1) {
            lv_dummyUnit = UnitGroupUnitFromEnd(auto6B5B86E3_g, auto6B5B86E3_u);
            if (lv_dummyUnit == null) { break; }
            if ((UnitFilterMatch(lv_dummyUnit, UnitGetOwner(lv_dummyUnit), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true)) {
                UnitControlGroupAddUnit(lv_rolesPlayer, lv_group, lv_dummyUnit);
            }

        }
    }
    lv_rolesPlayer = gv_gameData.lv_rolesOwners[gv_syn.lv_roleSeraphiel];
    lv_role = gv_syn.lv_roleSeraphiel;
    lv_group = 0;
    for ( ; ( (auto80ED89FA_ai >= 0 && lv_group <= auto80ED89FA_ae) || (auto80ED89FA_ai < 0 && lv_group >= auto80ED89FA_ae) ) ; lv_group += auto80ED89FA_ai ) {
        lv_controlGroup = gf_ControlGroupFromInteger(gv_banks.lv_controlGroups[lv_rolesPlayer][lv_role][lv_group], lv_role, lv_group);
        UnitControlGroupAddUnits(lv_rolesPlayer, lv_group, lv_controlGroup);
        UnitGroupRemoveUnitGroup(lv_controlGroup, UnitControlGroup(lv_rolesPlayer, lv_group));
        autoD80A2580_g = lv_controlGroup;
        autoD80A2580_u = UnitGroupCount(autoD80A2580_g, c_unitCountAll);
        for (;; autoD80A2580_u -= 1) {
            lv_dummyUnit = UnitGroupUnitFromEnd(autoD80A2580_g, autoD80A2580_u);
            if (lv_dummyUnit == null) { break; }
            if ((UnitFilterMatch(lv_dummyUnit, UnitGetOwner(lv_dummyUnit), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true)) {
                UnitControlGroupAddUnit(lv_rolesPlayer, lv_group, lv_dummyUnit);
            }

        }
    }
    lv_rolesPlayer = gv_gameData.lv_rolesOwners[gv_syn.lv_roleUriel];
    lv_role = gv_syn.lv_roleUriel;
    lv_group = 0;
    for ( ; ( (autoEC295C81_ai >= 0 && lv_group <= autoEC295C81_ae) || (autoEC295C81_ai < 0 && lv_group >= autoEC295C81_ae) ) ; lv_group += autoEC295C81_ai ) {
        lv_controlGroup = gf_ControlGroupFromInteger(gv_banks.lv_controlGroups[lv_rolesPlayer][lv_role][lv_group], lv_role, lv_group);
        UnitControlGroupAddUnits(lv_rolesPlayer, lv_group, lv_controlGroup);
        UnitGroupRemoveUnitGroup(lv_controlGroup, UnitControlGroup(lv_rolesPlayer, lv_group));
        auto88A7678E_g = lv_controlGroup;
        auto88A7678E_u = UnitGroupCount(auto88A7678E_g, c_unitCountAll);
        for (;; auto88A7678E_u -= 1) {
            lv_dummyUnit = UnitGroupUnitFromEnd(auto88A7678E_g, auto88A7678E_u);
            if (lv_dummyUnit == null) { break; }
            if ((UnitFilterMatch(lv_dummyUnit, UnitGetOwner(lv_dummyUnit), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true)) {
                UnitControlGroupAddUnit(lv_rolesPlayer, lv_group, lv_dummyUnit);
            }

        }
    }
    lv_rolesPlayer = gv_gameData.lv_rolesOwners[gv_syn.lv_roleZadkiel];
    lv_role = gv_syn.lv_roleZadkiel;
    lv_group = 0;
    for ( ; ( (auto578F0186_ai >= 0 && lv_group <= auto578F0186_ae) || (auto578F0186_ai < 0 && lv_group >= auto578F0186_ae) ) ; lv_group += auto578F0186_ai ) {
        lv_controlGroup = gf_ControlGroupFromInteger(gv_banks.lv_controlGroups[lv_rolesPlayer][lv_role][lv_group], lv_role, lv_group);
        UnitControlGroupAddUnits(lv_rolesPlayer, lv_group, lv_controlGroup);
        UnitGroupRemoveUnitGroup(lv_controlGroup, UnitControlGroup(lv_rolesPlayer, lv_group));
        autoB1B7377D_g = lv_controlGroup;
        autoB1B7377D_u = UnitGroupCount(autoB1B7377D_g, c_unitCountAll);
        for (;; autoB1B7377D_u -= 1) {
            lv_dummyUnit = UnitGroupUnitFromEnd(autoB1B7377D_g, autoB1B7377D_u);
            if (lv_dummyUnit == null) { break; }
            if ((UnitFilterMatch(lv_dummyUnit, UnitGetOwner(lv_dummyUnit), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true)) {
                UnitControlGroupAddUnit(lv_rolesPlayer, lv_group, lv_dummyUnit);
            }

        }
    }
    lv_rolesPlayer = gv_gameData.lv_rolesOwners[gv_syn.lv_roleMoloch];
    lv_role = gv_syn.lv_roleMoloch;
    lv_group = 0;
    for ( ; ( (autoCA21798D_ai >= 0 && lv_group <= autoCA21798D_ae) || (autoCA21798D_ai < 0 && lv_group >= autoCA21798D_ae) ) ; lv_group += autoCA21798D_ai ) {
        lv_controlGroup = gf_ControlGroupFromInteger(gv_banks.lv_controlGroups[lv_rolesPlayer][lv_role][lv_group], lv_role, lv_group);
        UnitControlGroupAddUnits(lv_rolesPlayer, lv_group, lv_controlGroup);
        UnitGroupRemoveUnitGroup(lv_controlGroup, UnitControlGroup(lv_rolesPlayer, lv_group));
        auto7899CC63_g = lv_controlGroup;
        auto7899CC63_u = UnitGroupCount(auto7899CC63_g, c_unitCountAll);
        for (;; auto7899CC63_u -= 1) {
            lv_dummyUnit = UnitGroupUnitFromEnd(auto7899CC63_g, auto7899CC63_u);
            if (lv_dummyUnit == null) { break; }
            if ((UnitFilterMatch(lv_dummyUnit, UnitGetOwner(lv_dummyUnit), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true)) {
                UnitControlGroupAddUnit(lv_rolesPlayer, lv_group, lv_dummyUnit);
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CustomControlGroups_Init () {
    gt_CustomControlGroups = TriggerCreate("gt_CustomControlGroups_Func");
    TriggerEnable(gt_CustomControlGroups, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Text
//--------------------------------------------------------------------------------------------------
bool gt_IntroText_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(10.0, c_timeReal);
    UIDisplayMessage(gv_gameData.lv_goodArmyPlayers, c_messageAreaSubtitle, StringExternal("Param/Value/9B43BA0E"));
    UIDisplayMessage(PlayerGroupSingle(gv_gameData.lv_rolesOwners[gv_syn.lv_roleZadkiel]), c_messageAreaSubtitle, StringExternal("Param/Value/2FFEC293"));
    UIDisplayMessage(gv_gameData.lv_primeEvils, c_messageAreaSubtitle, StringExternal("Param/Value/4CCCF504"));
    UIDisplayMessage(PlayerGroupSingle(gv_gameData.lv_rolesOwners[gv_syn.lv_roleMoloch]), c_messageAreaSubtitle, StringExternal("Param/Value/99F38BC0"));
    Wait(25.0, c_timeReal);
    UIDisplayMessage(gv_gameData.lv_goodArmyPlayers, c_messageAreaSubtitle, StringExternal("Param/Value/F1ED70EB"));
    UIDisplayMessage(PlayerGroupSingle(gv_gameData.lv_rolesOwners[gv_syn.lv_roleZadkiel]), c_messageAreaSubtitle, StringExternal("Param/Value/020C1F24"));
    UIDisplayMessage(gv_gameData.lv_primeEvils, c_messageAreaSubtitle, StringExternal("Param/Value/B5F8670D"));
    UIDisplayMessage(PlayerGroupSingle(gv_gameData.lv_rolesOwners[gv_syn.lv_roleMoloch]), c_messageAreaSubtitle, StringExternal("Param/Value/4DB07CBF"));
    Wait(15.0, c_timeReal);
    UIDisplayMessage(gv_gameData.lv_playerGroupHeaven, c_messageAreaSubtitle, StringExternal("Param/Value/3D3BB001"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroText_Init () {
    gt_IntroText = TriggerCreate("gt_IntroText_Func");
    TriggerEnable(gt_IntroText, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create Raphael Cargo
//--------------------------------------------------------------------------------------------------
bool gt_CreateRaphaelCargo_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_group;

    // Automatic Variable Declarations
    unitgroup autoDD064B43_g;
    int autoDD064B43_u;
    unit autoDD064B43_var;

    // Variable Initialization
    lv_group = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCargoCreate(UnitFromId(211), "Marauder", 2);
    UnitGroupAddUnitGroup(lv_group, UnitLastCreatedGroup());
    UnitCargoCreate(UnitFromId(211), "Goliath", 2);
    UnitGroupAddUnitGroup(lv_group, UnitLastCreatedGroup());
    autoDD064B43_g = lv_group;
    autoDD064B43_u = UnitGroupCount(autoDD064B43_g, c_unitCountAll);
    for (;; autoDD064B43_u -= 1) {
        autoDD064B43_var = UnitGroupUnitFromEnd(autoDD064B43_g, autoDD064B43_u);
        if (autoDD064B43_var == null) { break; }
        UnitSetTeamColorIndex(autoDD064B43_var, 3);
        UnitSetCustomValue(autoDD064B43_var, 62, gf_GetRoleNumber("0003"));
        gv_playerData[UnitGetOwner(autoDD064B43_var)].lv_aftermathElitesTotal += 1;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreateRaphaelCargo_Init () {
    gt_CreateRaphaelCargo = TriggerCreate("gt_CreateRaphaelCargo_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Aftermath Dialog Responses
//--------------------------------------------------------------------------------------------------
bool gt_AftermathDialogResponses_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_item;
    int lv_button;
    playergroup lv_player;
    int lv_num;

    // Automatic Variable Declarations
    const int auto4462EF51_ae = 9;
    int auto4462EF51_var;

    // Variable Initialization
    lv_item = c_invalidDialogControlId;
    lv_button = c_invalidDialogControlId;
    lv_player = PlayerGroupSingle(EventPlayer());
    lv_num = -1;

    // Conditions
    if (testConds) {
        if (!((DialogControlGetDialog(EventDialogControl()) == gv_gameData.lv_aftermathDialog))) {
            return false;
        }

        if (!(((gv_playerData[EventPlayer()].lv_aftermathAvailableKudos > 0) || (EventDialogControl() == gv_gameData.lv_aftermathEXITButton)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventDialogControlEventType() == c_triggerControlEventTypeClick) && (EventDialogControl() == gv_gameData.lv_aftermathEXITButton)) {
        gf_FinishGameforPlayer(EventPlayer());
    }

    auto4462EF51_var = 0;
    for ( ; auto4462EF51_var <= auto4462EF51_ae; auto4462EF51_var += 1 ) {
        if ((gv_gameData.lv_aftermathKudosButton[auto4462EF51_var] == EventDialogControl())) {
            lv_item = gv_gameData.lv_aftermathKudosIcon[auto4462EF51_var];
            lv_button = gv_gameData.lv_aftermathKudosButton[auto4462EF51_var];
            lv_num = auto4462EF51_var;
        }

    }
    if ((lv_num == -1)) {
        return true;
    }

    if ((EventDialogControlEventType() == c_triggerControlEventTypeMouseEnter)) {
        libNtve_gf_SetDialogItemDesaturationColor(lv_item, Color(100,100,100), lv_player);
        return true;
    }

    if ((EventDialogControlEventType() == c_triggerControlEventTypeMouseExit)) {
        libNtve_gf_SetDialogItemDesaturationColor(lv_item, Color(0,0,0), lv_player);
        return true;
    }

    if ((EventDialogControlEventType() == c_triggerControlEventTypeClick)) {
        libNtve_gf_SetDialogItemDesaturated(lv_item, false, lv_player);
        DialogControlSetVisible(lv_button, lv_player, false);
        gf_AftermathAcknowledgeplayer(EventPlayer(), gv_gameData.lv_rolesOwners[lv_num]);
        return true;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AftermathDialogResponses_Init () {
    gt_AftermathDialogResponses = TriggerCreate("gt_AftermathDialogResponses_Func");
    TriggerAddEventDialogControl(gt_AftermathDialogResponses, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeMouseEnter);
    TriggerAddEventDialogControl(gt_AftermathDialogResponses, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeMouseExit);
    TriggerAddEventDialogControl(gt_AftermathDialogResponses, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CreateGodTimerWindow
//--------------------------------------------------------------------------------------------------
bool gt_CreateGodTimerWindow_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(320, 40, c_anchorTopRight, 36, 0, false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogSetImage(DialogLastCreated(), "Assets\\Textures\\ui_battlenet_glue_listboxframe.dds");
    DialogSetTransparency(DialogLastCreated(), 40.0);
    gv_gameData.lv_timerWindowDialog = DialogLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 210, 40, c_anchorLeft, 5, 2, StringExternal("Param/Value/0CC9B71E"), Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "HBCentered", PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 90, 40, c_anchorRight, 5, 2, TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), FixedToInt(TimerGetRemaining(gv_gameData.lv_godTimer))), Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "HBCentered", PlayerGroupAll());
    while ((TimerGetRemaining(gv_gameData.lv_godTimer) > 0.0)) {
        libNtve_gf_SetDialogItemText(DialogControlLastCreated(), TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), FixedToInt(TimerGetRemaining(gv_gameData.lv_godTimer))), PlayerGroupAll());
        Wait(1.0, c_timeReal);
    }
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreateGodTimerWindow_Init () {
    gt_CreateGodTimerWindow = TriggerCreate("gt_CreateGodTimerWindow_Func");
    TriggerEnable(gt_CreateGodTimerWindow, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Just to be sure...
//--------------------------------------------------------------------------------------------------
bool gt_Justtobesure_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(UnitFromId(783)) == false))) {
            return false;
        }

        if (!((UnitIsAlive(UnitFromId(692)) == false))) {
            return false;
        }

        if (!((UnitIsAlive(UnitFromId(705)) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_HeavenVictoryTriggeredByPrimeDeath(false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Justtobesure_Init () {
    gt_Justtobesure = TriggerCreate("gt_Justtobesure_Func");
    TriggerEnable(gt_Justtobesure, false);
    TriggerAddEventTimePeriodic(gt_Justtobesure, 30.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spawn @Gateway
//--------------------------------------------------------------------------------------------------
bool gt_SpawnGateway_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_group;

    // Automatic Variable Declarations
    unitgroup auto088DA79E_g;
    int auto088DA79E_u;
    unit auto088DA79E_var;
    unitgroup auto450C778C_g;
    int auto450C778C_u;
    unit auto450C778C_var;
    unitgroup auto65FD73F7_g;
    int auto65FD73F7_u;
    unit auto65FD73F7_var;
    unitgroup autoB4ECC99E_g;
    int autoB4ECC99E_u;
    unit autoB4ECC99E_var;
    unitgroup autoAD704487_g;
    int autoAD704487_u;
    unit autoAD704487_var;

    // Variable Initialization
    lv_group = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(UnitFromId(200)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(3, "Marine", 0, gv_gameData.lv_rolesOwners[gv_syn.lv_roleMichael], RegionGetCenter(RegionFromId(13)));
    UnitGroupAddUnitGroup(lv_group, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(2, "Firebat", 0, gv_gameData.lv_rolesOwners[gv_syn.lv_roleMichael], RegionGetCenter(RegionFromId(13)));
    UnitGroupAddUnitGroup(lv_group, UnitLastCreatedGroup());
    auto088DA79E_g = lv_group;
    auto088DA79E_u = UnitGroupCount(auto088DA79E_g, c_unitCountAll);
    for (;; auto088DA79E_u -= 1) {
        auto088DA79E_var = UnitGroupUnitFromEnd(auto088DA79E_g, auto088DA79E_u);
        if (auto088DA79E_var == null) { break; }
        UnitSetTeamColorIndex(auto088DA79E_var, 3);
        UnitSetCustomValue(auto088DA79E_var, 62, gf_GetRoleNumber("0003"));
        gv_playerData[UnitGetOwner(auto088DA79E_var)].lv_aftermathElitesTotal += 1;
        UnitBehaviorAdd(auto088DA79E_var, "SystemHevenReinforcementVisual", auto088DA79E_var, 1);
    }
    UnitGroupClear(lv_group);
    libNtve_gf_CreateUnitsWithDefaultFacing(2, "Goliath", 0, gv_gameData.lv_rolesOwners[gv_syn.lv_roleUriel], RegionGetCenter(RegionFromId(10)));
    UnitGroupAddUnitGroup(lv_group, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(2, "Reaper", 0, gv_gameData.lv_rolesOwners[gv_syn.lv_roleUriel], RegionGetCenter(RegionFromId(10)));
    UnitGroupAddUnitGroup(lv_group, UnitLastCreatedGroup());
    auto450C778C_g = lv_group;
    auto450C778C_u = UnitGroupCount(auto450C778C_g, c_unitCountAll);
    for (;; auto450C778C_u -= 1) {
        auto450C778C_var = UnitGroupUnitFromEnd(auto450C778C_g, auto450C778C_u);
        if (auto450C778C_var == null) { break; }
        UnitSetTeamColorIndex(auto450C778C_var, 7);
        UnitSetCustomValue(auto450C778C_var, 62, gf_GetRoleNumber("0002"));
        gv_playerData[UnitGetOwner(auto450C778C_var)].lv_aftermathElitesTotal += 1;
        UnitBehaviorAdd(auto450C778C_var, "SystemHevenReinforcementVisual", auto450C778C_var, 1);
    }
    UnitGroupClear(lv_group);
    libNtve_gf_CreateUnitsWithDefaultFacing(2, "Stalker2", 0, gv_gameData.lv_rolesOwners[gv_syn.lv_roleSeraphiel], RegionGetCenter(RegionFromId(11)));
    UnitGroupAddUnitGroup(lv_group, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(2, "Marauder", 0, gv_gameData.lv_rolesOwners[gv_syn.lv_roleSeraphiel], RegionGetCenter(RegionFromId(11)));
    UnitGroupAddUnitGroup(lv_group, UnitLastCreatedGroup());
    auto65FD73F7_g = lv_group;
    auto65FD73F7_u = UnitGroupCount(auto65FD73F7_g, c_unitCountAll);
    for (;; auto65FD73F7_u -= 1) {
        auto65FD73F7_var = UnitGroupUnitFromEnd(auto65FD73F7_g, auto65FD73F7_u);
        if (auto65FD73F7_var == null) { break; }
        UnitSetTeamColorIndex(auto65FD73F7_var, 4);
        UnitSetCustomValue(auto65FD73F7_var, 62, gf_GetRoleNumber("0004"));
        gv_playerData[UnitGetOwner(auto65FD73F7_var)].lv_aftermathElitesTotal += 1;
        UnitBehaviorAdd(auto65FD73F7_var, "SystemHevenReinforcementVisual", auto65FD73F7_var, 1);
    }
    UnitGroupClear(lv_group);
    libNtve_gf_CreateUnitsWithDefaultFacing(2, "Diamondback", 0, gv_gameData.lv_rolesOwners[gv_syn.lv_roleJehoel], RegionGetCenter(RegionFromId(12)));
    UnitGroupAddUnitGroup(lv_group, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(2, "Zealot", 0, gv_gameData.lv_rolesOwners[gv_syn.lv_roleJehoel], RegionGetCenter(RegionFromId(12)));
    autoB4ECC99E_g = UnitLastCreatedGroup();
    autoB4ECC99E_u = UnitGroupCount(autoB4ECC99E_g, c_unitCountAll);
    for (;; autoB4ECC99E_u -= 1) {
        autoB4ECC99E_var = UnitGroupUnitFromEnd(autoB4ECC99E_g, autoB4ECC99E_u);
        if (autoB4ECC99E_var == null) { break; }
        UnitIssueOrder(autoB4ECC99E_var, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    }
    UnitGroupAddUnitGroup(lv_group, UnitLastCreatedGroup());
    autoAD704487_g = lv_group;
    autoAD704487_u = UnitGroupCount(autoAD704487_g, c_unitCountAll);
    for (;; autoAD704487_u -= 1) {
        autoAD704487_var = UnitGroupUnitFromEnd(autoAD704487_g, autoAD704487_u);
        if (autoAD704487_var == null) { break; }
        UnitSetTeamColorIndex(autoAD704487_var, 12);
        UnitSetCustomValue(autoAD704487_var, 62, gf_GetRoleNumber("0005"));
        gv_playerData[UnitGetOwner(autoAD704487_var)].lv_aftermathElitesTotal += 1;
        UnitBehaviorAdd(autoAD704487_var, "SystemHevenReinforcementVisual", autoAD704487_var, 1);
    }
    UIDisplayMessage(gv_gameData.lv_playerGroupHeaven, c_messageAreaSubtitle, StringExternal("Param/Value/412956B2"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpawnGateway_Init () {
    gt_SpawnGateway = TriggerCreate("gt_SpawnGateway_Func");
    TriggerAddEventTimer(gt_SpawnGateway, gv__35minuterealtimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spawn @Enclave
//--------------------------------------------------------------------------------------------------
bool gt_SpawnEnclave_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoDA541C60_g;
    int autoDA541C60_u;
    unit autoDA541C60_var;
    unitgroup auto236B9967_g;
    int auto236B9967_u;
    unit auto236B9967_var;
    unitgroup auto2846881A_g;
    int auto2846881A_u;
    unit auto2846881A_var;
    unitgroup auto09DA8236_g;
    int auto09DA8236_u;
    unit auto09DA8236_var;
    unitgroup auto516E8043_g;
    int auto516E8043_u;
    unit auto516E8043_var;
    unitgroup auto2B53FD93_g;
    int auto2B53FD93_u;
    unit auto2B53FD93_var;
    unitgroup autoC9F52EE3_g;
    int autoC9F52EE3_u;
    unit autoC9F52EE3_var;
    unitgroup auto22A43F85_g;
    int auto22A43F85_u;
    unit auto22A43F85_var;
    unitgroup auto590AE22D_g;
    int auto590AE22D_u;
    unit auto590AE22D_var;
    unitgroup auto46856B58_g;
    int auto46856B58_u;
    unit auto46856B58_var;
    unitgroup autoBC00F107_g;
    int autoBC00F107_u;
    unit autoBC00F107_var;
    unitgroup autoE08A56FC_g;
    int autoE08A56FC_u;
    unit autoE08A56FC_var;
    unitgroup auto0FCB4B64_g;
    int auto0FCB4B64_u;
    unit auto0FCB4B64_var;
    unitgroup auto87D18A8C_g;
    int auto87D18A8C_u;
    unit auto87D18A8C_var;
    unitgroup auto5C710CAA_g;
    int auto5C710CAA_u;
    unit auto5C710CAA_var;
    unitgroup auto1261ECFD_g;
    int auto1261ECFD_u;
    unit auto1261ECFD_var;

    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(UnitFromId(46)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsAlive(UnitFromId(200)) == true)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(6, "Ghost", 0, gv_gameData.lv_rolesOwners[gv_syn.lv_roleMichael], RegionGetCenter(RegionFromId(26)));
        auto0FCB4B64_g = UnitLastCreatedGroup();
        auto0FCB4B64_u = UnitGroupCount(auto0FCB4B64_g, c_unitCountAll);
        for (;; auto0FCB4B64_u -= 1) {
            auto0FCB4B64_var = UnitGroupUnitFromEnd(auto0FCB4B64_g, auto0FCB4B64_u);
            if (auto0FCB4B64_var == null) { break; }
            UnitSetTeamColorIndex(auto0FCB4B64_var, 3);
            UnitSetCustomValue(auto0FCB4B64_var, 62, gf_GetRoleNumber("0003"));
            gv_playerData[UnitGetOwner(auto0FCB4B64_var)].lv_aftermathElitesTotal += 1;
            UnitBehaviorAdd(auto0FCB4B64_var, "SystemHevenReinforcementVisual", auto0FCB4B64_var, 1);
        }
        libNtve_gf_CreateUnitsWithDefaultFacing(6, "Ghost", 0, gv_gameData.lv_rolesOwners[gv_syn.lv_roleJehoel], RegionGetCenter(RegionFromId(25)));
        auto87D18A8C_g = UnitLastCreatedGroup();
        auto87D18A8C_u = UnitGroupCount(auto87D18A8C_g, c_unitCountAll);
        for (;; auto87D18A8C_u -= 1) {
            auto87D18A8C_var = UnitGroupUnitFromEnd(auto87D18A8C_g, auto87D18A8C_u);
            if (auto87D18A8C_var == null) { break; }
            UnitSetTeamColorIndex(auto87D18A8C_var, 12);
            UnitSetCustomValue(auto87D18A8C_var, 62, gf_GetRoleNumber("0005"));
            gv_playerData[UnitGetOwner(auto87D18A8C_var)].lv_aftermathElitesTotal += 1;
            UnitBehaviorAdd(auto87D18A8C_var, "SystemHevenReinforcementVisual", auto87D18A8C_var, 1);
        }
        libNtve_gf_CreateUnitsWithDefaultFacing(6, "Ghost", 0, gv_gameData.lv_rolesOwners[gv_syn.lv_roleSeraphiel], RegionGetCenter(RegionFromId(24)));
        auto5C710CAA_g = UnitLastCreatedGroup();
        auto5C710CAA_u = UnitGroupCount(auto5C710CAA_g, c_unitCountAll);
        for (;; auto5C710CAA_u -= 1) {
            auto5C710CAA_var = UnitGroupUnitFromEnd(auto5C710CAA_g, auto5C710CAA_u);
            if (auto5C710CAA_var == null) { break; }
            UnitSetTeamColorIndex(auto5C710CAA_var, 4);
            UnitSetCustomValue(auto5C710CAA_var, 62, gf_GetRoleNumber("0004"));
            gv_playerData[UnitGetOwner(auto5C710CAA_var)].lv_aftermathElitesTotal += 1;
            UnitBehaviorAdd(auto5C710CAA_var, "SystemHevenReinforcementVisual", auto5C710CAA_var, 1);
        }
        libNtve_gf_CreateUnitsWithDefaultFacing(6, "Ghost", 0, gv_gameData.lv_rolesOwners[gv_syn.lv_roleUriel], RegionGetCenter(RegionFromId(23)));
        auto1261ECFD_g = UnitLastCreatedGroup();
        auto1261ECFD_u = UnitGroupCount(auto1261ECFD_g, c_unitCountAll);
        for (;; auto1261ECFD_u -= 1) {
            auto1261ECFD_var = UnitGroupUnitFromEnd(auto1261ECFD_g, auto1261ECFD_u);
            if (auto1261ECFD_var == null) { break; }
            UnitSetTeamColorIndex(auto1261ECFD_var, 7);
            UnitSetCustomValue(auto1261ECFD_var, 62, gf_GetRoleNumber("0002"));
            gv_playerData[UnitGetOwner(auto1261ECFD_var)].lv_aftermathElitesTotal += 1;
            UnitBehaviorAdd(auto1261ECFD_var, "SystemHevenReinforcementVisual", auto1261ECFD_var, 1);
        }
    }
    else {
        if ((UnitIsAlive(UnitFromId(211)) == true)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Firebat", 0, gv_gameData.lv_rolesOwners[gv_syn.lv_roleMichael], RegionGetCenter(RegionFromId(26)));
            autoDA541C60_g = UnitLastCreatedGroup();
            autoDA541C60_u = UnitGroupCount(autoDA541C60_g, c_unitCountAll);
            for (;; autoDA541C60_u -= 1) {
                autoDA541C60_var = UnitGroupUnitFromEnd(autoDA541C60_g, autoDA541C60_u);
                if (autoDA541C60_var == null) { break; }
                UnitSetTeamColorIndex(autoDA541C60_var, 3);
                UnitSetCustomValue(autoDA541C60_var, 62, gf_GetRoleNumber("0003"));
                gv_playerData[UnitGetOwner(autoDA541C60_var)].lv_aftermathElitesTotal += 1;
                UnitBehaviorAdd(autoDA541C60_var, "SystemHevenReinforcementVisual", autoDA541C60_var, 1);
            }
        }

        if ((UnitIsAlive(UnitFromId(729)) == true)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "Marine", 0, gv_gameData.lv_rolesOwners[gv_syn.lv_roleMichael], RegionGetCenter(RegionFromId(26)));
            auto236B9967_g = UnitLastCreatedGroup();
            auto236B9967_u = UnitGroupCount(auto236B9967_g, c_unitCountAll);
            for (;; auto236B9967_u -= 1) {
                auto236B9967_var = UnitGroupUnitFromEnd(auto236B9967_g, auto236B9967_u);
                if (auto236B9967_var == null) { break; }
                UnitSetTeamColorIndex(auto236B9967_var, 3);
                UnitSetCustomValue(auto236B9967_var, 62, gf_GetRoleNumber("0003"));
                gv_playerData[UnitGetOwner(auto236B9967_var)].lv_aftermathElitesTotal += 1;
                UnitBehaviorAdd(auto236B9967_var, "SystemHevenReinforcementVisual", auto236B9967_var, 1);
            }
        }

        libNtve_gf_CreateUnitsWithDefaultFacing(3, "Ghost", 0, gv_gameData.lv_rolesOwners[gv_syn.lv_roleMichael], RegionGetCenter(RegionFromId(26)));
        auto2846881A_g = UnitLastCreatedGroup();
        auto2846881A_u = UnitGroupCount(auto2846881A_g, c_unitCountAll);
        for (;; auto2846881A_u -= 1) {
            auto2846881A_var = UnitGroupUnitFromEnd(auto2846881A_g, auto2846881A_u);
            if (auto2846881A_var == null) { break; }
            UnitSetTeamColorIndex(auto2846881A_var, 3);
            UnitSetCustomValue(auto2846881A_var, 62, gf_GetRoleNumber("0003"));
            gv_playerData[UnitGetOwner(auto2846881A_var)].lv_aftermathElitesTotal += 1;
            UnitBehaviorAdd(auto2846881A_var, "SystemHevenReinforcementVisual", auto2846881A_var, 1);
        }
        if ((UnitIsAlive(UnitFromId(347)) == true)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zealot", 0, gv_gameData.lv_rolesOwners[gv_syn.lv_roleJehoel], RegionGetCenter(RegionFromId(25)));
            auto09DA8236_g = UnitLastCreatedGroup();
            auto09DA8236_u = UnitGroupCount(auto09DA8236_g, c_unitCountAll);
            for (;; auto09DA8236_u -= 1) {
                auto09DA8236_var = UnitGroupUnitFromEnd(auto09DA8236_g, auto09DA8236_u);
                if (auto09DA8236_var == null) { break; }
                UnitSetTeamColorIndex(auto09DA8236_var, 12);
                UnitSetCustomValue(auto09DA8236_var, 62, gf_GetRoleNumber("0005"));
                gv_playerData[UnitGetOwner(auto09DA8236_var)].lv_aftermathElitesTotal += 1;
                UnitBehaviorAdd(auto09DA8236_var, "SystemHevenReinforcementVisual", auto09DA8236_var, 1);
                UnitIssueOrder(auto09DA8236_var, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
            }
        }

        if ((UnitIsAlive(UnitFromId(348)) == true)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Diamondback", 0, gv_gameData.lv_rolesOwners[gv_syn.lv_roleJehoel], RegionGetCenter(RegionFromId(25)));
            auto516E8043_g = UnitLastCreatedGroup();
            auto516E8043_u = UnitGroupCount(auto516E8043_g, c_unitCountAll);
            for (;; auto516E8043_u -= 1) {
                auto516E8043_var = UnitGroupUnitFromEnd(auto516E8043_g, auto516E8043_u);
                if (auto516E8043_var == null) { break; }
                UnitSetTeamColorIndex(auto516E8043_var, 12);
                UnitSetCustomValue(auto516E8043_var, 62, gf_GetRoleNumber("0005"));
                gv_playerData[UnitGetOwner(auto516E8043_var)].lv_aftermathElitesTotal += 1;
                UnitBehaviorAdd(auto516E8043_var, "SystemHevenReinforcementVisual", auto516E8043_var, 1);
            }
        }

        libNtve_gf_CreateUnitsWithDefaultFacing(3, "Ghost", 0, gv_gameData.lv_rolesOwners[gv_syn.lv_roleJehoel], RegionGetCenter(RegionFromId(25)));
        auto2B53FD93_g = UnitLastCreatedGroup();
        auto2B53FD93_u = UnitGroupCount(auto2B53FD93_g, c_unitCountAll);
        for (;; auto2B53FD93_u -= 1) {
            auto2B53FD93_var = UnitGroupUnitFromEnd(auto2B53FD93_g, auto2B53FD93_u);
            if (auto2B53FD93_var == null) { break; }
            UnitSetTeamColorIndex(auto2B53FD93_var, 12);
            UnitSetCustomValue(auto2B53FD93_var, 62, gf_GetRoleNumber("0005"));
            gv_playerData[UnitGetOwner(auto2B53FD93_var)].lv_aftermathElitesTotal += 1;
            UnitBehaviorAdd(auto2B53FD93_var, "SystemHevenReinforcementVisual", auto2B53FD93_var, 1);
        }
        if ((UnitIsAlive(UnitFromId(313)) == true)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Marauder", 0, gv_gameData.lv_rolesOwners[gv_syn.lv_roleSeraphiel], RegionGetCenter(RegionFromId(24)));
            autoC9F52EE3_g = UnitLastCreatedGroup();
            autoC9F52EE3_u = UnitGroupCount(autoC9F52EE3_g, c_unitCountAll);
            for (;; autoC9F52EE3_u -= 1) {
                autoC9F52EE3_var = UnitGroupUnitFromEnd(autoC9F52EE3_g, autoC9F52EE3_u);
                if (autoC9F52EE3_var == null) { break; }
                UnitSetTeamColorIndex(autoC9F52EE3_var, 4);
                UnitSetCustomValue(autoC9F52EE3_var, 62, gf_GetRoleNumber("0004"));
                gv_playerData[UnitGetOwner(autoC9F52EE3_var)].lv_aftermathElitesTotal += 1;
                UnitBehaviorAdd(autoC9F52EE3_var, "SystemHevenReinforcementVisual", autoC9F52EE3_var, 1);
            }
        }

        if ((UnitIsAlive(UnitFromId(330)) == true)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Stalker2", 0, gv_gameData.lv_rolesOwners[gv_syn.lv_roleSeraphiel], RegionGetCenter(RegionFromId(24)));
            auto22A43F85_g = UnitLastCreatedGroup();
            auto22A43F85_u = UnitGroupCount(auto22A43F85_g, c_unitCountAll);
            for (;; auto22A43F85_u -= 1) {
                auto22A43F85_var = UnitGroupUnitFromEnd(auto22A43F85_g, auto22A43F85_u);
                if (auto22A43F85_var == null) { break; }
                UnitSetTeamColorIndex(auto22A43F85_var, 4);
                UnitSetCustomValue(auto22A43F85_var, 62, gf_GetRoleNumber("0004"));
                gv_playerData[UnitGetOwner(auto22A43F85_var)].lv_aftermathElitesTotal += 1;
                UnitBehaviorAdd(auto22A43F85_var, "SystemHevenReinforcementVisual", auto22A43F85_var, 1);
            }
        }

        libNtve_gf_CreateUnitsWithDefaultFacing(3, "Ghost", 0, gv_gameData.lv_rolesOwners[gv_syn.lv_roleSeraphiel], RegionGetCenter(RegionFromId(24)));
        auto590AE22D_g = UnitLastCreatedGroup();
        auto590AE22D_u = UnitGroupCount(auto590AE22D_g, c_unitCountAll);
        for (;; auto590AE22D_u -= 1) {
            auto590AE22D_var = UnitGroupUnitFromEnd(auto590AE22D_g, auto590AE22D_u);
            if (auto590AE22D_var == null) { break; }
            UnitSetTeamColorIndex(auto590AE22D_var, 4);
            UnitSetCustomValue(auto590AE22D_var, 62, gf_GetRoleNumber("0004"));
            gv_playerData[UnitGetOwner(auto590AE22D_var)].lv_aftermathElitesTotal += 1;
            UnitBehaviorAdd(auto590AE22D_var, "SystemHevenReinforcementVisual", auto590AE22D_var, 1);
        }
        if ((UnitIsAlive(UnitFromId(65)) == true)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Goliath", 0, gv_gameData.lv_rolesOwners[gv_syn.lv_roleUriel], RegionGetCenter(RegionFromId(23)));
            auto46856B58_g = UnitLastCreatedGroup();
            auto46856B58_u = UnitGroupCount(auto46856B58_g, c_unitCountAll);
            for (;; auto46856B58_u -= 1) {
                auto46856B58_var = UnitGroupUnitFromEnd(auto46856B58_g, auto46856B58_u);
                if (auto46856B58_var == null) { break; }
                UnitSetTeamColorIndex(auto46856B58_var, 7);
                UnitSetCustomValue(auto46856B58_var, 62, gf_GetRoleNumber("0002"));
                gv_playerData[UnitGetOwner(auto46856B58_var)].lv_aftermathElitesTotal += 1;
                UnitBehaviorAdd(auto46856B58_var, "SystemHevenReinforcementVisual", auto46856B58_var, 1);
            }
        }

        if ((UnitIsAlive(UnitFromId(440)) == true)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Reaper", 0, gv_gameData.lv_rolesOwners[gv_syn.lv_roleUriel], RegionGetCenter(RegionFromId(23)));
            autoBC00F107_g = UnitLastCreatedGroup();
            autoBC00F107_u = UnitGroupCount(autoBC00F107_g, c_unitCountAll);
            for (;; autoBC00F107_u -= 1) {
                autoBC00F107_var = UnitGroupUnitFromEnd(autoBC00F107_g, autoBC00F107_u);
                if (autoBC00F107_var == null) { break; }
                UnitSetTeamColorIndex(autoBC00F107_var, 7);
                UnitSetCustomValue(autoBC00F107_var, 62, gf_GetRoleNumber("0002"));
                gv_playerData[UnitGetOwner(autoBC00F107_var)].lv_aftermathElitesTotal += 1;
                UnitBehaviorAdd(autoBC00F107_var, "SystemHevenReinforcementVisual", autoBC00F107_var, 1);
            }
        }

        libNtve_gf_CreateUnitsWithDefaultFacing(3, "Ghost", 0, gv_gameData.lv_rolesOwners[gv_syn.lv_roleUriel], RegionGetCenter(RegionFromId(23)));
        autoE08A56FC_g = UnitLastCreatedGroup();
        autoE08A56FC_u = UnitGroupCount(autoE08A56FC_g, c_unitCountAll);
        for (;; autoE08A56FC_u -= 1) {
            autoE08A56FC_var = UnitGroupUnitFromEnd(autoE08A56FC_g, autoE08A56FC_u);
            if (autoE08A56FC_var == null) { break; }
            UnitSetTeamColorIndex(autoE08A56FC_var, 7);
            UnitSetCustomValue(autoE08A56FC_var, 62, gf_GetRoleNumber("0002"));
            gv_playerData[UnitGetOwner(autoE08A56FC_var)].lv_aftermathElitesTotal += 1;
            UnitBehaviorAdd(autoE08A56FC_var, "SystemHevenReinforcementVisual", autoE08A56FC_var, 1);
        }
    }
    UIDisplayMessage(gv_gameData.lv_playerGroupHeaven, c_messageAreaSubtitle, StringExternal("Param/Value/44BAE699"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpawnEnclave_Init () {
    gt_SpawnEnclave = TriggerCreate("gt_SpawnEnclave_Func");
    TriggerAddEventTimer(gt_SpawnEnclave, gv__35minuterealtimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spawn @Citadel
//--------------------------------------------------------------------------------------------------
bool gt_SpawnCitadel_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_group;

    // Automatic Variable Declarations
    unitgroup autoCCE4226F_g;
    int autoCCE4226F_u;
    unit autoCCE4226F_var;
    unitgroup auto120C4A07_g;
    int auto120C4A07_u;
    unit auto120C4A07_var;

    // Variable Initialization
    lv_group = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(UnitFromId(45)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(2, "Predator", 0, gv_gameData.lv_rolesOwners[gv_syn.lv_roleMessiah], RegionGetCenter(RegionFromId(14)));
    autoCCE4226F_g = UnitLastCreatedGroup();
    autoCCE4226F_u = UnitGroupCount(autoCCE4226F_g, c_unitCountAll);
    for (;; autoCCE4226F_u -= 1) {
        autoCCE4226F_var = UnitGroupUnitFromEnd(autoCCE4226F_g, autoCCE4226F_u);
        if (autoCCE4226F_var == null) { break; }
        UnitIssueOrder(autoCCE4226F_var, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    }
    UnitGroupAddUnitGroup(lv_group, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Thor", 0, gv_gameData.lv_rolesOwners[gv_syn.lv_roleMessiah], RegionGetCenter(RegionFromId(14)));
    UnitGroupAddUnitGroup(lv_group, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(3, "Spectre", 0, gv_gameData.lv_rolesOwners[gv_syn.lv_roleMessiah], RegionGetCenter(RegionFromId(15)));
    UnitGroupAddUnitGroup(lv_group, UnitLastCreatedGroup());
    auto120C4A07_g = lv_group;
    auto120C4A07_u = UnitGroupCount(auto120C4A07_g, c_unitCountAll);
    for (;; auto120C4A07_u -= 1) {
        auto120C4A07_var = UnitGroupUnitFromEnd(auto120C4A07_g, auto120C4A07_u);
        if (auto120C4A07_var == null) { break; }
        UnitSetTeamColorIndex(auto120C4A07_var, 0);
        UnitSetCustomValue(auto120C4A07_var, 62, gf_GetRoleNumber("0001"));
        gv_playerData[UnitGetOwner(auto120C4A07_var)].lv_aftermathElitesTotal += 1;
        UnitBehaviorAdd(auto120C4A07_var, "SystemHevenReinforcementVisual", auto120C4A07_var, 1);
    }
    UIDisplayMessage(PlayerGroupSingle(gv_gameData.lv_rolesOwners[gv_syn.lv_roleMessiah]), c_messageAreaSubtitle, StringExternal("Param/Value/D7AF63A5"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpawnCitadel_Init () {
    gt_SpawnCitadel = TriggerCreate("gt_SpawnCitadel_Func");
    TriggerAddEventTimer(gt_SpawnCitadel, gv__35minuterealtimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Post God Spawn @Throne
//--------------------------------------------------------------------------------------------------
bool gt_PostGodSpawnThrone_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_hellPlayer;
    int lv_player;
    unitgroup lv_group;
    point lv_point;

    // Automatic Variable Declarations
    unitgroup auto0E77E9CF_g;
    int auto0E77E9CF_u;
    unit auto0E77E9CF_var;
    unitgroup auto760EFA8B_g;
    int auto760EFA8B_u;
    unit auto760EFA8B_var;
    unitgroup autoFFF66E6E_g;
    int autoFFF66E6E_u;
    unit autoFFF66E6E_var;
    unitgroup auto2C1EA081_g;
    int auto2C1EA081_u;
    unit auto2C1EA081_var;
    unitgroup auto236FC81B_g;
    int auto236FC81B_u;
    unit auto236FC81B_var;
    unitgroup autoDB9226F9_g;
    int autoDB9226F9_u;
    unit autoDB9226F9_var;
    unitgroup autoF2CFB966_g;
    int autoF2CFB966_u;
    unit autoF2CFB966_var;

    // Variable Initialization
    lv_hellPlayer = gv_gameData.lv_rolesOwners[gv_syn.lv_roleDevil];
    lv_player = UnitGetOwner(UnitFromId(784));
    lv_group = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(UnitFromId(22)) == true))) {
            return false;
        }

        if (!((gv_gameData.lv_godhasArrived == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_point = RegionGetCenter(RegionFromId(34));
    UnitGroupClear(lv_group);
    libNtve_gf_CreateUnitsWithDefaultFacing(3, "Spectre", 0, gv_gameData.lv_rolesOwners[gv_syn.lv_roleMessiah], lv_point);
    UnitGroupAddUnitGroup(lv_group, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Thor", 0, gv_gameData.lv_rolesOwners[gv_syn.lv_roleMessiah], lv_point);
    UnitGroupAddUnitGroup(lv_group, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(2, "Predator", 0, gv_gameData.lv_rolesOwners[gv_syn.lv_roleMessiah], lv_point);
    UnitGroupAddUnitGroup(lv_group, UnitLastCreatedGroup());
    auto0E77E9CF_g = UnitLastCreatedGroup();
    auto0E77E9CF_u = UnitGroupCount(auto0E77E9CF_g, c_unitCountAll);
    for (;; auto0E77E9CF_u -= 1) {
        auto0E77E9CF_var = UnitGroupUnitFromEnd(auto0E77E9CF_g, auto0E77E9CF_u);
        if (auto0E77E9CF_var == null) { break; }
        UnitIssueOrder(auto0E77E9CF_var, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    }
    auto760EFA8B_g = lv_group;
    auto760EFA8B_u = UnitGroupCount(auto760EFA8B_g, c_unitCountAll);
    for (;; auto760EFA8B_u -= 1) {
        auto760EFA8B_var = UnitGroupUnitFromEnd(auto760EFA8B_g, auto760EFA8B_u);
        if (auto760EFA8B_var == null) { break; }
        UnitSetTeamColorIndex(auto760EFA8B_var, 0);
        UnitSetCustomValue(auto760EFA8B_var, 62, gf_GetRoleNumber("0001"));
        gv_playerData[UnitGetOwner(auto760EFA8B_var)].lv_aftermathElitesTotal += 1;
        UnitBehaviorAdd(auto760EFA8B_var, "SystemHevenReinforcementVisual", auto760EFA8B_var, 1);
    }
    lv_point = RegionGetCenter(RegionFromId(36));
    UnitGroupClear(lv_group);
    libNtve_gf_CreateUnitsWithDefaultFacing(3, "Marine", 0, gv_gameData.lv_rolesOwners[gv_syn.lv_roleMichael], lv_point);
    UnitGroupAddUnitGroup(lv_group, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(2, "Firebat", 0, gv_gameData.lv_rolesOwners[gv_syn.lv_roleMichael], lv_point);
    UnitGroupAddUnitGroup(lv_group, UnitLastCreatedGroup());
    autoFFF66E6E_g = lv_group;
    autoFFF66E6E_u = UnitGroupCount(autoFFF66E6E_g, c_unitCountAll);
    for (;; autoFFF66E6E_u -= 1) {
        autoFFF66E6E_var = UnitGroupUnitFromEnd(autoFFF66E6E_g, autoFFF66E6E_u);
        if (autoFFF66E6E_var == null) { break; }
        UnitSetTeamColorIndex(autoFFF66E6E_var, 3);
        UnitSetCustomValue(autoFFF66E6E_var, 62, gf_GetRoleNumber("0003"));
        gv_playerData[UnitGetOwner(autoFFF66E6E_var)].lv_aftermathElitesTotal += 1;
        UnitBehaviorAdd(autoFFF66E6E_var, "SystemHevenReinforcementVisual", autoFFF66E6E_var, 1);
    }
    lv_point = RegionGetCenter(RegionFromId(32));
    UnitGroupClear(lv_group);
    libNtve_gf_CreateUnitsWithDefaultFacing(2, "Goliath", 0, gv_gameData.lv_rolesOwners[gv_syn.lv_roleUriel], lv_point);
    UnitGroupAddUnitGroup(lv_group, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(2, "Reaper", 0, gv_gameData.lv_rolesOwners[gv_syn.lv_roleUriel], lv_point);
    UnitGroupAddUnitGroup(lv_group, UnitLastCreatedGroup());
    auto2C1EA081_g = lv_group;
    auto2C1EA081_u = UnitGroupCount(auto2C1EA081_g, c_unitCountAll);
    for (;; auto2C1EA081_u -= 1) {
        auto2C1EA081_var = UnitGroupUnitFromEnd(auto2C1EA081_g, auto2C1EA081_u);
        if (auto2C1EA081_var == null) { break; }
        UnitSetTeamColorIndex(auto2C1EA081_var, 7);
        UnitSetCustomValue(auto2C1EA081_var, 62, gf_GetRoleNumber("0002"));
        gv_playerData[UnitGetOwner(auto2C1EA081_var)].lv_aftermathElitesTotal += 1;
        UnitBehaviorAdd(auto2C1EA081_var, "SystemHevenReinforcementVisual", auto2C1EA081_var, 1);
    }
    lv_point = RegionGetCenter(RegionFromId(33));
    UnitGroupClear(lv_group);
    libNtve_gf_CreateUnitsWithDefaultFacing(2, "Stalker2", 0, gv_gameData.lv_rolesOwners[gv_syn.lv_roleSeraphiel], lv_point);
    UnitGroupAddUnitGroup(lv_group, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(2, "Marauder", 0, gv_gameData.lv_rolesOwners[gv_syn.lv_roleSeraphiel], lv_point);
    UnitGroupAddUnitGroup(lv_group, UnitLastCreatedGroup());
    auto236FC81B_g = lv_group;
    auto236FC81B_u = UnitGroupCount(auto236FC81B_g, c_unitCountAll);
    for (;; auto236FC81B_u -= 1) {
        auto236FC81B_var = UnitGroupUnitFromEnd(auto236FC81B_g, auto236FC81B_u);
        if (auto236FC81B_var == null) { break; }
        UnitSetTeamColorIndex(auto236FC81B_var, 4);
        UnitSetCustomValue(auto236FC81B_var, 62, gf_GetRoleNumber("0004"));
        gv_playerData[UnitGetOwner(auto236FC81B_var)].lv_aftermathElitesTotal += 1;
        UnitBehaviorAdd(auto236FC81B_var, "SystemHevenReinforcementVisual", auto236FC81B_var, 1);
    }
    lv_point = RegionGetCenter(RegionFromId(35));
    UnitGroupClear(lv_group);
    libNtve_gf_CreateUnitsWithDefaultFacing(2, "Diamondback", 0, gv_gameData.lv_rolesOwners[gv_syn.lv_roleJehoel], lv_point);
    UnitGroupAddUnitGroup(lv_group, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(2, "Zealot", 0, gv_gameData.lv_rolesOwners[gv_syn.lv_roleJehoel], lv_point);
    autoDB9226F9_g = UnitLastCreatedGroup();
    autoDB9226F9_u = UnitGroupCount(autoDB9226F9_g, c_unitCountAll);
    for (;; autoDB9226F9_u -= 1) {
        autoDB9226F9_var = UnitGroupUnitFromEnd(autoDB9226F9_g, autoDB9226F9_u);
        if (autoDB9226F9_var == null) { break; }
        UnitIssueOrder(autoDB9226F9_var, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    }
    UnitGroupAddUnitGroup(lv_group, UnitLastCreatedGroup());
    autoF2CFB966_g = lv_group;
    autoF2CFB966_u = UnitGroupCount(autoF2CFB966_g, c_unitCountAll);
    for (;; autoF2CFB966_u -= 1) {
        autoF2CFB966_var = UnitGroupUnitFromEnd(autoF2CFB966_g, autoF2CFB966_u);
        if (autoF2CFB966_var == null) { break; }
        UnitSetTeamColorIndex(autoF2CFB966_var, 12);
        UnitSetCustomValue(autoF2CFB966_var, 62, gf_GetRoleNumber("0005"));
        gv_playerData[UnitGetOwner(autoF2CFB966_var)].lv_aftermathElitesTotal += 1;
        UnitBehaviorAdd(autoF2CFB966_var, "SystemHevenReinforcementVisual", autoF2CFB966_var, 1);
    }
    UIDisplayMessage(gv_gameData.lv_playerGroupHeaven, c_messageAreaSubtitle, StringExternal("Param/Value/F2265C12"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PostGodSpawnThrone_Init () {
    gt_PostGodSpawnThrone = TriggerCreate("gt_PostGodSpawnThrone_Func");
    TriggerAddEventTimer(gt_PostGodSpawnThrone, gv__35minuterealtimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Elite Spawn Satan
//--------------------------------------------------------------------------------------------------
bool gt_EliteSpawnSatan_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_devilPlayer;
    unitgroup lv_group;
    int lv_player;

    // Automatic Variable Declarations
    unitgroup auto2F519533_g;
    int auto2F519533_u;
    unit auto2F519533_var;
    unitgroup autoC6434C7E_g;
    int autoC6434C7E_u;
    unit autoC6434C7E_var;
    unitgroup auto2B42722A_g;
    int auto2B42722A_u;
    unit auto2B42722A_var;
    unitgroup autoE212ED47_g;
    int autoE212ED47_u;
    unit autoE212ED47_var;

    // Variable Initialization
    lv_devilPlayer = gv_gameData.lv_rolesOwners[gv_syn.lv_roleDevil];
    lv_group = UnitGroupEmpty();
    lv_player = UnitGetOwner(UnitFromId(784));

    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(UnitFromId(784)) == true))) {
            return false;
        }

        if (!((gv_gameData.lv_godhasArrived == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupCount(gv_gameData.lv_playerGrigoriAmount[1], c_unitCountAlive) == 0)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Overseer", 0, lv_player, RegionGetCenter(RegionFromId(28)));
        UnitGroupAddUnitGroup(lv_group, UnitLastCreatedGroup());
        UnitGroupAdd(gv_gameData.lv_playerGrigoriAmount[1], UnitLastCreated());
        UnitSetCustomValue(UnitLastCreated(), gv_syn.lv_unitCustomValueCurrentRole, IntToFixed(gv_syn.lv_roleDevil));
        UIDisplayMessage(PlayerGroupSingle(lv_player), c_messageAreaSubtitle, StringExternal("Param/Value/7A269988"));
    }
    else {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Ultralisk2", 0, lv_player, RegionGetCenter(RegionFromId(1)));
        auto2F519533_g = UnitLastCreatedGroup();
        auto2F519533_u = UnitGroupCount(auto2F519533_g, c_unitCountAll);
        for (;; auto2F519533_u -= 1) {
            auto2F519533_var = UnitGroupUnitFromEnd(auto2F519533_g, auto2F519533_u);
            if (auto2F519533_var == null) { break; }
            UnitIssueOrder(auto2F519533_var, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
        }
        UnitGroupAddUnitGroup(lv_group, UnitLastCreatedGroup());
        libNtve_gf_CreateUnitsWithDefaultFacing(2, "Hunterling", 0, lv_player, RegionGetCenter(RegionFromId(2)));
        autoC6434C7E_g = UnitLastCreatedGroup();
        autoC6434C7E_u = UnitGroupCount(autoC6434C7E_g, c_unitCountAll);
        for (;; autoC6434C7E_u -= 1) {
            autoC6434C7E_var = UnitGroupUnitFromEnd(autoC6434C7E_g, autoC6434C7E_u);
            if (autoC6434C7E_var == null) { break; }
            UnitIssueOrder(autoC6434C7E_var, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
        }
        UnitGroupAddUnitGroup(lv_group, UnitLastCreatedGroup());
        libNtve_gf_CreateUnitsWithDefaultFacing(2, "Baneling", 0, lv_player, RegionGetCenter(RegionFromId(3)));
        auto2B42722A_g = UnitLastCreatedGroup();
        auto2B42722A_u = UnitGroupCount(auto2B42722A_g, c_unitCountAll);
        for (;; auto2B42722A_u -= 1) {
            auto2B42722A_var = UnitGroupUnitFromEnd(auto2B42722A_g, auto2B42722A_u);
            if (auto2B42722A_var == null) { break; }
            UnitIssueOrder(auto2B42722A_var, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
        }
        UnitGroupAddUnitGroup(lv_group, UnitLastCreatedGroup());
        UIDisplayMessage(PlayerGroupSingle(lv_player), c_messageAreaSubtitle, StringExternal("Param/Value/70853147"));
    }
    autoE212ED47_g = lv_group;
    autoE212ED47_u = UnitGroupCount(autoE212ED47_g, c_unitCountAll);
    for (;; autoE212ED47_u -= 1) {
        autoE212ED47_var = UnitGroupUnitFromEnd(autoE212ED47_g, autoE212ED47_u);
        if (autoE212ED47_var == null) { break; }
        if ((UnitGetOwner(autoE212ED47_var) != lv_devilPlayer)) {
            UnitGroupAdd(gv_gameData.lv_claimedTroops[UnitGetOwner(autoE212ED47_var)], autoE212ED47_var);
        }
        else {
            UnitSetTeamColorIndex(autoE212ED47_var, 1);
        }
        UnitSetCustomValue(autoE212ED47_var, gv_syn.lv_unitCustomValueOriginalPlayer, lv_devilPlayer);
        UnitSetCustomValue(autoE212ED47_var, gv_syn.lv_unitCustomValueOriginalRole, gf_GetRoleNumber("0007"));
        gv_playerData[UnitGetOwner(autoE212ED47_var)].lv_aftermathElitesTotal += 1;
        UnitBehaviorAdd(autoE212ED47_var, "SystemHellReinforcementVisual", autoE212ED47_var, 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EliteSpawnSatan_Init () {
    gt_EliteSpawnSatan = TriggerCreate("gt_EliteSpawnSatan_Func");
    TriggerAddEventTimer(gt_EliteSpawnSatan, gv__35minuterealtimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Elite Spawn Asmo
//--------------------------------------------------------------------------------------------------
bool gt_EliteSpawnAsmo_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_asmoPlayer;
    unitgroup lv_group;
    int lv_player;

    // Automatic Variable Declarations
    unitgroup auto3E1EF2E1_g;
    int auto3E1EF2E1_u;
    unit auto3E1EF2E1_var;

    // Variable Initialization
    lv_asmoPlayer = gv_gameData.lv_rolesOwners[gv_syn.lv_roleAsmodeus];
    lv_group = UnitGroupEmpty();
    lv_player = UnitGetOwner(UnitFromId(709));

    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(UnitFromId(709)) == true))) {
            return false;
        }

        if (!((gv_gameData.lv_godhasArrived == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupCount(gv_gameData.lv_playerGrigoriAmount[2], c_unitCountAlive) == 0)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Overseer", 0, lv_player, RegionGetCenter(RegionFromId(27)));
        UnitGroupAddUnitGroup(lv_group, UnitLastCreatedGroup());
        UnitGroupAdd(gv_gameData.lv_playerGrigoriAmount[2], UnitLastCreated());
        UnitSetCustomValue(UnitLastCreated(), gv_syn.lv_unitCustomValueCurrentRole, IntToFixed(gv_syn.lv_roleAsmodeus));
        UIDisplayMessage(PlayerGroupSingle(lv_player), c_messageAreaSubtitle, StringExternal("Param/Value/45B688AC"));
    }
    else {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "SiegeBreaker", 0, lv_player, RegionGetCenter(RegionFromId(4)));
        UnitGroupAddUnitGroup(lv_group, UnitLastCreatedGroup());
        libNtve_gf_CreateUnitsWithDefaultFacing(2, "VikingAssault", 0, lv_player, RegionGetCenter(RegionFromId(6)));
        UnitGroupAddUnitGroup(lv_group, UnitLastCreatedGroup());
        libNtve_gf_CreateUnitsWithDefaultFacing(2, "Immortal", 0, lv_player, RegionGetCenter(RegionFromId(7)));
        UnitGroupAddUnitGroup(lv_group, UnitLastCreatedGroup());
        UIDisplayMessage(PlayerGroupSingle(lv_player), c_messageAreaSubtitle, StringExternal("Param/Value/C81B84D4"));
    }
    auto3E1EF2E1_g = lv_group;
    auto3E1EF2E1_u = UnitGroupCount(auto3E1EF2E1_g, c_unitCountAll);
    for (;; auto3E1EF2E1_u -= 1) {
        auto3E1EF2E1_var = UnitGroupUnitFromEnd(auto3E1EF2E1_g, auto3E1EF2E1_u);
        if (auto3E1EF2E1_var == null) { break; }
        if ((UnitGetOwner(auto3E1EF2E1_var) != lv_asmoPlayer)) {
            UnitGroupAdd(gv_gameData.lv_claimedTroops[UnitGetOwner(auto3E1EF2E1_var)], auto3E1EF2E1_var);
        }
        else {
            UnitSetTeamColorIndex(auto3E1EF2E1_var, 6);
        }
        UnitSetCustomValue(auto3E1EF2E1_var, gv_syn.lv_unitCustomValueOriginalPlayer, lv_asmoPlayer);
        UnitSetCustomValue(auto3E1EF2E1_var, gv_syn.lv_unitCustomValueOriginalRole, gf_GetRoleNumber("0008"));
        gv_playerData[UnitGetOwner(auto3E1EF2E1_var)].lv_aftermathElitesTotal += 1;
        UnitBehaviorAdd(auto3E1EF2E1_var, "SystemHellReinforcementVisual", auto3E1EF2E1_var, 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EliteSpawnAsmo_Init () {
    gt_EliteSpawnAsmo = TriggerCreate("gt_EliteSpawnAsmo_Func");
    TriggerAddEventTimer(gt_EliteSpawnAsmo, gv__35minuterealtimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Elite Spawn Asta
//--------------------------------------------------------------------------------------------------
bool gt_EliteSpawnAsta_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_astaPlayer;
    unitgroup lv_group;
    int lv_player;

    // Automatic Variable Declarations
    unitgroup auto038215A8_g;
    int auto038215A8_u;
    unit auto038215A8_var;
    unitgroup auto314D240D_g;
    int auto314D240D_u;
    unit auto314D240D_var;

    // Variable Initialization
    lv_astaPlayer = gv_gameData.lv_rolesOwners[gv_syn.lv_roleAstaroth];
    lv_group = UnitGroupEmpty();
    lv_player = UnitGetOwner(UnitFromId(785));

    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(UnitFromId(785)) == true))) {
            return false;
        }

        if (!((gv_gameData.lv_godhasArrived == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupCount(gv_gameData.lv_playerGrigoriAmount[3], c_unitCountAlive) == 0)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Overseer", 0, lv_player, RegionGetCenter(RegionFromId(29)));
        UnitGroupAddUnitGroup(lv_group, UnitLastCreatedGroup());
        UnitGroupAdd(gv_gameData.lv_playerGrigoriAmount[3], UnitLastCreated());
        UnitSetCustomValue(UnitLastCreated(), gv_syn.lv_unitCustomValueCurrentRole, IntToFixed(gv_syn.lv_roleAstaroth));
        UIDisplayMessage(PlayerGroupSingle(lv_player), c_messageAreaSubtitle, StringExternal("Param/Value/BFB3614E"));
    }
    else {
        libNtve_gf_CreateUnitsWithDefaultFacing(2, "HunterKiller", 0, lv_player, RegionGetCenter(RegionFromId(5)));
        UnitGroupAddUnitGroup(lv_group, UnitLastCreatedGroup());
        libNtve_gf_CreateUnitsWithDefaultFacing(2, "Roach2", 0, lv_player, RegionGetCenter(RegionFromId(9)));
        UnitGroupAddUnitGroup(lv_group, UnitLastCreatedGroup());
        libNtve_gf_CreateUnitsWithDefaultFacing(12, "Fallen", 0, lv_player, RegionGetCenter(RegionFromId(8)));
        auto038215A8_g = UnitLastCreatedGroup();
        auto038215A8_u = UnitGroupCount(auto038215A8_g, c_unitCountAll);
        for (;; auto038215A8_u -= 1) {
            auto038215A8_var = UnitGroupUnitFromEnd(auto038215A8_g, auto038215A8_u);
            if (auto038215A8_var == null) { break; }
            UnitIssueOrder(auto038215A8_var, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
        }
        UnitGroupAddUnitGroup(lv_group, UnitLastCreatedGroup());
        UIDisplayMessage(PlayerGroupSingle(lv_player), c_messageAreaSubtitle, StringExternal("Param/Value/583A7DBE"));
    }
    auto314D240D_g = lv_group;
    auto314D240D_u = UnitGroupCount(auto314D240D_g, c_unitCountAll);
    for (;; auto314D240D_u -= 1) {
        auto314D240D_var = UnitGroupUnitFromEnd(auto314D240D_g, auto314D240D_u);
        if (auto314D240D_var == null) { break; }
        if ((UnitGetOwner(auto314D240D_var) != lv_astaPlayer)) {
            UnitGroupAdd(gv_gameData.lv_claimedTroops[UnitGetOwner(auto314D240D_var)], auto314D240D_var);
        }
        else {
            UnitSetTeamColorIndex(auto314D240D_var, 5);
        }
        UnitSetCustomValue(auto314D240D_var, gv_syn.lv_unitCustomValueOriginalPlayer, lv_astaPlayer);
        UnitSetCustomValue(auto314D240D_var, gv_syn.lv_unitCustomValueOriginalRole, gf_GetRoleNumber("0009"));
        gv_playerData[UnitGetOwner(auto314D240D_var)].lv_aftermathElitesTotal += 1;
        UnitBehaviorAdd(auto314D240D_var, "SystemHellReinforcementVisual", auto314D240D_var, 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EliteSpawnAsta_Init () {
    gt_EliteSpawnAsta = TriggerCreate("gt_EliteSpawnAsta_Func");
    TriggerAddEventTimer(gt_EliteSpawnAsta, gv__35minuterealtimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: The Messiah Dies (DP)
//--------------------------------------------------------------------------------------------------
bool gt_TheMessiahDiesDP_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_rng;
    text lv_messageText;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gv_deathMessages.lv_alignment = StringToText("");
    gv_deathMessages.lv_victim = EventUnit();
    if ((UnitGetType(libNtve_gf_KillingUnit()) == "Scourge")) {
        gv_deathMessages.lv_killer = UnitFromId(439);
    }
    else {
        gv_deathMessages.lv_killer = libNtve_gf_KillingUnit();
    }
    if ((UnitGroupHasUnit(UnitCargoGroup(UnitFromId(211)), libNtve_gf_KillingUnit()) == true)) {
        gv_deathMessages.lv_killer = UnitFromId(211);
    }

    gf_DeathMessageRefresh();
    if ((UnitTypeTestAttribute(UnitGetType(libNtve_gf_KillingUnit()), c_unitAttributeHeroic) == false)) {
        lv_messageText = gv_deathMessages.lv_specialUnit;
    }
    else {
        if ((UnitGetType(libNtve_gf_KillingUnit()) == "Artanis")) {
            lv_messageText = gv_deathMessages.lv_killedByGod;
        }
        else {
            lv_rng = RandomInt(0, 9);
            if (((lv_rng == 0) || (lv_rng == 1) || (lv_rng == 2) || (lv_rng == 3) || (lv_rng == 4) || (lv_rng == 5) || (lv_rng == 6))) {
                lv_messageText = gv_deathMessages.lv_heavenSpecialHero;
            }
            else {
                if (((lv_rng == 7) || (lv_rng == 8) || (lv_rng == 9))) {
                    lv_messageText = gv_deathMessages.lv_messiahJk1;
                }

            }
        }
    }
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, lv_messageText);
    gf_ScoreboardRefresh(false, gv_deathMessages.lv_victim, UnitGetOwner(gv_deathMessages.lv_killer));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TheMessiahDiesDP_Init () {
    gt_TheMessiahDiesDP = TriggerCreate("gt_TheMessiahDiesDP_Func");
    TriggerAddEventUnitDied(gt_TheMessiahDiesDP, UnitRefFromUnit(UnitFromId(501)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Gabriel Dies
//--------------------------------------------------------------------------------------------------
bool gt_GabrielDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_rng;
    text lv_messageText;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gv_deathMessages.lv_alignment = StringExternal("Param/Value/D9CA6861");
    gv_deathMessages.lv_victim = EventUnit();
    if ((UnitGetType(libNtve_gf_KillingUnit()) == "Scourge")) {
        gv_deathMessages.lv_killer = UnitFromId(439);
    }
    else {
        gv_deathMessages.lv_killer = libNtve_gf_KillingUnit();
    }
    if ((UnitGroupHasUnit(UnitCargoGroup(UnitFromId(211)), libNtve_gf_KillingUnit()) == true)) {
        gv_deathMessages.lv_killer = UnitFromId(211);
    }

    gf_DeathMessageRefresh();
    if ((UnitTypeTestAttribute(UnitGetType(libNtve_gf_KillingUnit()), c_unitAttributeHeroic) == false)) {
        lv_messageText = gv_deathMessages.lv_basicUnit;
    }
    else {
        if ((UnitGetType(libNtve_gf_KillingUnit()) == "Artanis")) {
            lv_messageText = gv_deathMessages.lv_killedByGod;
        }
        else {
            lv_rng = RandomInt(0, 9);
            if (((lv_rng == 0) || (lv_rng == 1) || (lv_rng == 2) || (lv_rng == 3) || (lv_rng == 4) || (lv_rng == 5) || (lv_rng == 6))) {
                lv_messageText = gv_deathMessages.lv_heavenBasicHero;
            }
            else {
                if (((lv_rng == 7) || (lv_rng == 8) || (lv_rng == 9))) {
                    lv_messageText = gv_deathMessages.lv_gabrielJk1;
                }

            }
        }
    }
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, lv_messageText);
    gf_ScoreboardRefresh(false, gv_deathMessages.lv_victim, UnitGetOwner(gv_deathMessages.lv_killer));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GabrielDies_Init () {
    gt_GabrielDies = TriggerCreate("gt_GabrielDies_Func");
    TriggerAddEventUnitDied(gt_GabrielDies, UnitRefFromUnit(UnitFromId(238160895)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Duma Dies
//--------------------------------------------------------------------------------------------------
bool gt_DumaDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_rng;
    text lv_messageText;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gv_deathMessages.lv_alignment = StringExternal("Param/Value/E26E1067");
    gv_deathMessages.lv_victim = EventUnit();
    if ((UnitGetType(libNtve_gf_KillingUnit()) == "Scourge")) {
        gv_deathMessages.lv_killer = UnitFromId(439);
    }
    else {
        gv_deathMessages.lv_killer = libNtve_gf_KillingUnit();
    }
    if ((UnitGroupHasUnit(UnitCargoGroup(UnitFromId(211)), libNtve_gf_KillingUnit()) == true)) {
        gv_deathMessages.lv_killer = UnitFromId(211);
    }

    gf_DeathMessageRefresh();
    if ((UnitTypeTestAttribute(UnitGetType(libNtve_gf_KillingUnit()), c_unitAttributeHeroic) == false)) {
        lv_messageText = gv_deathMessages.lv_basicUnit;
    }
    else {
        if ((UnitGetType(libNtve_gf_KillingUnit()) == "Artanis")) {
            lv_messageText = gv_deathMessages.lv_killedByGod;
        }
        else {
            lv_rng = RandomInt(0, 9);
            if (((lv_rng == 0) || (lv_rng == 1) || (lv_rng == 2) || (lv_rng == 3) || (lv_rng == 4) || (lv_rng == 5) || (lv_rng == 6))) {
                lv_messageText = gv_deathMessages.lv_heavenBasicHero;
            }
            else {
                if (((lv_rng == 7) || (lv_rng == 8) || (lv_rng == 9))) {
                    lv_messageText = gv_deathMessages.lv_dumaJk1;
                }

            }
        }
    }
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, lv_messageText);
    gf_ScoreboardRefresh(false, gv_deathMessages.lv_victim, UnitGetOwner(gv_deathMessages.lv_killer));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DumaDies_Init () {
    gt_DumaDies = TriggerCreate("gt_DumaDies_Func");
    TriggerAddEventUnitDied(gt_DumaDies, UnitRefFromUnit(UnitFromId(622)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Uriel Dies
//--------------------------------------------------------------------------------------------------
bool gt_UrielDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_rng;
    text lv_messageText;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gv_deathMessages.lv_alignment = StringExternal("Param/Value/43574C75");
    gv_deathMessages.lv_victim = EventUnit();
    if ((UnitGetType(libNtve_gf_KillingUnit()) == "Scourge")) {
        gv_deathMessages.lv_killer = UnitFromId(439);
    }
    else {
        gv_deathMessages.lv_killer = libNtve_gf_KillingUnit();
    }
    if ((UnitGroupHasUnit(UnitCargoGroup(UnitFromId(211)), libNtve_gf_KillingUnit()) == true)) {
        gv_deathMessages.lv_killer = UnitFromId(211);
    }

    gf_DeathMessageRefresh();
    if ((UnitTypeTestAttribute(UnitGetType(libNtve_gf_KillingUnit()), c_unitAttributeHeroic) == false)) {
        lv_messageText = gv_deathMessages.lv_basicUnit;
    }
    else {
        if ((UnitGetType(libNtve_gf_KillingUnit()) == "Artanis")) {
            lv_messageText = gv_deathMessages.lv_killedByGod;
        }
        else {
            lv_rng = RandomInt(0, 9);
            if (((lv_rng <= 4))) {
                lv_messageText = gv_deathMessages.lv_heavenBasicHero;
            }
            else {
                if (((lv_rng == 5) || (lv_rng == 6) || (lv_rng == 7))) {
                    lv_messageText = gv_deathMessages.lv_urielSrs1;
                }
                else {
                    if (((lv_rng == 8) || (lv_rng == 9))) {
                        lv_messageText = gv_deathMessages.lv_urielJk1;
                    }

                }
            }
        }
    }
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, lv_messageText);
    gf_ScoreboardRefresh(false, gv_deathMessages.lv_victim, UnitGetOwner(gv_deathMessages.lv_killer));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UrielDies_Init () {
    gt_UrielDies = TriggerCreate("gt_UrielDies_Func");
    TriggerAddEventUnitDied(gt_UrielDies, UnitRefFromUnit(UnitFromId(65)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Donatello Dies
//--------------------------------------------------------------------------------------------------
bool gt_DonatelloDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_rng;
    text lv_messageText;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gv_deathMessages.lv_alignment = StringExternal("Param/Value/858A4F8C");
    gv_deathMessages.lv_victim = EventUnit();
    if ((UnitGetType(libNtve_gf_KillingUnit()) == "Scourge")) {
        gv_deathMessages.lv_killer = UnitFromId(439);
    }
    else {
        gv_deathMessages.lv_killer = libNtve_gf_KillingUnit();
    }
    if ((UnitGroupHasUnit(UnitCargoGroup(UnitFromId(211)), libNtve_gf_KillingUnit()) == true)) {
        gv_deathMessages.lv_killer = UnitFromId(211);
    }

    gf_DeathMessageRefresh();
    if ((UnitTypeTestAttribute(UnitGetType(libNtve_gf_KillingUnit()), c_unitAttributeHeroic) == false)) {
        lv_messageText = gv_deathMessages.lv_basicUnit;
    }
    else {
        if ((UnitGetType(libNtve_gf_KillingUnit()) == "Artanis")) {
            lv_messageText = gv_deathMessages.lv_killedByGod;
        }
        else {
            lv_rng = RandomInt(0, 9);
            if (((lv_rng == 0) || (lv_rng == 1) || (lv_rng == 2) || (lv_rng == 3) || (lv_rng == 4) || (lv_rng == 5) || (lv_rng == 6))) {
                lv_messageText = gv_deathMessages.lv_heavenBasicHero;
            }
            else {
                if (((lv_rng == 7) || (lv_rng == 8) || (lv_rng == 9))) {
                    lv_messageText = gv_deathMessages.lv_donatelloJk1;
                }

            }
        }
    }
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, lv_messageText);
    gf_ScoreboardRefresh(false, gv_deathMessages.lv_victim, UnitGetOwner(gv_deathMessages.lv_killer));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DonatelloDies_Init () {
    gt_DonatelloDies = TriggerCreate("gt_DonatelloDies_Func");
    TriggerAddEventUnitDied(gt_DonatelloDies, UnitRefFromUnit(UnitFromId(440)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Seraphiel Dies
//--------------------------------------------------------------------------------------------------
bool gt_SeraphielDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_rng;
    text lv_messageText;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gv_deathMessages.lv_alignment = StringExternal("Param/Value/B2BDD465");
    gv_deathMessages.lv_victim = EventUnit();
    if ((UnitGetType(libNtve_gf_KillingUnit()) == "Scourge")) {
        gv_deathMessages.lv_killer = UnitFromId(439);
    }
    else {
        gv_deathMessages.lv_killer = libNtve_gf_KillingUnit();
    }
    if ((UnitGroupHasUnit(UnitCargoGroup(UnitFromId(211)), libNtve_gf_KillingUnit()) == true)) {
        gv_deathMessages.lv_killer = UnitFromId(211);
    }

    gf_DeathMessageRefresh();
    if ((UnitTypeTestAttribute(UnitGetType(libNtve_gf_KillingUnit()), c_unitAttributeHeroic) == false)) {
        lv_messageText = gv_deathMessages.lv_basicUnit;
    }
    else {
        if ((UnitGetType(libNtve_gf_KillingUnit()) == "Artanis")) {
            lv_messageText = gv_deathMessages.lv_killedByGod;
        }
        else {
            lv_rng = RandomInt(0, 9);
            if (((lv_rng == 0) || (lv_rng == 1) || (lv_rng == 2) || (lv_rng == 3) || (lv_rng == 4) || (lv_rng == 5) || (lv_rng == 6))) {
                lv_messageText = gv_deathMessages.lv_heavenBasicHero;
            }
            else {
                if (((lv_rng == 7) || (lv_rng == 8) || (lv_rng == 9))) {
                    lv_messageText = gv_deathMessages.lv_seraphielSrs1;
                }

            }
        }
    }
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, lv_messageText);
    gf_ScoreboardRefresh(false, gv_deathMessages.lv_victim, UnitGetOwner(gv_deathMessages.lv_killer));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SeraphielDies_Init () {
    gt_SeraphielDies = TriggerCreate("gt_SeraphielDies_Func");
    TriggerAddEventUnitDied(gt_SeraphielDies, UnitRefFromUnit(UnitFromId(313)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nathaniel Dies
//--------------------------------------------------------------------------------------------------
bool gt_NathanielDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_rng;
    text lv_messageText;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gv_deathMessages.lv_alignment = StringExternal("Param/Value/2C654D75");
    gv_deathMessages.lv_victim = EventUnit();
    if ((UnitGetType(libNtve_gf_KillingUnit()) == "Scourge")) {
        gv_deathMessages.lv_killer = UnitFromId(439);
    }
    else {
        gv_deathMessages.lv_killer = libNtve_gf_KillingUnit();
    }
    if ((UnitGroupHasUnit(UnitCargoGroup(UnitFromId(211)), libNtve_gf_KillingUnit()) == true)) {
        gv_deathMessages.lv_killer = UnitFromId(211);
    }

    gf_DeathMessageRefresh();
    if ((UnitTypeTestAttribute(UnitGetType(libNtve_gf_KillingUnit()), c_unitAttributeHeroic) == false)) {
        lv_messageText = gv_deathMessages.lv_basicUnit;
    }
    else {
        if ((UnitGetType(libNtve_gf_KillingUnit()) == "Artanis")) {
            lv_messageText = gv_deathMessages.lv_killedByGod;
        }
        else {
            lv_rng = RandomInt(0, 9);
            if (((lv_rng == 0) || (lv_rng == 1) || (lv_rng == 2) || (lv_rng == 3) || (lv_rng == 4) || (lv_rng == 5) || (lv_rng == 6))) {
                lv_messageText = gv_deathMessages.lv_heavenBasicHero;
            }
            else {
                if (((lv_rng == 7) || (lv_rng == 8) || (lv_rng == 9))) {
                    lv_messageText = gv_deathMessages.lv_nathanielJk1;
                }

            }
        }
    }
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, lv_messageText);
    gf_ScoreboardRefresh(false, gv_deathMessages.lv_victim, UnitGetOwner(gv_deathMessages.lv_killer));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NathanielDies_Init () {
    gt_NathanielDies = TriggerCreate("gt_NathanielDies_Func");
    TriggerAddEventUnitDied(gt_NathanielDies, UnitRefFromUnit(UnitFromId(330)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Michael Dies
//--------------------------------------------------------------------------------------------------
bool gt_MichaelDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_rng;
    text lv_messageText;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gv_deathMessages.lv_alignment = StringExternal("Param/Value/0527C552");
    gv_deathMessages.lv_victim = EventUnit();
    if ((UnitGetType(libNtve_gf_KillingUnit()) == "Scourge")) {
        gv_deathMessages.lv_killer = UnitFromId(439);
    }
    else {
        gv_deathMessages.lv_killer = libNtve_gf_KillingUnit();
    }
    if ((UnitGroupHasUnit(UnitCargoGroup(UnitFromId(211)), libNtve_gf_KillingUnit()) == true)) {
        gv_deathMessages.lv_killer = UnitFromId(211);
    }

    gf_DeathMessageRefresh();
    if ((UnitTypeTestAttribute(UnitGetType(libNtve_gf_KillingUnit()), c_unitAttributeHeroic) == false)) {
        lv_messageText = gv_deathMessages.lv_basicUnit;
    }
    else {
        if ((UnitGetType(libNtve_gf_KillingUnit()) == "Artanis")) {
            lv_messageText = gv_deathMessages.lv_killedByGod;
        }
        else {
            lv_rng = RandomInt(0, 9);
            if (((lv_rng == 0) || (lv_rng == 1) || (lv_rng == 2) || (lv_rng == 3) || (lv_rng == 4) || (lv_rng == 5))) {
                lv_messageText = gv_deathMessages.lv_heavenBasicHero;
            }
            else {
                if (((lv_rng == 6) || (lv_rng == 7))) {
                    lv_messageText = gv_deathMessages.lv_michaelJk1;
                }
                else {
                    if (((lv_rng == 8) || (lv_rng == 9))) {
                        lv_messageText = gv_deathMessages.lv_michaelJk2;
                    }

                }
            }
        }
    }
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, lv_messageText);
    gf_ScoreboardRefresh(false, gv_deathMessages.lv_victim, UnitGetOwner(gv_deathMessages.lv_killer));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MichaelDies_Init () {
    gt_MichaelDies = TriggerCreate("gt_MichaelDies_Func");
    TriggerAddEventUnitDied(gt_MichaelDies, UnitRefFromUnit(UnitFromId(729)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Raphael Dies
//--------------------------------------------------------------------------------------------------
bool gt_RaphaelDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_rng;
    text lv_messageText;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gv_deathMessages.lv_alignment = StringExternal("Param/Value/C8EA61B4");
    gv_deathMessages.lv_victim = EventUnit();
    if ((UnitGetType(libNtve_gf_KillingUnit()) == "Scourge")) {
        gv_deathMessages.lv_killer = UnitFromId(439);
    }
    else {
        gv_deathMessages.lv_killer = libNtve_gf_KillingUnit();
    }
    if ((UnitGroupHasUnit(UnitCargoGroup(UnitFromId(211)), libNtve_gf_KillingUnit()) == true)) {
        gv_deathMessages.lv_killer = UnitFromId(211);
    }

    gf_DeathMessageRefresh();
    if ((UnitTypeTestAttribute(UnitGetType(libNtve_gf_KillingUnit()), c_unitAttributeHeroic) == false)) {
        lv_messageText = gv_deathMessages.lv_basicUnit;
    }
    else {
        if ((UnitGetType(libNtve_gf_KillingUnit()) == "Artanis")) {
            lv_messageText = gv_deathMessages.lv_killedByGod;
        }
        else {
            lv_rng = RandomInt(0, 9);
            if (((lv_rng == 0) || (lv_rng == 1) || (lv_rng == 2) || (lv_rng == 3) || (lv_rng == 4) || (lv_rng == 5) || (lv_rng == 6))) {
                lv_messageText = gv_deathMessages.lv_heavenBasicHero;
            }
            else {
                if (((lv_rng == 7) || (lv_rng == 8) || (lv_rng == 9))) {
                    lv_messageText = gv_deathMessages.lv_raphaelJk1;
                }

            }
        }
    }
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, lv_messageText);
    gf_ScoreboardRefresh(false, gv_deathMessages.lv_victim, UnitGetOwner(gv_deathMessages.lv_killer));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RaphaelDies_Init () {
    gt_RaphaelDies = TriggerCreate("gt_RaphaelDies_Func");
    TriggerAddEventUnitDied(gt_RaphaelDies, UnitRefFromUnit(UnitFromId(211)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Jehoel Dies
//--------------------------------------------------------------------------------------------------
bool gt_JehoelDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_rng;
    text lv_messageText;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gv_deathMessages.lv_alignment = StringExternal("Param/Value/A5EA55DD");
    gv_deathMessages.lv_victim = EventUnit();
    if ((UnitGetType(libNtve_gf_KillingUnit()) == "Scourge")) {
        gv_deathMessages.lv_killer = UnitFromId(439);
    }
    else {
        gv_deathMessages.lv_killer = libNtve_gf_KillingUnit();
    }
    if ((UnitGroupHasUnit(UnitCargoGroup(UnitFromId(211)), libNtve_gf_KillingUnit()) == true)) {
        gv_deathMessages.lv_killer = UnitFromId(211);
    }

    gf_DeathMessageRefresh();
    if ((UnitTypeTestAttribute(UnitGetType(libNtve_gf_KillingUnit()), c_unitAttributeHeroic) == false)) {
        lv_messageText = gv_deathMessages.lv_basicUnit;
    }
    else {
        if ((UnitGetType(libNtve_gf_KillingUnit()) == "Artanis")) {
            lv_messageText = gv_deathMessages.lv_killedByGod;
        }
        else {
            lv_rng = RandomInt(0, 9);
            if (((lv_rng == 0) || (lv_rng == 1) || (lv_rng == 2) || (lv_rng == 3) || (lv_rng == 4) || (lv_rng == 5) || (lv_rng == 6))) {
                lv_messageText = gv_deathMessages.lv_heavenBasicHero;
            }
            else {
                if (((lv_rng == 7) || (lv_rng == 8) || (lv_rng == 9))) {
                    lv_messageText = gv_deathMessages.lv_jehoelSrs1;
                }

            }
        }
    }
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, lv_messageText);
    gf_ScoreboardRefresh(false, gv_deathMessages.lv_victim, UnitGetOwner(gv_deathMessages.lv_killer));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_JehoelDies_Init () {
    gt_JehoelDies = TriggerCreate("gt_JehoelDies_Func");
    TriggerAddEventUnitDied(gt_JehoelDies, UnitRefFromUnit(UnitFromId(347)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Metatron Dies
//--------------------------------------------------------------------------------------------------
bool gt_MetatronDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_rng;
    text lv_messageText;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gv_deathMessages.lv_alignment = StringExternal("Param/Value/0F1AF05C");
    gv_deathMessages.lv_victim = EventUnit();
    if ((UnitGetType(libNtve_gf_KillingUnit()) == "Scourge")) {
        gv_deathMessages.lv_killer = UnitFromId(439);
    }
    else {
        gv_deathMessages.lv_killer = libNtve_gf_KillingUnit();
    }
    if ((UnitGroupHasUnit(UnitCargoGroup(UnitFromId(211)), libNtve_gf_KillingUnit()) == true)) {
        gv_deathMessages.lv_killer = UnitFromId(211);
    }

    gf_DeathMessageRefresh();
    if ((UnitTypeTestAttribute(UnitGetType(libNtve_gf_KillingUnit()), c_unitAttributeHeroic) == false)) {
        lv_messageText = gv_deathMessages.lv_basicUnit;
    }
    else {
        if ((UnitGetType(libNtve_gf_KillingUnit()) == "Artanis")) {
            lv_messageText = gv_deathMessages.lv_killedByGod;
        }
        else {
            lv_rng = RandomInt(0, 9);
            if (((lv_rng == 0) || (lv_rng == 1) || (lv_rng == 2) || (lv_rng == 3) || (lv_rng == 4) || (lv_rng == 5) || (lv_rng == 6))) {
                lv_messageText = gv_deathMessages.lv_heavenBasicHero;
            }
            else {
                if (((lv_rng == 7) || (lv_rng == 8) || (lv_rng == 9))) {
                    lv_messageText = gv_deathMessages.lv_metatronSrs1;
                }

            }
        }
    }
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, lv_messageText);
    gf_ScoreboardRefresh(false, gv_deathMessages.lv_victim, UnitGetOwner(gv_deathMessages.lv_killer));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MetatronDies_Init () {
    gt_MetatronDies = TriggerCreate("gt_MetatronDies_Func");
    TriggerAddEventUnitDied(gt_MetatronDies, UnitRefFromUnit(UnitFromId(348)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zadkiel Dies (DP)
//--------------------------------------------------------------------------------------------------
bool gt_ZadkielDiesDP_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_rng;
    text lv_messageText;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gv_deathMessages.lv_alignment = StringExternal("Param/Value/21FE511D");
    gv_deathMessages.lv_victim = EventUnit();
    if ((UnitGetType(libNtve_gf_KillingUnit()) == "Scourge")) {
        gv_deathMessages.lv_killer = UnitFromId(439);
    }
    else {
        gv_deathMessages.lv_killer = libNtve_gf_KillingUnit();
    }
    if ((UnitGroupHasUnit(UnitCargoGroup(UnitFromId(211)), libNtve_gf_KillingUnit()) == true)) {
        gv_deathMessages.lv_killer = UnitFromId(211);
    }

    gf_DeathMessageRefresh();
    if ((UnitTypeTestAttribute(UnitGetType(libNtve_gf_KillingUnit()), c_unitAttributeHeroic) == false)) {
        lv_messageText = (gv_deathMessages.lv_basicUnit + StringExternal("Param/Value/92ADDE63"));
    }
    else {
        if ((UnitGetType(libNtve_gf_KillingUnit()) == "Artanis")) {
            lv_messageText = (gv_deathMessages.lv_killedByGod + StringExternal("Param/Value/55DC7837"));
        }
        else {
            lv_rng = RandomInt(0, 9);
            if (((lv_rng == 0) || (lv_rng == 1) || (lv_rng == 2) || (lv_rng == 3) || (lv_rng == 4) || (lv_rng == 5) || (lv_rng == 6))) {
                lv_messageText = (gv_deathMessages.lv_heavenBasicHero + StringExternal("Param/Value/6A482A24"));
            }
            else {
                if (((lv_rng == 7) || (lv_rng == 8) || (lv_rng == 9))) {
                    lv_messageText = (gv_deathMessages.lv_zadkielJk1 + StringExternal("Param/Value/9864E9C7"));
                }

            }
        }
    }
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, lv_messageText);
    if ((gv_gameData.lv_heavenHasWon == false) && (gv_gameData.lv_hellHasWon == false)) {
        gv_playerData[libNtve_gf_KillingPlayer()].lv_aftermathZadMolochKilled += 1;
        gf_AddHeroKillScoreAftermathIconTooltip(EventUnit(), libNtve_gf_KillingPlayer());
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZadkielDiesDP_Init () {
    gt_ZadkielDiesDP = TriggerCreate("gt_ZadkielDiesDP_Func");
    TriggerAddEventUnitDied(gt_ZadkielDiesDP, UnitRefFromUnit(UnitFromId(711)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Moloch Dies (DP)
//--------------------------------------------------------------------------------------------------
bool gt_MolochDiesDP_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_rng;
    text lv_messageText;
    text lv_finalBlurb;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gv_deathMessages.lv_alignment = StringExternal("Param/Value/4051EF2D");
    gv_deathMessages.lv_victim = EventUnit();
    if ((UnitGetType(libNtve_gf_KillingUnit()) == "Scourge")) {
        gv_deathMessages.lv_killer = UnitFromId(439);
    }
    else {
        gv_deathMessages.lv_killer = libNtve_gf_KillingUnit();
    }
    if ((UnitGroupHasUnit(UnitCargoGroup(UnitFromId(211)), libNtve_gf_KillingUnit()) == true)) {
        gv_deathMessages.lv_killer = UnitFromId(211);
    }

    gf_DeathMessageRefresh();
    if ((UnitCount("NydusNetwork2", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) == 0)) {
        lv_finalBlurb = StringExternal("Param/Value/24AE47D2");
    }
    else {
        lv_finalBlurb = StringExternal("Param/Value/6593C0DC");
    }
    if ((UnitTypeTestAttribute(UnitGetType(libNtve_gf_KillingUnit()), c_unitAttributeHeroic) == false)) {
        lv_messageText = (gv_deathMessages.lv_basicUnit + lv_finalBlurb);
    }
    else {
        if ((UnitGetType(libNtve_gf_KillingUnit()) == "Artanis")) {
            lv_messageText = (gv_deathMessages.lv_killedByGod + lv_finalBlurb);
        }
        else {
            lv_rng = RandomInt(0, 9);
            if (((lv_rng == 0) || (lv_rng == 1) || (lv_rng == 2) || (lv_rng == 3) || (lv_rng == 4) || (lv_rng == 5) || (lv_rng == 6))) {
                lv_messageText = (gv_deathMessages.lv_hellBasicHero + lv_finalBlurb);
            }
            else {
                if (((lv_rng == 7) || (lv_rng == 8) || (lv_rng == 9))) {
                    TextExpressionSetToken("Param/Expression/4C4144BB", "A", TextWithColor(StringExternal("Param/Value/F7A7B8EA"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))));
                    lv_messageText = (gv_deathMessages.lv_molochJk1 + TextExpressionAssemble("Param/Expression/4C4144BB"));
                }

            }
        }
    }
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, lv_messageText);
    if ((gv_gameData.lv_heavenHasWon == false) && (gv_gameData.lv_hellHasWon == false)) {
        gv_playerData[libNtve_gf_KillingPlayer()].lv_aftermathZadMolochKilled += 1;
        gf_AddHeroKillScoreAftermathIconTooltip(EventUnit(), libNtve_gf_KillingPlayer());
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MolochDiesDP_Init () {
    gt_MolochDiesDP = TriggerCreate("gt_MolochDiesDP_Func");
    TriggerAddEventUnitDied(gt_MolochDiesDP, UnitRefFromUnit(UnitFromId(439)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Azazel Dies
//--------------------------------------------------------------------------------------------------
bool gt_AzazelDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_rng;
    text lv_messageText;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gv_deathMessages.lv_alignment = StringExternal("Param/Value/7118FD50");
    gv_deathMessages.lv_victim = EventUnit();
    if ((UnitGetType(libNtve_gf_KillingUnit()) == "Scourge")) {
        gv_deathMessages.lv_killer = UnitFromId(439);
    }
    else {
        gv_deathMessages.lv_killer = libNtve_gf_KillingUnit();
    }
    if ((UnitGroupHasUnit(UnitCargoGroup(UnitFromId(211)), libNtve_gf_KillingUnit()) == true)) {
        gv_deathMessages.lv_killer = UnitFromId(211);
    }

    gf_DeathMessageRefresh();
    if ((UnitTypeTestAttribute(UnitGetType(libNtve_gf_KillingUnit()), c_unitAttributeHeroic) == false)) {
        lv_messageText = gv_deathMessages.lv_basicUnit;
    }
    else {
        if ((UnitGetType(libNtve_gf_KillingUnit()) == "Artanis")) {
            lv_messageText = gv_deathMessages.lv_killedByGod;
        }
        else {
            lv_rng = RandomInt(0, 9);
            if (((lv_rng == 0) || (lv_rng == 1) || (lv_rng == 2) || (lv_rng == 3) || (lv_rng == 4) || (lv_rng == 5) || (lv_rng == 6))) {
                lv_messageText = gv_deathMessages.lv_hellBasicHero;
            }
            else {
                if (((lv_rng == 7) || (lv_rng == 8) || (lv_rng == 9))) {
                    lv_messageText = gv_deathMessages.lv_azazelJk1;
                }

            }
        }
    }
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, lv_messageText);
    gf_ScoreboardRefresh(false, gv_deathMessages.lv_victim, UnitGetOwner(gv_deathMessages.lv_killer));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AzazelDies_Init () {
    gt_AzazelDies = TriggerCreate("gt_AzazelDies_Func");
    TriggerAddEventUnitDied(gt_AzazelDies, UnitRefFromUnit(UnitFromId(704)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Sammyazza Dies
//--------------------------------------------------------------------------------------------------
bool gt_SammyazzaDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_rng;
    text lv_messageText;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gv_deathMessages.lv_alignment = StringExternal("Param/Value/66A79071");
    gv_deathMessages.lv_victim = EventUnit();
    if ((UnitGetType(libNtve_gf_KillingUnit()) == "Scourge")) {
        gv_deathMessages.lv_killer = UnitFromId(439);
    }
    else {
        gv_deathMessages.lv_killer = libNtve_gf_KillingUnit();
    }
    if ((UnitGroupHasUnit(UnitCargoGroup(UnitFromId(211)), libNtve_gf_KillingUnit()) == true)) {
        gv_deathMessages.lv_killer = UnitFromId(211);
    }

    gf_DeathMessageRefresh();
    if ((UnitTypeTestAttribute(UnitGetType(libNtve_gf_KillingUnit()), c_unitAttributeHeroic) == false)) {
        lv_messageText = gv_deathMessages.lv_basicUnit;
    }
    else {
        if ((UnitGetType(libNtve_gf_KillingUnit()) == "Artanis")) {
            lv_messageText = gv_deathMessages.lv_killedByGod;
        }
        else {
            lv_rng = RandomInt(0, 9);
            if (((lv_rng == 0) || (lv_rng == 1) || (lv_rng == 2) || (lv_rng == 3) || (lv_rng == 4) || (lv_rng == 5) || (lv_rng == 6))) {
                lv_messageText = gv_deathMessages.lv_hellBasicHero;
            }
            else {
                if (((lv_rng == 7) || (lv_rng == 8) || (lv_rng == 9))) {
                    lv_messageText = gv_deathMessages.lv_sammyazzaSrs1;
                }

            }
        }
    }
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, lv_messageText);
    gf_ScoreboardRefresh(false, gv_deathMessages.lv_victim, UnitGetOwner(gv_deathMessages.lv_killer));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SammyazzaDies_Init () {
    gt_SammyazzaDies = TriggerCreate("gt_SammyazzaDies_Func");
    TriggerAddEventUnitDied(gt_SammyazzaDies, UnitRefFromUnit(UnitFromId(703)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Berith (always) Dies
//--------------------------------------------------------------------------------------------------
bool gt_BerithalwaysDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_rng;
    text lv_messageText;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gv_deathMessages.lv_alignment = StringExternal("Param/Value/2BCF408B");
    gv_deathMessages.lv_victim = EventUnit();
    if ((UnitGetType(libNtve_gf_KillingUnit()) == "Scourge")) {
        gv_deathMessages.lv_killer = UnitFromId(439);
    }
    else {
        gv_deathMessages.lv_killer = libNtve_gf_KillingUnit();
    }
    if ((UnitGroupHasUnit(UnitCargoGroup(UnitFromId(211)), libNtve_gf_KillingUnit()) == true)) {
        gv_deathMessages.lv_killer = UnitFromId(211);
    }

    gf_DeathMessageRefresh();
    if ((UnitTypeTestAttribute(UnitGetType(libNtve_gf_KillingUnit()), c_unitAttributeHeroic) == false)) {
        lv_messageText = gv_deathMessages.lv_basicUnit;
    }
    else {
        if ((UnitGetType(libNtve_gf_KillingUnit()) == "Artanis")) {
            lv_messageText = gv_deathMessages.lv_killedByGod;
        }
        else {
            lv_rng = RandomInt(0, 9);
            if (((lv_rng == 0) || (lv_rng == 1) || (lv_rng == 2) || (lv_rng == 3) || (lv_rng == 4) || (lv_rng == 5) || (lv_rng == 6))) {
                lv_messageText = gv_deathMessages.lv_hellBasicHero;
            }
            else {
                if (((lv_rng == 7) || (lv_rng == 8) || (lv_rng == 9))) {
                    lv_messageText = gv_deathMessages.lv_berithJk1;
                }

            }
        }
    }
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, lv_messageText);
    gf_ScoreboardRefresh(false, gv_deathMessages.lv_victim, UnitGetOwner(gv_deathMessages.lv_killer));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BerithalwaysDies_Init () {
    gt_BerithalwaysDies = TriggerCreate("gt_BerithalwaysDies_Func");
    TriggerAddEventUnitDied(gt_BerithalwaysDies, UnitRefFromUnit(UnitFromId(708)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Abaddon Dies
//--------------------------------------------------------------------------------------------------
bool gt_AbaddonDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_rng;
    text lv_messageText;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gv_deathMessages.lv_alignment = StringExternal("Param/Value/4C656FA7");
    gv_deathMessages.lv_victim = EventUnit();
    if ((UnitGetType(libNtve_gf_KillingUnit()) == "Scourge")) {
        gv_deathMessages.lv_killer = UnitFromId(439);
    }
    else {
        gv_deathMessages.lv_killer = libNtve_gf_KillingUnit();
    }
    if ((UnitGroupHasUnit(UnitCargoGroup(UnitFromId(211)), libNtve_gf_KillingUnit()) == true)) {
        gv_deathMessages.lv_killer = UnitFromId(211);
    }

    gf_DeathMessageRefresh();
    if ((UnitTypeTestAttribute(UnitGetType(libNtve_gf_KillingUnit()), c_unitAttributeHeroic) == false)) {
        lv_messageText = gv_deathMessages.lv_basicUnit;
    }
    else {
        if ((UnitGetType(libNtve_gf_KillingUnit()) == "Artanis")) {
            lv_messageText = gv_deathMessages.lv_killedByGod;
        }
        else {
            lv_rng = RandomInt(0, 9);
            if (((lv_rng == 0) || (lv_rng == 1) || (lv_rng == 2) || (lv_rng == 3) || (lv_rng == 4) || (lv_rng == 5) || (lv_rng == 6))) {
                lv_messageText = gv_deathMessages.lv_hellBasicHero;
            }
            else {
                if (((lv_rng == 7) || (lv_rng == 8) || (lv_rng == 9))) {
                    lv_messageText = gv_deathMessages.lv_abaddonSrs1;
                }

            }
        }
    }
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, lv_messageText);
    gf_ScoreboardRefresh(false, gv_deathMessages.lv_victim, UnitGetOwner(gv_deathMessages.lv_killer));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AbaddonDies_Init () {
    gt_AbaddonDies = TriggerCreate("gt_AbaddonDies_Func");
    TriggerAddEventUnitDied(gt_AbaddonDies, UnitRefFromUnit(UnitFromId(707)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Beelzebub Dies
//--------------------------------------------------------------------------------------------------
bool gt_BeelzebubDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_rng;
    text lv_messageText;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gv_deathMessages.lv_alignment = StringExternal("Param/Value/ACAC2670");
    gv_deathMessages.lv_victim = EventUnit();
    if ((UnitGetType(libNtve_gf_KillingUnit()) == "Scourge")) {
        gv_deathMessages.lv_killer = UnitFromId(439);
    }
    else {
        gv_deathMessages.lv_killer = libNtve_gf_KillingUnit();
    }
    if ((UnitGroupHasUnit(UnitCargoGroup(UnitFromId(211)), libNtve_gf_KillingUnit()) == true)) {
        gv_deathMessages.lv_killer = UnitFromId(211);
    }

    gf_DeathMessageRefresh();
    if ((UnitTypeTestAttribute(UnitGetType(libNtve_gf_KillingUnit()), c_unitAttributeHeroic) == false)) {
        lv_messageText = gv_deathMessages.lv_basicUnit;
    }
    else {
        if ((UnitGetType(libNtve_gf_KillingUnit()) == "Artanis")) {
            lv_messageText = gv_deathMessages.lv_killedByGod;
        }
        else {
            lv_rng = RandomInt(0, 9);
            if (((lv_rng == 0) || (lv_rng == 1) || (lv_rng == 2) || (lv_rng == 3) || (lv_rng == 4) || (lv_rng == 5) || (lv_rng == 6))) {
                lv_messageText = gv_deathMessages.lv_hellBasicHero;
            }
            else {
                if (((lv_rng == 7) || (lv_rng == 8) || (lv_rng == 9))) {
                    lv_messageText = gv_deathMessages.lv_beelzebubJk1;
                }

            }
        }
    }
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, lv_messageText);
    gf_ScoreboardRefresh(false, gv_deathMessages.lv_victim, UnitGetOwner(gv_deathMessages.lv_killer));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BeelzebubDies_Init () {
    gt_BeelzebubDies = TriggerCreate("gt_BeelzebubDies_Func");
    TriggerAddEventUnitDied(gt_BeelzebubDies, UnitRefFromUnit(UnitFromId(706)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mammon Dies
//--------------------------------------------------------------------------------------------------
bool gt_MammonDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_rng;
    text lv_messageText;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gv_deathMessages.lv_alignment = StringExternal("Param/Value/8042C369");
    gv_deathMessages.lv_victim = EventUnit();
    if ((UnitGetType(libNtve_gf_KillingUnit()) == "Scourge")) {
        gv_deathMessages.lv_killer = UnitFromId(439);
    }
    else {
        gv_deathMessages.lv_killer = libNtve_gf_KillingUnit();
    }
    if ((UnitGroupHasUnit(UnitCargoGroup(UnitFromId(211)), libNtve_gf_KillingUnit()) == true)) {
        gv_deathMessages.lv_killer = UnitFromId(211);
    }

    gf_DeathMessageRefresh();
    if ((UnitTypeTestAttribute(UnitGetType(libNtve_gf_KillingUnit()), c_unitAttributeHeroic) == false)) {
        lv_messageText = gv_deathMessages.lv_basicUnit;
    }
    else {
        if ((UnitGetType(libNtve_gf_KillingUnit()) == "Artanis")) {
            lv_messageText = gv_deathMessages.lv_killedByGod;
        }
        else {
            lv_rng = RandomInt(0, 9);
            if (((lv_rng == 0) || (lv_rng == 1) || (lv_rng == 2) || (lv_rng == 3) || (lv_rng == 4) || (lv_rng == 5) || (lv_rng == 6))) {
                lv_messageText = gv_deathMessages.lv_hellBasicHero;
            }
            else {
                if (((lv_rng == 7) || (lv_rng == 8) || (lv_rng == 9))) {
                    lv_messageText = gv_deathMessages.lv_mammonJk1;
                }

            }
        }
    }
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, lv_messageText);
    gf_ScoreboardRefresh(false, gv_deathMessages.lv_victim, UnitGetOwner(gv_deathMessages.lv_killer));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MammonDies_Init () {
    gt_MammonDies = TriggerCreate("gt_MammonDies_Func");
    TriggerAddEventUnitDied(gt_MammonDies, UnitRefFromUnit(UnitFromId(710)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Asmodeus Dies
//--------------------------------------------------------------------------------------------------
bool gt_AsmodeusDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_rng;
    text lv_messageText;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gv_deathMessages.lv_alignment = StringExternal("Param/Value/E975DD00");
    gv_deathMessages.lv_victim = EventUnit();
    if ((UnitGetType(libNtve_gf_KillingUnit()) == "Scourge")) {
        gv_deathMessages.lv_killer = UnitFromId(439);
    }
    else {
        gv_deathMessages.lv_killer = libNtve_gf_KillingUnit();
    }
    if ((UnitGroupHasUnit(UnitCargoGroup(UnitFromId(211)), libNtve_gf_KillingUnit()) == true)) {
        gv_deathMessages.lv_killer = UnitFromId(211);
    }

    gf_DeathMessageRefresh();
    if ((UnitTypeTestAttribute(UnitGetType(libNtve_gf_KillingUnit()), c_unitAttributeHeroic) == false)) {
        lv_messageText = gv_deathMessages.lv_basicUnit;
    }
    else {
        if ((UnitGetType(libNtve_gf_KillingUnit()) == "Artanis")) {
            lv_messageText = gv_deathMessages.lv_killedByGod;
        }
        else {
            lv_rng = RandomInt(0, 9);
            if (((lv_rng == 0) || (lv_rng == 1) || (lv_rng == 2) || (lv_rng == 3) || (lv_rng == 4) || (lv_rng == 5) || (lv_rng == 6))) {
                lv_messageText = gv_deathMessages.lv_hellBasicHero;
            }
            else {
                if (((lv_rng == 7) || (lv_rng == 8) || (lv_rng == 9))) {
                    lv_messageText = gv_deathMessages.lv_asmodeusJk1;
                }

            }
        }
    }
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, lv_messageText);
    gf_ScoreboardRefresh(true, gv_deathMessages.lv_victim, UnitGetOwner(gv_deathMessages.lv_killer));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AsmodeusDies_Init () {
    gt_AsmodeusDies = TriggerCreate("gt_AsmodeusDies_Func");
    TriggerAddEventUnitDied(gt_AsmodeusDies, UnitRefFromUnit(UnitFromId(692)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Devil Dies
//--------------------------------------------------------------------------------------------------
bool gt_DevilDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_rng;
    text lv_messageText;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gv_deathMessages.lv_alignment = StringToText("");
    gv_deathMessages.lv_victim = EventUnit();
    if ((UnitGetType(libNtve_gf_KillingUnit()) == "Scourge")) {
        gv_deathMessages.lv_killer = UnitFromId(439);
    }
    else {
        gv_deathMessages.lv_killer = libNtve_gf_KillingUnit();
    }
    if ((UnitGroupHasUnit(UnitCargoGroup(UnitFromId(211)), libNtve_gf_KillingUnit()) == true)) {
        gv_deathMessages.lv_killer = UnitFromId(211);
    }

    gf_DeathMessageRefresh();
    if ((UnitTypeTestAttribute(UnitGetType(libNtve_gf_KillingUnit()), c_unitAttributeHeroic) == false)) {
        lv_messageText = gv_deathMessages.lv_basicUnit;
    }
    else {
        if ((UnitGetType(libNtve_gf_KillingUnit()) == "Artanis")) {
            lv_messageText = gv_deathMessages.lv_killedByGod;
        }
        else {
            lv_rng = RandomInt(0, 9);
            if (((lv_rng == 0) || (lv_rng == 1) || (lv_rng == 2) || (lv_rng == 3) || (lv_rng == 4) || (lv_rng == 5) || (lv_rng == 6))) {
                lv_messageText = gv_deathMessages.lv_hellSpecialHero;
            }
            else {
                if (((lv_rng == 7) || (lv_rng == 8) || (lv_rng == 9))) {
                    lv_messageText = gv_deathMessages.lv_devilSrs1;
                }

            }
        }
    }
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, lv_messageText);
    gf_ScoreboardRefresh(true, gv_deathMessages.lv_victim, UnitGetOwner(gv_deathMessages.lv_killer));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DevilDies_Init () {
    gt_DevilDies = TriggerCreate("gt_DevilDies_Func");
    TriggerAddEventUnitDied(gt_DevilDies, UnitRefFromUnit(UnitFromId(705)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Astaroth Dies
//--------------------------------------------------------------------------------------------------
bool gt_AstarothDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_rng;
    text lv_messageText;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gv_deathMessages.lv_alignment = StringExternal("Param/Value/EC8DB0EA");
    gv_deathMessages.lv_victim = EventUnit();
    if ((UnitGetType(libNtve_gf_KillingUnit()) == "Scourge")) {
        gv_deathMessages.lv_killer = UnitFromId(439);
    }
    else {
        gv_deathMessages.lv_killer = libNtve_gf_KillingUnit();
    }
    if ((UnitGroupHasUnit(UnitCargoGroup(UnitFromId(211)), libNtve_gf_KillingUnit()) == true)) {
        gv_deathMessages.lv_killer = UnitFromId(211);
    }

    gf_DeathMessageRefresh();
    if ((UnitTypeTestAttribute(UnitGetType(libNtve_gf_KillingUnit()), c_unitAttributeHeroic) == false)) {
        lv_messageText = gv_deathMessages.lv_basicUnit;
    }
    else {
        if ((UnitGetType(libNtve_gf_KillingUnit()) == "Artanis")) {
            lv_messageText = gv_deathMessages.lv_killedByGod;
        }
        else {
            lv_rng = RandomInt(0, 9);
            if (((lv_rng == 0) || (lv_rng == 1) || (lv_rng == 2) || (lv_rng == 3) || (lv_rng == 4) || (lv_rng == 5) || (lv_rng == 6))) {
                lv_messageText = gv_deathMessages.lv_hellBasicHero;
            }
            else {
                if (((lv_rng == 7) || (lv_rng == 8) || (lv_rng == 9))) {
                    lv_messageText = gv_deathMessages.lv_astarothJk1;
                }

            }
        }
    }
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, lv_messageText);
    gf_ScoreboardRefresh(true, gv_deathMessages.lv_victim, UnitGetOwner(gv_deathMessages.lv_killer));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AstarothDies_Init () {
    gt_AstarothDies = TriggerCreate("gt_AstarothDies_Func");
    TriggerAddEventUnitDied(gt_AstarothDies, UnitRefFromUnit(UnitFromId(783)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: God Dies
//--------------------------------------------------------------------------------------------------
bool gt_GodDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_killer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_killer = libNtve_gf_KillingUnit();

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Artanis"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(libNtve_gf_KillingUnit()) == "Scourge")) {
        lv_killer = UnitFromId(439);
    }
    else {
        lv_killer = libNtve_gf_KillingUnit();
    }
    if ((UnitGroupHasUnit(UnitCargoGroup(UnitFromId(211)), libNtve_gf_KillingUnit()) == true)) {
        lv_killer = UnitFromId(211);
    }

    if ((UnitTypeTestAttribute(UnitGetType(lv_killer), c_unitAttributeHeroic) == true)) {
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, (UnitGetName(EventUnit()) + StringExternal("Param/Value/4B8D9BC5") + UnitGetName(lv_killer) + StringExternal("Param/Value/C7825D18")));
    }
    else {
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, (UnitGetName(EventUnit()) + StringExternal("Param/Value/1BD54691")));
    }
    gf_ScoreboardRefresh(false, gv_deathMessages.lv_victim, UnitGetOwner(gv_deathMessages.lv_killer));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GodDies_Init () {
    gt_GodDies = TriggerCreate("gt_GodDies_Func");
    TriggerAddEventUnitDied(gt_GodDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hellgate death (Devil)
//--------------------------------------------------------------------------------------------------
bool gt_HellgatedeathDevil_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    RegionSetCenter(RegionFromId(28), PointFromId(43));
    gv_gameData.lv_healDev = false;
    TextTagDestroy(gv_textTags.lv_hellgateDevil);
    if ((UnitIsAlive(UnitFromId(705)) == true)) {
        UnitBehaviorAddPlayer(UnitFromId(705), "BeingBanished", 15, 1);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/3BBC9305"));
    }

    if ((gv_gameData.lv_pingsHeavenPoV[gv_syn.lv_pingsDevilHellgate] != c_invalidPingId)) {
        PingDestroy(gv_gameData.lv_pingsHeavenPoV[gv_syn.lv_pingsDevilHellgate]);
        gf_UpdateObjectiveHellgateCount();
    }

    if ((TriggerIsEnabled(gt_Justtobesure) == false)) {
        TriggerEnable(gt_Justtobesure, true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HellgatedeathDevil_Init () {
    gt_HellgatedeathDevil = TriggerCreate("gt_HellgatedeathDevil_Func");
    TriggerAddEventUnitDied(gt_HellgatedeathDevil, UnitRefFromUnit(UnitFromId(784)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hellgate death (Asmodeus)
//--------------------------------------------------------------------------------------------------
bool gt_HellgatedeathAsmodeus_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    RegionSetCenter(RegionFromId(27), PointFromId(43));
    gv_gameData.lv_healAsmo = false;
    TextTagDestroy(gv_textTags.lv_hellgateAsmodeus);
    if ((UnitIsAlive(UnitFromId(692)) == true)) {
        UnitBehaviorAddPlayer(UnitFromId(692), "BeingBanished", 15, 1);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/164D20DF"));
    }

    if ((gv_gameData.lv_pingsHeavenPoV[gv_syn.lv_pingsAsmodeusHellgate] != c_invalidPingId)) {
        PingDestroy(gv_gameData.lv_pingsHeavenPoV[gv_syn.lv_pingsAsmodeusHellgate]);
        PingDestroy(gv_gameData.lv_pingsHellPoV[0]);
        gf_UpdateObjectiveHellgateCount();
    }

    if ((TriggerIsEnabled(gt_Justtobesure) == false)) {
        TriggerEnable(gt_Justtobesure, true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HellgatedeathAsmodeus_Init () {
    gt_HellgatedeathAsmodeus = TriggerCreate("gt_HellgatedeathAsmodeus_Func");
    TriggerAddEventUnitDied(gt_HellgatedeathAsmodeus, UnitRefFromUnit(UnitFromId(709)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hellgate death (Astaroth)
//--------------------------------------------------------------------------------------------------
bool gt_HellgatedeathAstaroth_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    RegionSetCenter(RegionFromId(29), PointFromId(43));
    gv_gameData.lv_healAsta = false;
    TextTagDestroy(gv_textTags.lv_hellgateAstaroth);
    if ((UnitIsAlive(UnitFromId(783)) == true)) {
        UnitBehaviorAddPlayer(UnitFromId(783), "BeingBanished", 15, 1);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/9FB407C6"));
    }

    if ((gv_gameData.lv_pingsHeavenPoV[gv_syn.lv_pingsAstarothHellgate] != c_invalidPingId)) {
        PingDestroy(gv_gameData.lv_pingsHeavenPoV[gv_syn.lv_pingsAstarothHellgate]);
        gf_UpdateObjectiveHellgateCount();
    }

    if ((TriggerIsEnabled(gt_Justtobesure) == false)) {
        TriggerEnable(gt_Justtobesure, true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HellgatedeathAstaroth_Init () {
    gt_HellgatedeathAstaroth = TriggerCreate("gt_HellgatedeathAstaroth_Func");
    TriggerAddEventUnitDied(gt_HellgatedeathAstaroth, UnitRefFromUnit(UnitFromId(785)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hellgate death Moloch
//--------------------------------------------------------------------------------------------------
bool gt_HellgatedeathMoloch_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitCount("NydusNetwork2", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/8909B493"));
    UnitBehaviorAddPlayer(UnitFromId(439), "BeingBanished", 15, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HellgatedeathMoloch_Init () {
    gt_HellgatedeathMoloch = TriggerCreate("gt_HellgatedeathMoloch_Func");
    TriggerAddEventUnitDied(gt_HellgatedeathMoloch, UnitRefFromUnit(UnitFromId(784)));
    TriggerAddEventUnitDied(gt_HellgatedeathMoloch, UnitRefFromUnit(UnitFromId(709)));
    TriggerAddEventUnitDied(gt_HellgatedeathMoloch, UnitRefFromUnit(UnitFromId(785)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Die Bene
//--------------------------------------------------------------------------------------------------
bool gt_DieBene_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_RemoveDoodadsinRegion(RegionEntireMap(), "ForceFieldWall");
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, StringExternal("Param/Value/C55318A6"));
    PingDestroy(gv_gameData.lv_pingsHeavenPoV[gv_syn.lv_pingsBenediction]);
    if ((gv_gameData.lv_pingsHellPoV[gv_syn.lv_pingsBenediction] != c_invalidPingId)) {
        PingDestroy(gv_gameData.lv_pingsHellPoV[gv_syn.lv_pingsBenediction]);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DieBene_Init () {
    gt_DieBene = TriggerCreate("gt_DieBene_Func");
    TriggerAddEventUnitDied(gt_DieBene, UnitRefFromUnit(UnitFromId(47)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Die Gateway
//--------------------------------------------------------------------------------------------------
bool gt_DieGateway_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TextTagDestroy(gv_cinematic.lv_cinematicTags[4]);
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, StringExternal("Param/Value/6D77E508"));
    UIDisplayMessage(gv_gameData.lv_playerGroupHell, c_messageAreaSubtitle, StringExternal("Param/Value/F8B8EA27"));
    UnitRemove(UnitFromId(30));
    RegionSetCenter(RegionFromId(18), PointFromId(43));
    if ((libNtve_gf_RandomPercent() <= 10.0)) {
        UIDisplayMessage(gv_gameData.lv_playerGroupHeaven, c_messageAreaSubtitle, StringExternal("Param/Value/996269EB"));
    }

    PingDestroy(gv_gameData.lv_pingsHeavenPoV[gv_syn.lv_pingsGateway]);
    PingDestroy(gv_gameData.lv_pingsHellPoV[gv_syn.lv_pingsGateway]);
    Wait(2.0, c_timeGame);
    if ((UnitIsAlive(UnitFromId(45)) == true)) {
        gv_gameData.lv_pingsHellPoV[gv_syn.lv_pingsCitadel] = gf_CreateObjectivePing(UnitFromId(45), gv_gameData.lv_playerGroupHell, StringExternal("Param/Value/49AB361F"));
    }

    Wait(1.0, c_timeGame);
    if ((UnitIsAlive(UnitFromId(46)) == true)) {
        gv_gameData.lv_pingsHellPoV[gv_syn.lv_pingsEnclave] = gf_CreateObjectivePing(UnitFromId(46), gv_gameData.lv_playerGroupHell, StringExternal("Param/Value/E3DD2CC3"));
    }

    Wait(1.0, c_timeGame);
    if ((UnitIsAlive(UnitFromId(47)) == true)) {
        gv_gameData.lv_pingsHellPoV[gv_syn.lv_pingsBenediction] = gf_CreateObjectivePing(UnitFromId(47), gv_gameData.lv_playerGroupHell, StringExternal("Param/Value/C5273865"));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DieGateway_Init () {
    gt_DieGateway = TriggerCreate("gt_DieGateway_Func");
    TriggerAddEventUnitDied(gt_DieGateway, UnitRefFromUnit(UnitFromId(200)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Die Citadel
//--------------------------------------------------------------------------------------------------
bool gt_DieCitadel_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TextTagDestroy(gv_cinematic.lv_cinematicTags[5]);
    UIDisplayMessage(gv_gameData.lv_playerGroupHeaven, c_messageAreaSubtitle, StringExternal("Param/Value/4BB9341D"));
    UIDisplayMessage(gv_gameData.lv_playerGroupHell, c_messageAreaSubtitle, StringExternal("Param/Value/B0461C5D"));
    UnitRemove(UnitFromId(158));
    PingDestroy(gv_gameData.lv_pingsHeavenPoV[gv_syn.lv_pingsCitadel]);
    if ((gv_gameData.lv_pingsHellPoV[gv_syn.lv_pingsCitadel] != c_invalidPingId)) {
        PingDestroy(gv_gameData.lv_pingsHellPoV[gv_syn.lv_pingsCitadel]);
    }

    RegionSetCenter(RegionFromId(19), PointFromId(43));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DieCitadel_Init () {
    gt_DieCitadel = TriggerCreate("gt_DieCitadel_Func");
    TriggerAddEventUnitDied(gt_DieCitadel, UnitRefFromUnit(UnitFromId(45)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Die Enclave
//--------------------------------------------------------------------------------------------------
bool gt_DieEnclave_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(gv_gameData.lv_playerGroupHell, c_messageAreaSubtitle, StringExternal("Param/Value/847E5169"));
    UIDisplayMessage(gv_gameData.lv_playerGroupHeaven, c_messageAreaSubtitle, StringExternal("Param/Value/49D0AD31"));
    PingDestroy(gv_gameData.lv_pingsHeavenPoV[gv_syn.lv_pingsEnclave]);
    if ((gv_gameData.lv_pingsHellPoV[gv_syn.lv_pingsEnclave] != c_invalidPingId)) {
        PingDestroy(gv_gameData.lv_pingsHellPoV[gv_syn.lv_pingsEnclave]);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DieEnclave_Init () {
    gt_DieEnclave = TriggerCreate("gt_DieEnclave_Func");
    TriggerAddEventUnitDied(gt_DieEnclave, UnitRefFromUnit(UnitFromId(46)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Die Throne
//--------------------------------------------------------------------------------------------------
bool gt_DieThrone_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameData.lv_heavenHasWon == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_HellVictoryTriggeredByThroneDeath(false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DieThrone_Init () {
    gt_DieThrone = TriggerCreate("gt_DieThrone_Func");
    TriggerAddEventUnitDied(gt_DieThrone, UnitRefFromUnit(UnitFromId(22)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: God Returns
//--------------------------------------------------------------------------------------------------
bool gt_GodReturns_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_hellPlayer;
    int lv_player;
    unitgroup lv_group;
    point lv_point;

    // Automatic Variable Declarations
    unitgroup autoBDDFEBB4_g;
    int autoBDDFEBB4_u;
    unit autoBDDFEBB4_var;
    unitgroup auto74DE86CA_g;
    int auto74DE86CA_u;
    unit auto74DE86CA_var;
    const int auto4A0154C5_n = 4;
    int auto4A0154C5_i;
    unitgroup autoB6A177E2_g;
    int autoB6A177E2_u;
    unit autoB6A177E2_var;
    const int autoD76A763A_n = 4;
    int autoD76A763A_i;
    unitgroup auto2D04736C_g;
    int auto2D04736C_u;
    unit auto2D04736C_var;
    unitgroup autoCC9230FE_g;
    int autoCC9230FE_u;
    unit autoCC9230FE_var;
    const int auto569FAF02_n = 4;
    int auto569FAF02_i;
    unitgroup auto6E0C19F7_g;
    int auto6E0C19F7_u;
    unit auto6E0C19F7_var;
    const int autoBE4EBC69_n = 4;
    int autoBE4EBC69_i;
    unitgroup autoC315D3CA_g;
    int autoC315D3CA_u;
    unit autoC315D3CA_var;
    unitgroup auto2B5379B4_g;
    int auto2B5379B4_u;
    unit auto2B5379B4_var;
    unitgroup autoE31C6ABD_g;
    int autoE31C6ABD_u;
    unit autoE31C6ABD_var;
    unitgroup auto58699426_g;
    int auto58699426_u;
    unit auto58699426_var;
    unitgroup auto75EAF2E0_g;
    int auto75EAF2E0_u;
    unit auto75EAF2E0_var;
    unitgroup autoFD61652F_g;
    int autoFD61652F_u;
    unit autoFD61652F_var;
    unitgroup auto6D773D6C_g;
    int auto6D773D6C_u;
    unit auto6D773D6C_var;
    unitgroup autoE4257E0C_g;
    int autoE4257E0C_u;
    unit autoE4257E0C_var;

    // Variable Initialization
    lv_hellPlayer = gv_gameData.lv_rolesOwners[gv_syn.lv_roleDevil];
    lv_player = UnitGetOwner(UnitFromId(784));
    lv_group = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((gv_gameData.lv_hellHasWon == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_UpdateObjectiveGodhasReturned();
    lv_point = RegionGetCenter(RegionFromId(34));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Artanis", c_unitCreateIgnorePlacement, gv_gameData.lv_rolesOwners[gv_syn.lv_roleMessiah], lv_point);
    gv_gameData.lv_godhasArrived = true;
    UnitBehaviorAdd(UnitLastCreated(), "SystemHevenReinforcementVisual", UnitLastCreated(), 1);
    gv_playerData[UnitGetOwner(UnitLastCreated())].lv_aftermathHeroesTotal += 1;
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, StringExternal("Param/Value/D6045113"));
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, StringExternal("Param/Value/BDE2C451"));
    UnitGroupClear(lv_group);
    libNtve_gf_CreateUnitsWithDefaultFacing(6, "Spectre", 0, gv_gameData.lv_rolesOwners[gv_syn.lv_roleMessiah], lv_point);
    UnitGroupAddUnitGroup(lv_group, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(2, "Thor", 0, gv_gameData.lv_rolesOwners[gv_syn.lv_roleMessiah], lv_point);
    UnitGroupAddUnitGroup(lv_group, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(4, "Predator", 0, gv_gameData.lv_rolesOwners[gv_syn.lv_roleMessiah], lv_point);
    UnitGroupAddUnitGroup(lv_group, UnitLastCreatedGroup());
    autoBDDFEBB4_g = UnitLastCreatedGroup();
    autoBDDFEBB4_u = UnitGroupCount(autoBDDFEBB4_g, c_unitCountAll);
    for (;; autoBDDFEBB4_u -= 1) {
        autoBDDFEBB4_var = UnitGroupUnitFromEnd(autoBDDFEBB4_g, autoBDDFEBB4_u);
        if (autoBDDFEBB4_var == null) { break; }
        UnitIssueOrder(autoBDDFEBB4_var, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    }
    auto74DE86CA_g = lv_group;
    auto74DE86CA_u = UnitGroupCount(auto74DE86CA_g, c_unitCountAll);
    for (;; auto74DE86CA_u -= 1) {
        auto74DE86CA_var = UnitGroupUnitFromEnd(auto74DE86CA_g, auto74DE86CA_u);
        if (auto74DE86CA_var == null) { break; }
        UnitSetTeamColorIndex(auto74DE86CA_var, 0);
        UnitSetCustomValue(auto74DE86CA_var, 62, gf_GetRoleNumber("0001"));
        gv_playerData[UnitGetOwner(auto74DE86CA_var)].lv_aftermathElitesTotal += 1;
        UnitBehaviorAdd(auto74DE86CA_var, "SystemHevenReinforcementVisual", auto74DE86CA_var, 1);
    }
    lv_point = RegionGetCenter(RegionFromId(36));
    for (auto4A0154C5_i = 1; auto4A0154C5_i <= auto4A0154C5_n; auto4A0154C5_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "StoneZealot", 0, gv_gameData.lv_rolesOwners[gv_syn.lv_roleMichael], lv_point);
        UnitSetTeamColorIndex(UnitLastCreated(), 3);
        UnitBehaviorAdd(UnitLastCreated(), "SystemHevenReinforcementVisual", UnitLastCreated(), 1);
    }
    UnitGroupClear(lv_group);
    libNtve_gf_CreateUnitsWithDefaultFacing(6, "Marine", 0, gv_gameData.lv_rolesOwners[gv_syn.lv_roleMichael], lv_point);
    UnitGroupAddUnitGroup(lv_group, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(4, "Firebat", 0, gv_gameData.lv_rolesOwners[gv_syn.lv_roleMichael], lv_point);
    UnitGroupAddUnitGroup(lv_group, UnitLastCreatedGroup());
    autoB6A177E2_g = lv_group;
    autoB6A177E2_u = UnitGroupCount(autoB6A177E2_g, c_unitCountAll);
    for (;; autoB6A177E2_u -= 1) {
        autoB6A177E2_var = UnitGroupUnitFromEnd(autoB6A177E2_g, autoB6A177E2_u);
        if (autoB6A177E2_var == null) { break; }
        UnitSetTeamColorIndex(autoB6A177E2_var, 3);
        UnitSetCustomValue(autoB6A177E2_var, 62, gf_GetRoleNumber("0003"));
        gv_playerData[UnitGetOwner(autoB6A177E2_var)].lv_aftermathElitesTotal += 1;
        UnitBehaviorAdd(autoB6A177E2_var, "SystemHevenReinforcementVisual", autoB6A177E2_var, 1);
    }
    lv_point = RegionGetCenter(RegionFromId(35));
    for (autoD76A763A_i = 1; autoD76A763A_i <= autoD76A763A_n; autoD76A763A_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "StoneZealot", 0, gv_gameData.lv_rolesOwners[gv_syn.lv_roleJehoel], lv_point);
        UnitSetTeamColorIndex(UnitLastCreated(), 12);
        UnitBehaviorAdd(UnitLastCreated(), "SystemHevenReinforcementVisual", UnitLastCreated(), 1);
    }
    UnitGroupClear(lv_group);
    libNtve_gf_CreateUnitsWithDefaultFacing(4, "Diamondback", 0, gv_gameData.lv_rolesOwners[gv_syn.lv_roleJehoel], lv_point);
    UnitGroupAddUnitGroup(lv_group, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(4, "Zealot", 0, gv_gameData.lv_rolesOwners[gv_syn.lv_roleJehoel], lv_point);
    auto2D04736C_g = UnitLastCreatedGroup();
    auto2D04736C_u = UnitGroupCount(auto2D04736C_g, c_unitCountAll);
    for (;; auto2D04736C_u -= 1) {
        auto2D04736C_var = UnitGroupUnitFromEnd(auto2D04736C_g, auto2D04736C_u);
        if (auto2D04736C_var == null) { break; }
        UnitIssueOrder(auto2D04736C_var, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    }
    UnitGroupAddUnitGroup(lv_group, UnitLastCreatedGroup());
    autoCC9230FE_g = lv_group;
    autoCC9230FE_u = UnitGroupCount(autoCC9230FE_g, c_unitCountAll);
    for (;; autoCC9230FE_u -= 1) {
        autoCC9230FE_var = UnitGroupUnitFromEnd(autoCC9230FE_g, autoCC9230FE_u);
        if (autoCC9230FE_var == null) { break; }
        UnitSetTeamColorIndex(autoCC9230FE_var, 12);
        UnitSetCustomValue(autoCC9230FE_var, 62, gf_GetRoleNumber("0005"));
        gv_playerData[UnitGetOwner(autoCC9230FE_var)].lv_aftermathElitesTotal += 1;
        UnitBehaviorAdd(autoCC9230FE_var, "SystemHevenReinforcementVisual", autoCC9230FE_var, 1);
    }
    lv_point = RegionGetCenter(RegionFromId(32));
    for (auto569FAF02_i = 1; auto569FAF02_i <= auto569FAF02_n; auto569FAF02_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "StoneZealot", 0, gv_gameData.lv_rolesOwners[gv_syn.lv_roleUriel], lv_point);
        UnitBehaviorAdd(UnitLastCreated(), "SystemHevenReinforcementVisual", UnitLastCreated(), 1);
        UnitSetTeamColorIndex(UnitLastCreated(), 7);
    }
    UnitGroupClear(lv_group);
    libNtve_gf_CreateUnitsWithDefaultFacing(4, "Goliath", 0, gv_gameData.lv_rolesOwners[gv_syn.lv_roleUriel], lv_point);
    UnitGroupAddUnitGroup(lv_group, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(4, "Reaper", 0, gv_gameData.lv_rolesOwners[gv_syn.lv_roleUriel], lv_point);
    UnitGroupAddUnitGroup(lv_group, UnitLastCreatedGroup());
    auto6E0C19F7_g = lv_group;
    auto6E0C19F7_u = UnitGroupCount(auto6E0C19F7_g, c_unitCountAll);
    for (;; auto6E0C19F7_u -= 1) {
        auto6E0C19F7_var = UnitGroupUnitFromEnd(auto6E0C19F7_g, auto6E0C19F7_u);
        if (auto6E0C19F7_var == null) { break; }
        UnitSetTeamColorIndex(auto6E0C19F7_var, 7);
        UnitSetCustomValue(auto6E0C19F7_var, 62, gf_GetRoleNumber("0002"));
        gv_playerData[UnitGetOwner(auto6E0C19F7_var)].lv_aftermathElitesTotal += 1;
        UnitBehaviorAdd(auto6E0C19F7_var, "SystemHevenReinforcementVisual", auto6E0C19F7_var, 1);
    }
    lv_point = RegionGetCenter(RegionFromId(33));
    for (autoBE4EBC69_i = 1; autoBE4EBC69_i <= autoBE4EBC69_n; autoBE4EBC69_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "StoneZealot", 0, gv_gameData.lv_rolesOwners[gv_syn.lv_roleSeraphiel], lv_point);
        UnitSetTeamColorIndex(UnitLastCreated(), 4);
        UnitBehaviorAdd(UnitLastCreated(), "SystemHevenReinforcementVisual", UnitLastCreated(), 1);
    }
    UnitGroupClear(lv_group);
    libNtve_gf_CreateUnitsWithDefaultFacing(4, "Stalker2", 0, gv_gameData.lv_rolesOwners[gv_syn.lv_roleSeraphiel], lv_point);
    UnitGroupAddUnitGroup(lv_group, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(4, "Marauder", 0, gv_gameData.lv_rolesOwners[gv_syn.lv_roleSeraphiel], lv_point);
    UnitGroupAddUnitGroup(lv_group, UnitLastCreatedGroup());
    autoC315D3CA_g = lv_group;
    autoC315D3CA_u = UnitGroupCount(autoC315D3CA_g, c_unitCountAll);
    for (;; autoC315D3CA_u -= 1) {
        autoC315D3CA_var = UnitGroupUnitFromEnd(autoC315D3CA_g, autoC315D3CA_u);
        if (autoC315D3CA_var == null) { break; }
        UnitSetTeamColorIndex(autoC315D3CA_var, 4);
        UnitSetCustomValue(autoC315D3CA_var, 62, gf_GetRoleNumber("0004"));
        gv_playerData[UnitGetOwner(autoC315D3CA_var)].lv_aftermathElitesTotal += 1;
        UnitBehaviorAdd(autoC315D3CA_var, "SystemHevenReinforcementVisual", autoC315D3CA_var, 1);
    }
    lv_hellPlayer = gv_gameData.lv_rolesOwners[gv_syn.lv_roleDevil];
    lv_player = UnitGetOwner(UnitFromId(784));
    UnitGroupClear(lv_group);
    if ((UnitGroupCount(gv_gameData.lv_playerGrigoriAmount[1], c_unitCountAlive) == 0)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Overseer", 0, lv_player, RegionGetCenter(RegionFromId(28)));
        UnitGroupAddUnitGroup(lv_group, UnitLastCreatedGroup());
        UnitGroupAdd(gv_gameData.lv_playerGrigoriAmount[1], UnitLastCreated());
        UnitSetCustomValue(UnitLastCreated(), gv_syn.lv_unitCustomValueCurrentRole, IntToFixed(gv_syn.lv_roleDevil));
        UIDisplayMessage(PlayerGroupSingle(lv_player), c_messageAreaSubtitle, StringExternal("Param/Value/119AB359"));
    }
    else {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Ultralisk2", 0, lv_player, RegionGetCenter(RegionFromId(1)));
        auto2B5379B4_g = UnitLastCreatedGroup();
        auto2B5379B4_u = UnitGroupCount(auto2B5379B4_g, c_unitCountAll);
        for (;; auto2B5379B4_u -= 1) {
            auto2B5379B4_var = UnitGroupUnitFromEnd(auto2B5379B4_g, auto2B5379B4_u);
            if (auto2B5379B4_var == null) { break; }
            UnitIssueOrder(auto2B5379B4_var, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
        }
        UnitGroupAddUnitGroup(lv_group, UnitLastCreatedGroup());
        libNtve_gf_CreateUnitsWithDefaultFacing(2, "Hunterling", 0, lv_player, RegionGetCenter(RegionFromId(2)));
        autoE31C6ABD_g = UnitLastCreatedGroup();
        autoE31C6ABD_u = UnitGroupCount(autoE31C6ABD_g, c_unitCountAll);
        for (;; autoE31C6ABD_u -= 1) {
            autoE31C6ABD_var = UnitGroupUnitFromEnd(autoE31C6ABD_g, autoE31C6ABD_u);
            if (autoE31C6ABD_var == null) { break; }
            UnitIssueOrder(autoE31C6ABD_var, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
        }
        UnitGroupAddUnitGroup(lv_group, UnitLastCreatedGroup());
        libNtve_gf_CreateUnitsWithDefaultFacing(2, "Baneling", 0, lv_player, RegionGetCenter(RegionFromId(3)));
        auto58699426_g = UnitLastCreatedGroup();
        auto58699426_u = UnitGroupCount(auto58699426_g, c_unitCountAll);
        for (;; auto58699426_u -= 1) {
            auto58699426_var = UnitGroupUnitFromEnd(auto58699426_g, auto58699426_u);
            if (auto58699426_var == null) { break; }
            UnitIssueOrder(auto58699426_var, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
        }
        UnitGroupAddUnitGroup(lv_group, UnitLastCreatedGroup());
        UIDisplayMessage(PlayerGroupSingle(lv_player), c_messageAreaSubtitle, StringExternal("Param/Value/CF8DB007"));
    }
    auto75EAF2E0_g = lv_group;
    auto75EAF2E0_u = UnitGroupCount(auto75EAF2E0_g, c_unitCountAll);
    for (;; auto75EAF2E0_u -= 1) {
        auto75EAF2E0_var = UnitGroupUnitFromEnd(auto75EAF2E0_g, auto75EAF2E0_u);
        if (auto75EAF2E0_var == null) { break; }
        if ((UnitGetOwner(auto75EAF2E0_var) != lv_hellPlayer)) {
            UnitGroupAdd(gv_gameData.lv_claimedTroops[UnitGetOwner(auto75EAF2E0_var)], auto75EAF2E0_var);
        }
        else {
            UnitSetTeamColorIndex(auto75EAF2E0_var, 1);
        }
        UnitSetCustomValue(auto75EAF2E0_var, gv_syn.lv_unitCustomValueOriginalPlayer, lv_hellPlayer);
        UnitSetCustomValue(auto75EAF2E0_var, gv_syn.lv_unitCustomValueOriginalRole, gf_GetRoleNumber("0007"));
        gv_playerData[UnitGetOwner(auto75EAF2E0_var)].lv_aftermathElitesTotal += 1;
        UnitBehaviorAdd(auto75EAF2E0_var, "SystemHellReinforcementVisual", auto75EAF2E0_var, 1);
    }
    lv_hellPlayer = gv_gameData.lv_rolesOwners[gv_syn.lv_roleAsmodeus];
    lv_player = UnitGetOwner(UnitFromId(709));
    UnitGroupClear(lv_group);
    if ((UnitGroupCount(gv_gameData.lv_playerGrigoriAmount[2], c_unitCountAlive) == 0)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Overseer", 0, lv_player, RegionGetCenter(RegionFromId(27)));
        UnitGroupAddUnitGroup(lv_group, UnitLastCreatedGroup());
        UnitGroupAdd(gv_gameData.lv_playerGrigoriAmount[2], UnitLastCreated());
        UnitSetCustomValue(UnitLastCreated(), gv_syn.lv_unitCustomValueCurrentRole, IntToFixed(gv_syn.lv_roleAsmodeus));
        UIDisplayMessage(PlayerGroupSingle(lv_player), c_messageAreaSubtitle, StringExternal("Param/Value/F22E19D5"));
    }
    else {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "SiegeBreaker", 0, lv_player, RegionGetCenter(RegionFromId(4)));
        UnitGroupAddUnitGroup(lv_group, UnitLastCreatedGroup());
        libNtve_gf_CreateUnitsWithDefaultFacing(2, "VikingAssault", 0, lv_player, RegionGetCenter(RegionFromId(6)));
        UnitGroupAddUnitGroup(lv_group, UnitLastCreatedGroup());
        libNtve_gf_CreateUnitsWithDefaultFacing(2, "Immortal", 0, lv_player, RegionGetCenter(RegionFromId(7)));
        UnitGroupAddUnitGroup(lv_group, UnitLastCreatedGroup());
        UIDisplayMessage(PlayerGroupSingle(lv_player), c_messageAreaSubtitle, StringExternal("Param/Value/3D5973A9"));
    }
    autoFD61652F_g = lv_group;
    autoFD61652F_u = UnitGroupCount(autoFD61652F_g, c_unitCountAll);
    for (;; autoFD61652F_u -= 1) {
        autoFD61652F_var = UnitGroupUnitFromEnd(autoFD61652F_g, autoFD61652F_u);
        if (autoFD61652F_var == null) { break; }
        if ((UnitGetOwner(autoFD61652F_var) != lv_hellPlayer)) {
            UnitGroupAdd(gv_gameData.lv_claimedTroops[UnitGetOwner(autoFD61652F_var)], autoFD61652F_var);
        }
        else {
            UnitSetTeamColorIndex(autoFD61652F_var, 6);
        }
        UnitSetCustomValue(autoFD61652F_var, gv_syn.lv_unitCustomValueOriginalPlayer, lv_hellPlayer);
        UnitSetCustomValue(autoFD61652F_var, gv_syn.lv_unitCustomValueOriginalRole, gf_GetRoleNumber("0008"));
        gv_playerData[UnitGetOwner(autoFD61652F_var)].lv_aftermathElitesTotal += 1;
        UnitBehaviorAdd(autoFD61652F_var, "SystemHellReinforcementVisual", autoFD61652F_var, 1);
    }
    lv_hellPlayer = gv_gameData.lv_rolesOwners[gv_syn.lv_roleAstaroth];
    lv_player = UnitGetOwner(UnitFromId(785));
    UnitGroupClear(lv_group);
    if ((UnitGroupCount(gv_gameData.lv_playerGrigoriAmount[3], c_unitCountAlive) == 0)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Overseer", 0, lv_player, RegionGetCenter(RegionFromId(29)));
        UnitGroupAddUnitGroup(lv_group, UnitLastCreatedGroup());
        UnitGroupAdd(gv_gameData.lv_playerGrigoriAmount[3], UnitLastCreated());
        UnitSetCustomValue(UnitLastCreated(), gv_syn.lv_unitCustomValueCurrentRole, IntToFixed(gv_syn.lv_roleAstaroth));
        UIDisplayMessage(PlayerGroupSingle(lv_player), c_messageAreaSubtitle, StringExternal("Param/Value/A5DB1FBA"));
    }
    else {
        libNtve_gf_CreateUnitsWithDefaultFacing(2, "HunterKiller", 0, lv_player, RegionGetCenter(RegionFromId(5)));
        UnitGroupAddUnitGroup(lv_group, UnitLastCreatedGroup());
        libNtve_gf_CreateUnitsWithDefaultFacing(2, "Roach2", 0, lv_player, RegionGetCenter(RegionFromId(9)));
        UnitGroupAddUnitGroup(lv_group, UnitLastCreatedGroup());
        libNtve_gf_CreateUnitsWithDefaultFacing(12, "Fallen", 0, lv_player, RegionGetCenter(RegionFromId(8)));
        auto6D773D6C_g = UnitLastCreatedGroup();
        auto6D773D6C_u = UnitGroupCount(auto6D773D6C_g, c_unitCountAll);
        for (;; auto6D773D6C_u -= 1) {
            auto6D773D6C_var = UnitGroupUnitFromEnd(auto6D773D6C_g, auto6D773D6C_u);
            if (auto6D773D6C_var == null) { break; }
            UnitIssueOrder(auto6D773D6C_var, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
        }
        UnitGroupAddUnitGroup(lv_group, UnitLastCreatedGroup());
        UIDisplayMessage(PlayerGroupSingle(lv_player), c_messageAreaSubtitle, StringExternal("Param/Value/4F13BD46"));
    }
    autoE4257E0C_g = lv_group;
    autoE4257E0C_u = UnitGroupCount(autoE4257E0C_g, c_unitCountAll);
    for (;; autoE4257E0C_u -= 1) {
        autoE4257E0C_var = UnitGroupUnitFromEnd(autoE4257E0C_g, autoE4257E0C_u);
        if (autoE4257E0C_var == null) { break; }
        if ((UnitGetOwner(autoE4257E0C_var) != lv_hellPlayer)) {
            UnitGroupAdd(gv_gameData.lv_claimedTroops[UnitGetOwner(autoE4257E0C_var)], autoE4257E0C_var);
        }
        else {
            UnitSetTeamColorIndex(autoE4257E0C_var, 5);
        }
        UnitSetCustomValue(autoE4257E0C_var, gv_syn.lv_unitCustomValueOriginalPlayer, lv_hellPlayer);
        UnitSetCustomValue(autoE4257E0C_var, gv_syn.lv_unitCustomValueOriginalRole, gf_GetRoleNumber("0009"));
        gv_playerData[UnitGetOwner(autoE4257E0C_var)].lv_aftermathElitesTotal += 1;
        UnitBehaviorAdd(autoE4257E0C_var, "SystemHellReinforcementVisual", autoE4257E0C_var, 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GodReturns_Init () {
    gt_GodReturns = TriggerCreate("gt_GodReturns_Func");
    TriggerAddEventTimer(gt_GodReturns, gv_gameData.lv_godTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Text Tags
//--------------------------------------------------------------------------------------------------
bool gt_TextTags_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_temp1;
    int lv_temp2;
    int lv_temp3;
    int lv_temp4;
    int lv_temp5;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_temp1 = c_textTagNone;
    lv_temp2 = c_textTagNone;
    lv_temp3 = c_textTagNone;
    lv_temp4 = c_textTagNone;
    lv_temp5 = c_textTagNone;

    // Actions
    if (!runActions) {
        return true;
    }

    TextTagCreate(StringExternal("Param/Value/A6DB4910"), 24, UnitGetPosition(UnitFromId(784)), 1.0, true, false, gv_gameData.lv_playerGroupHell);
    gv_textTags.lv_hellgateDevil = TextTagLastCreated();
    TextTagCreate(StringExternal("Param/Value/CF322960"), 24, UnitGetPosition(UnitFromId(709)), 1.0, true, false, gv_gameData.lv_playerGroupHell);
    gv_textTags.lv_hellgateAstaroth = TextTagLastCreated();
    TextTagCreate(StringExternal("Param/Value/3D241C37"), 24, UnitGetPosition(UnitFromId(785)), 1.0, true, false, gv_gameData.lv_playerGroupHell);
    gv_textTags.lv_hellgateAsmodeus = TextTagLastCreated();
    TextTagCreate(StringExternal("Param/Value/03289FC9"), 24, UnitGetPosition(UnitFromId(488)), 1.0, true, false, gv_gameData.lv_playerGroupHeaven);
    TextTagCreate(StringExternal("Param/Value/3546C5D3"), 24, UnitGetPosition(UnitFromId(157)), 1.0, true, false, gv_gameData.lv_playerGroupHeaven);
    TextTagCreate(StringExternal("Param/Value/B5EFE8CA"), 24, UnitGetPosition(UnitFromId(30)), 1.0, true, false, gv_gameData.lv_playerGroupHeaven);
    lv_temp5 = TextTagLastCreated();
    TextTagCreate(StringExternal("Param/Value/FFB028D6"), 24, UnitGetPosition(UnitFromId(158)), 1.0, true, false, gv_gameData.lv_playerGroupHeaven);
    lv_temp4 = TextTagLastCreated();
    TextTagCreate(StringExternal("Param/Value/E00684AD"), 36, UnitGetPosition(UnitFromId(487)), 1.0, true, false, gv_gameData.lv_playerGroupHeaven);
    TextTagCreate(StringExternal("Param/Value/9213A051"), 36, UnitGetPosition(UnitFromId(486)), 1.0, true, false, gv_gameData.lv_playerGroupHeaven);
    Wait(240.0, c_timeReal);
    TextTagDestroy(lv_temp5);
    Wait(240.0, c_timeReal);
    TextTagDestroy(lv_temp4);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TextTags_Init () {
    gt_TextTags = TriggerCreate("gt_TextTags_Func");
    TriggerEnable(gt_TextTags, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Benediction Zapper
//--------------------------------------------------------------------------------------------------
bool gt_BenedictionZapper_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(UnitFromId(47)) == true))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(gv_gameData.lv_playerGroupHell, UnitGetOwner(EventUnit())) == true))) {
            return false;
        }

        if (!((UnitGroupHasUnit(UnitGroupFromId(11), EventUnit()) == false))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_gameData.lv_rolesOwners[gv_syn.lv_roleMessiah], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)))) == true))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) != "Stalker") || (UnitHasBehavior(EventUnit(), "HallucinationTimedLife") == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitKill(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BenedictionZapper_Init () {
    gt_BenedictionZapper = TriggerCreate("gt_BenedictionZapper_Func");
    TriggerAddEventUnitRegion(gt_BenedictionZapper, null, RegionFromId(22), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: [Duck] IdleButtonRally
//--------------------------------------------------------------------------------------------------
bool gt_DuckIdleButtonRally_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_cycle;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_cycle = 1;

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_roleSelect.lv_gENERALIdleButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventDialogControl() == gv_roleSelect.lv_gENERALIdleButton)) {
        UnitGroupSelect(UnitGroupIdle(EventPlayer(), true), EventPlayer(), true);
        return true;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DuckIdleButtonRally_Init () {
    gt_DuckIdleButtonRally = TriggerCreate("gt_DuckIdleButtonRally_Func");
    TriggerAddEventDialogControl(gt_DuckIdleButtonRally, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_DuckIdleButtonRally, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeHotkeyPressed);
}

//--------------------------------------------------------------------------------------------------
// Trigger: periodicAPMcheck
//--------------------------------------------------------------------------------------------------
bool gt_periodicAPMcheck_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playa;

    // Automatic Variable Declarations
    playergroup auto8D517F38_g;
    int auto8D517F38_var;
    playergroup autoEAC5D91D_g;
    playergroup auto64F95FF8_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto8D517F38_g = gv_gameData.lv_humansPlaying;
    auto8D517F38_var = -1;
    while (true) {
        auto8D517F38_var = PlayerGroupNextPlayer(auto8D517F38_g, auto8D517F38_var);
        if (auto8D517F38_var < 0) { break; }
        if ((PlayerScoreValueGetAsInt(auto8D517F38_var, "APM") == 0)) {
            gv_playerData[auto8D517F38_var].lv_timeSinceAction += 1;
            if ((gv_playerData[auto8D517F38_var].lv_timeSinceAction == 24)) {
                if ((PlayerGroupHasPlayer(gv_gameData.lv_playerGroupHeaven, auto8D517F38_var) == true)) {
                    UIDisplayMessage(gv_gameData.lv_playerGroupHeaven, c_messageAreaSubtitle, (TextWithColor(PlayerName(auto8D517F38_var), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(auto8D517F38_var, false))) + StringExternal("Param/Value/717DC572")));
                    autoEAC5D91D_g = gv_gameData.lv_playerGroupHeaven;
                    lv_playa = -1;
                    while (true) {
                        lv_playa = PlayerGroupNextPlayer(autoEAC5D91D_g, lv_playa);
                        if (lv_playa < 0) { break; }
                        PlayerSetAlliance(auto8D517F38_var, c_allianceIdControl, lv_playa, true);
                    }
                }
                else {
                    UIDisplayMessage(gv_gameData.lv_playerGroupHell, c_messageAreaSubtitle, (TextWithColor(PlayerName(auto8D517F38_var), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(auto8D517F38_var, false))) + StringExternal("Param/Value/B125E5A2")));
                    auto64F95FF8_g = gv_gameData.lv_playerGroupHell;
                    lv_playa = -1;
                    while (true) {
                        lv_playa = PlayerGroupNextPlayer(auto64F95FF8_g, lv_playa);
                        if (lv_playa < 0) { break; }
                        PlayerSetAlliance(auto8D517F38_var, c_allianceIdControl, lv_playa, true);
                    }
                }
            }

        }
        else {
            gv_playerData[auto8D517F38_var].lv_timeSinceAction = 0;
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_periodicAPMcheck_Init () {
    gt_periodicAPMcheck = TriggerCreate("gt_periodicAPMcheck_Func");
    TriggerAddEventTimePeriodic(gt_periodicAPMcheck, 5.0, c_timeReal);
}

//--------------------------------------------------------------------------------------------------
// Trigger: XP display Moloch
//--------------------------------------------------------------------------------------------------
bool gt_XPdisplayMoloch_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGetAlliance(UnitGetOwner(EventUnit()), c_allianceIdPassive, gv_gameData.lv_rolesOwners[gv_syn.lv_roleMoloch]) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((CatalogFieldValueGetAsInt(c_gameCatalogUnit, UnitGetType(EventUnit()), "KillXP", c_playerAny) > 0)) {
        TextTagCreate((StringToText(CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(EventUnit()), "KillXP", c_playerAny)) + StringExternal("Param/Value/D11578A1")), 17, UnitGetPosition(EventUnit()), 1.0, true, false, PlayerGroupSingle(gv_gameData.lv_rolesOwners[gv_syn.lv_roleMoloch]));
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 1.75);
        TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(50.20, 0.00, 100.00));
        TextTagSetVelocity(TextTagLastCreated(), 0.8, 90.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_XPdisplayMoloch_Init () {
    gt_XPdisplayMoloch = TriggerCreate("gt_XPdisplayMoloch_Func");
    TriggerAddEventUnitDamaged(gt_XPdisplayMoloch, null, c_unitDamageTypeAny, c_unitDamageFatal, "ParticleDisruptorsU");
    TriggerAddEventUnitDamaged(gt_XPdisplayMoloch, null, c_unitDamageTypeAny, c_unitDamageFatal, "SuicideDamage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: XP display Zadkiel
//--------------------------------------------------------------------------------------------------
bool gt_XPdisplayZadkiel_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = gv_gameData.lv_rolesOwners[gv_syn.lv_roleZadkiel];

    // Conditions
    if (testConds) {
        if (!((PlayerGetAlliance(UnitGetOwner(EventUnit()), c_allianceIdPassive, lv_player) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((CatalogFieldValueGetAsInt(c_gameCatalogUnit, UnitGetType(EventUnit()), "KillXP", c_playerAny) > 0)) {
        TextTagCreate((StringToText(CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(EventUnit()), "KillXP", c_playerAny)) + StringExternal("Param/Value/F5390016")), 17, UnitGetPosition(EventUnit()), 1.0, true, false, PlayerGroupSingle(lv_player));
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 1.75);
        TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(50.20, 0.00, 100.00));
        TextTagSetVelocity(TextTagLastCreated(), 0.8, 90.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_XPdisplayZadkiel_Init () {
    gt_XPdisplayZadkiel = TriggerCreate("gt_XPdisplayZadkiel_Func");
    TriggerAddEventUnitDamaged(gt_XPdisplayZadkiel, null, c_unitDamageTypeAny, c_unitDamageFatal, "WarpBlades");
}

//--------------------------------------------------------------------------------------------------
// Trigger: NewInit 2
//--------------------------------------------------------------------------------------------------
bool gt_NewInit2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPropertyFixed(UnitFromId(711), c_unitPropXP, 12000.0);
    gv_zadXPMax = 27000.0;
    UnitSetPropertyFixed(UnitFromId(439), c_unitPropXP, 60000.0);
    gv_moloXPMax = 105000.0;
    TriggerExecute(gt_NewUpdateZad2, true, false);
    TriggerExecute(gt_NewUpdateMolo2, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NewInit2_Init () {
    gt_NewInit2 = TriggerCreate("gt_NewInit2_Func");
    TriggerAddEventMapInit(gt_NewInit2);
}

//--------------------------------------------------------------------------------------------------
// Trigger: NewUpdateZad 2
//--------------------------------------------------------------------------------------------------
bool gt_NewUpdateZad2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_zadDmg;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetPropertyFixed(UnitFromId(711), c_unitPropXP, c_unitPropCurrent) > gv_zadXPMax)) {
        UnitSetPropertyFixed(UnitFromId(711), c_unitPropXP, gv_zadXPMax);
    }

    UnitSetPropertyFixed(UnitFromId(711), c_unitPropShieldsMax, (16.0 * SquareRoot((UnitGetPropertyFixed(UnitFromId(711), c_unitPropXP, c_unitPropCurrent) * 1.0))));
    UnitSetPropertyFixed(UnitFromId(711), c_unitPropLifeMax, (20.0 * SquareRoot((UnitGetPropertyFixed(UnitFromId(711), c_unitPropXP, c_unitPropCurrent) * 1.0))));
    lv_zadDmg = FixedToInt((SquareRoot(23.0) * SquareRoot((UnitGetPropertyFixed(UnitFromId(711), c_unitPropXP, c_unitPropCurrent) * 1.0))));
    UnitBehaviorRemove(UnitFromId(711), "Damageplus1", c_unitBehaviorCountAll);
    UnitBehaviorAdd(UnitFromId(711), "Damageplus1", UnitFromId(22), lv_zadDmg);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NewUpdateZad2_Init () {
    gt_NewUpdateZad2 = TriggerCreate("gt_NewUpdateZad2_Func");
    TriggerAddEventUnitGainExperience(gt_NewUpdateZad2, UnitRefFromUnit(UnitFromId(711)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: NewUpdateMolo 2
//--------------------------------------------------------------------------------------------------
bool gt_NewUpdateMolo2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_moloDmg;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetPropertyFixed(UnitFromId(439), c_unitPropXP, c_unitPropCurrent) > gv_moloXPMax)) {
        UnitSetPropertyFixed(UnitFromId(439), c_unitPropXP, gv_moloXPMax);
    }

    UnitSetPropertyFixed(UnitFromId(439), c_unitPropShieldsMax, (3.5 * SquareRoot(UnitGetPropertyFixed(UnitFromId(439), c_unitPropXP, c_unitPropCurrent))));
    UnitSetPropertyFixed(UnitFromId(439), c_unitPropLifeMax, ((10.0 * SquareRoot(1.5)) * SquareRoot((UnitGetPropertyFixed(UnitFromId(439), c_unitPropXP, c_unitPropCurrent) * 1.0))));
    lv_moloDmg = FixedToInt((SquareRoot(2.5) * SquareRoot((UnitGetPropertyFixed(UnitFromId(439), c_unitPropXP, c_unitPropCurrent) * 1.0))));
    UnitBehaviorRemove(UnitFromId(439), "Damageplus1", c_unitBehaviorCountAll);
    UnitBehaviorAdd(UnitFromId(439), "Damageplus1", UnitFromId(643), lv_moloDmg);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NewUpdateMolo2_Init () {
    gt_NewUpdateMolo2 = TriggerCreate("gt_NewUpdateMolo2_Func");
    TriggerAddEventUnitGainExperience(gt_NewUpdateMolo2, UnitRefFromUnit(UnitFromId(439)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reanimate Moloch
//--------------------------------------------------------------------------------------------------
bool gt_ReanimateMoloch_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitCount("NydusNetwork2", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(TimerCreate(), 45.0, false, c_timeReal);
    TimerWindowCreate(TimerLastStarted(), StringExternal("Param/Value/23157630"), false, false);
    TimerWindowShow(TimerWindowLastCreated(), PlayerGroupSingle(gv_gameData.lv_rolesOwners[gv_syn.lv_roleMoloch]), true);
    Wait(45.0, c_timeReal);
    TimerWindowDestroy(TimerWindowLastCreated());
    if ((UnitCount("NydusNetwork2", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) == 0)) {
        UIDisplayMessage(PlayerGroupSingle(gv_gameData.lv_rolesOwners[gv_syn.lv_roleMoloch]), c_messageAreaSubtitle, StringExternal("Param/Value/93BD2B4A"));
        return true;
    }

    if ((UnitIsAlive(UnitFromId(784)) == true)) {
        UnitSetPosition(EventUnit(), PointFromId(696), false);
    }
    else {
        if ((UnitIsAlive(UnitFromId(784)) == false) && (UnitIsAlive(UnitFromId(709)) == true)) {
            UnitSetPosition(EventUnit(), PointFromId(694), false);
        }
        else {
            if ((UnitIsAlive(UnitFromId(784)) == false) && (UnitIsAlive(UnitFromId(709)) == false) && (UnitIsAlive(UnitFromId(785)) == true)) {
                UnitSetPosition(EventUnit(), PointFromId(695), false);
            }

        }
    }
    UnitRevive(EventUnit());
    UnitSetPropertyFixed(EventUnit(), c_unitPropXP, (0.85 * UnitGetPropertyFixed(EventUnit(), c_unitPropXP, c_unitPropCurrent)));
    TriggerExecute(gt_NewUpdateMolo2, true, false);
    UnitSetPropertyFixed(EventUnit(), c_unitPropEnergyPercent, 100.0);
    UnitSetPropertyFixed(EventUnit(), c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(EventUnit(), c_unitPropShieldsPercent, 100.0);
    UnitSetTeamColorIndex(EventUnit(), 8);
    UnitBehaviorAdd(EventUnit(), "SystemHellReinforcementVisual", EventUnit(), 1);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/D324A035"));
    if ((UnitGroupCount(UnitGroup(null, UnitGetOwner(UnitFromId(439)), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 1)) {
        CameraPan(UnitGetOwner(UnitFromId(439)), UnitGetPosition(UnitFromId(439)), 1.0, -1, 10.0, true);
        UnitSelect(UnitFromId(439), UnitGetOwner(UnitFromId(439)), true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReanimateMoloch_Init () {
    gt_ReanimateMoloch = TriggerCreate("gt_ReanimateMoloch_Func");
    TriggerAddEventUnitDied(gt_ReanimateMoloch, UnitRefFromUnit(UnitFromId(439)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reanimate Zad
//--------------------------------------------------------------------------------------------------
bool gt_ReanimateZad_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(TimerCreate(), 45.0, false, c_timeReal);
    TimerWindowCreate(TimerLastStarted(), StringExternal("Param/Value/08384D81"), false, false);
    TimerWindowShow(TimerWindowLastCreated(), PlayerGroupSingle(gv_gameData.lv_rolesOwners[gv_syn.lv_roleZadkiel]), true);
    Wait(45.0, c_timeReal);
    TimerWindowDestroy(TimerWindowLastCreated());
    if ((gv_gameData.lv_hellHasWon == true)) {
        return true;
    }

    UnitSetPosition(EventUnit(), PointFromId(697), false);
    UnitRevive(EventUnit());
    UnitSetPropertyFixed(EventUnit(), c_unitPropXP, (0.85 * UnitGetPropertyFixed(EventUnit(), c_unitPropXP, c_unitPropCurrent)));
    TriggerExecute(gt_NewUpdateZad2, true, false);
    UnitSetPropertyFixed(EventUnit(), c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(EventUnit(), c_unitPropEnergyPercent, 100.0);
    UnitSetPropertyFixed(EventUnit(), c_unitPropShieldsPercent, 100.0);
    UnitSetTeamColorIndex(EventUnit(), 14);
    UnitBehaviorAdd(EventUnit(), "SystemHevenReinforcementVisual", EventUnit(), 1);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/30F14A59"));
    if ((UnitGroupCount(UnitGroup(null, UnitGetOwner(UnitFromId(711)), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 1)) {
        CameraPan(UnitGetOwner(UnitFromId(711)), UnitGetPosition(UnitFromId(711)), 1.0, -1, 10.0, true);
        UnitSelect(UnitFromId(711), UnitGetOwner(UnitFromId(711)), true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReanimateZad_Init () {
    gt_ReanimateZad = TriggerCreate("gt_ReanimateZad_Func");
    TriggerAddEventUnitDied(gt_ReanimateZad, UnitRefFromUnit(UnitFromId(711)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stop Redirect 2
//--------------------------------------------------------------------------------------------------
bool gt_StopRedirect2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoC3CCA2F0_g;
    int autoC3CCA2F0_u;
    unit autoC3CCA2F0_var;

    // Actions
    if (!runActions) {
        return true;
    }

    autoC3CCA2F0_g = UnitCargoGroup(EventUnit());
    autoC3CCA2F0_u = UnitGroupCount(autoC3CCA2F0_g, c_unitCountAll);
    for (;; autoC3CCA2F0_u -= 1) {
        autoC3CCA2F0_var = UnitGroupUnitFromEnd(autoC3CCA2F0_g, autoC3CCA2F0_u);
        if (autoC3CCA2F0_var == null) { break; }
        UnitIssueOrder(autoC3CCA2F0_var, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StopRedirect2_Init () {
    gt_StopRedirect2 = TriggerCreate("gt_StopRedirect2_Func");
    TriggerAddEventUnitOrder(gt_StopRedirect2, null, AbilityCommand("APCStop", 0));
    TriggerAddEventUnitOrder(gt_StopRedirect2, null, AbilityCommand("APCMove", 2));
    TriggerAddEventUnitOrder(gt_StopRedirect2, null, AbilityCommand("APCMove", 1));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Redirect Initial
//--------------------------------------------------------------------------------------------------
bool gt_AttackRedirectInitial_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto2543A39C_g;
    int auto2543A39C_u;
    unit auto2543A39C_var;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((OrderGetTargetType(EventUnitOrder()) == c_orderTargetUnit)) {
        UnitBehaviorAdd(EventUnit(), "APCSwapWeapons", EventUnit(), 1);
        auto2543A39C_g = UnitCargoGroup(EventUnit());
        auto2543A39C_u = UnitGroupCount(auto2543A39C_g, c_unitCountAll);
        for (;; auto2543A39C_u -= 1) {
            auto2543A39C_var = UnitGroupUnitFromEnd(auto2543A39C_g, auto2543A39C_u);
            if (auto2543A39C_var == null) { break; }
            UnitIssueOrder(auto2543A39C_var, OrderTargetingUnit(AbilityCommand("attack", 0), OrderGetTargetUnit(EventUnitOrder())), c_orderQueueReplace);
        }
    }
    else {
        UnitBehaviorRemove(EventUnit(), "APCSwapWeapons", 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackRedirectInitial_Init () {
    gt_AttackRedirectInitial = TriggerCreate("gt_AttackRedirectInitial_Func");
    TriggerAddEventUnitOrder(gt_AttackRedirectInitial, null, AbilityCommand("APCAttack", 0));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Redirect Final
//--------------------------------------------------------------------------------------------------
bool gt_AttackRedirectFinal_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto475881A4_g;
    int auto475881A4_u;
    unit auto475881A4_var;

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemove(EventPlayerEffectUsedUnit(c_effectUnitCaster), "APCSwapWeapons", 1);
    auto475881A4_g = UnitCargoGroup(EventPlayerEffectUsedUnit(c_effectUnitCaster));
    auto475881A4_u = UnitGroupCount(auto475881A4_g, c_unitCountAll);
    for (;; auto475881A4_u -= 1) {
        auto475881A4_var = UnitGroupUnitFromEnd(auto475881A4_g, auto475881A4_u);
        if (auto475881A4_var == null) { break; }
        UnitIssueOrder(auto475881A4_var, OrderTargetingUnit(AbilityCommand("attack", 0), EventPlayerEffectUsedUnit(c_effectUnitTarget)), c_orderQueueReplace);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackRedirectFinal_Init () {
    gt_AttackRedirectFinal = TriggerCreate("gt_AttackRedirectFinal_Func");
    TriggerAddEventPlayerEffectUsed(gt_AttackRedirectFinal, c_playerAny, "APCAttackRedirectDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Handle Cargo Load/Unload
//--------------------------------------------------------------------------------------------------
bool gt_HandleCargoLoadUnload_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_minrange;
    fixed lv_currentrange;

    // Automatic Variable Declarations
    unitgroup autoABCC9C5E_g;
    int autoABCC9C5E_u;
    unit autoABCC9C5E_var;

    // Variable Initialization
    lv_minrange = 100.0;

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemove(EventUnit(), "APCRange", 100);
    autoABCC9C5E_g = UnitCargoGroup(EventUnit());
    autoABCC9C5E_u = UnitGroupCount(autoABCC9C5E_g, c_unitCountAll);
    for (;; autoABCC9C5E_u -= 1) {
        autoABCC9C5E_var = UnitGroupUnitFromEnd(autoABCC9C5E_g, autoABCC9C5E_u);
        if (autoABCC9C5E_var == null) { break; }
        lv_currentrange = gf_GetAPCUnitRange(autoABCC9C5E_var);
        if ((lv_currentrange < lv_minrange) && (lv_currentrange != -1.0)) {
            lv_minrange = lv_currentrange;
        }

    }
    if ((UnitCargoValue(EventUnit(), c_unitCargoUnitCount) != 0) && (lv_minrange != 100.0)) {
        UnitBehaviorAddPlayer(EventUnit(), "APCRange", 1, (FloorI(lv_minrange) - 1));
        UnitBehaviorRemove(EventUnit(), "APCDisableDummyWeapons", 100);
    }
    else {
        UnitBehaviorAdd(EventUnit(), "APCDisableDummyWeapons", EventUnit(), 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HandleCargoLoadUnload_Init () {
    gt_HandleCargoLoadUnload = TriggerCreate("gt_HandleCargoLoadUnload_Func");
    TriggerAddEventUnitBehaviorChange(gt_HandleCargoLoadUnload, null, "HasCargo", c_unitBehaviorChangeAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: No 4GolRaph
//--------------------------------------------------------------------------------------------------
bool gt_No4GolRaph_Func (bool testConds, bool runActions) {
    // Variable Declarations
    order lv_unloadOrder;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unloadOrder = Order(AbilityCommand("MedivacTransport", 3));

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitCargo()) == "Goliath"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_raphGolCount < 2)) {
        gv_raphGolCount = (gv_raphGolCount + 1);
    }
    else {
        if ((gv_raphGolCount >= 2)) {
            gv_raphGolCount = (gv_raphGolCount + 1);
            OrderSetTargetPassenger(lv_unloadOrder, EventUnitCargo());
            UnitIssueOrder(UnitFromId(211), lv_unloadOrder, c_orderQueueReplace);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_No4GolRaph_Init () {
    gt_No4GolRaph = TriggerCreate("gt_No4GolRaph_Func");
    TriggerAddEventUnitCargo(gt_No4GolRaph, UnitRefFromUnit(UnitFromId(211)), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: RaphGolCountDown
//--------------------------------------------------------------------------------------------------
bool gt_RaphGolCountDown_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitCargo()) == "Goliath"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_raphGolCount = (gv_raphGolCount - 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RaphGolCountDown_Init () {
    gt_RaphGolCountDown = TriggerCreate("gt_RaphGolCountDown_Func");
    TriggerAddEventUnitCargo(gt_RaphGolCountDown, UnitRefFromUnit(UnitFromId(211)), false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Donatello repair Autocast toggle
//--------------------------------------------------------------------------------------------------
bool gt_DonatellorepairAutocasttoggle_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitCheckAbilCmdState(EventUnit(), AbilityCommand("donatellohealdummy", 0), c_cmdStateIsAutoCast) == false)) {
        UnitBehaviorRemove(EventUnit(), "DonatelloRepairSearch", 1);
    }
    else {
        if ((UnitHasBehavior(EventUnit(), "DonatelloRepairSearch") == false)) {
            UnitBehaviorAddPlayer(EventUnit(), "DonatelloRepairSearch", EventPlayer(), 1);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DonatellorepairAutocasttoggle_Init () {
    gt_DonatellorepairAutocasttoggle = TriggerCreate("gt_DonatellorepairAutocasttoggle_Func");
    TriggerAddEventUnitOrder(gt_DonatellorepairAutocasttoggle, UnitRefFromUnit(UnitFromId(440)), AbilityCommand("donatellohealdummy", 0));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Gabriel Holy Storm
//--------------------------------------------------------------------------------------------------
bool gt_GabrielHolyStorm_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "Roach") || (UnitGetType(EventUnit()) == "Hydralisk") || (UnitGetType(EventUnit()) == "Zergling")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitDamage(UnitBehaviorEffectUnit(EventUnit(), EventUnitBehavior(), c_effectUnitCaster, 0), "PsiStormDamage", EventUnit(), 9999.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GabrielHolyStorm_Init () {
    gt_GabrielHolyStorm = TriggerCreate("gt_GabrielHolyStorm_Func");
    TriggerAddEventUnitBehaviorChange(gt_GabrielHolyStorm, null, "PsiStorm", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Moloch Transfer Life
//--------------------------------------------------------------------------------------------------
bool gt_MolochTransferLife_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_healamount;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_healamount = MinF((UnitGetPropertyFixed(EventUnitTargetUnit(), c_unitPropLifeMax, c_unitPropCurrent) - UnitGetPropertyFixed(EventUnitTargetUnit(), c_unitPropLife, c_unitPropCurrent)), 500.0);
    UnitCreateEffectUnit(EventUnit(), "MolochTransferLifeBeamController", EventUnitTargetUnit());
    UnitSetPropertyFixed(EventUnitTargetUnit(), c_unitPropLife, (UnitGetPropertyFixed(EventUnitTargetUnit(), c_unitPropLife, c_unitPropCurrent) + lv_healamount));
    UnitSetPropertyFixed(EventUnit(), c_unitPropLife, (UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent) + (350.0 - (0.7 * lv_healamount))));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MolochTransferLife_Init () {
    gt_MolochTransferLife = TriggerCreate("gt_MolochTransferLife_Func");
    TriggerAddEventUnitAbility(gt_MolochTransferLife, null, AbilityCommand("TransferLife", 0), c_abilEffectStageFinish, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Donatello Stop Beams
//--------------------------------------------------------------------------------------------------
bool gt_DonatelloStopBeams_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnit(), "donatellocancelrepair", EventUnit(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DonatelloStopBeams_Init () {
    gt_DonatelloStopBeams = TriggerCreate("gt_DonatelloStopBeams_Func");
    TriggerAddEventUnitAbility(gt_DonatelloStopBeams, UnitRefFromUnit(UnitFromId(440)), AbilityCommand("stop", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Remove immobilze on move order
//--------------------------------------------------------------------------------------------------
bool gt_Removeimmobilzeonmoveorder_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior(EventUnit(), "Immobilizedwhileattacking") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemove(EventUnit(), "Immobilizedwhileattacking", 1);
    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), OrderGetTargetPosition(EventUnitOrder())), c_orderQueueAddToEnd);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Removeimmobilzeonmoveorder_Init () {
    gt_Removeimmobilzeonmoveorder = TriggerCreate("gt_Removeimmobilzeonmoveorder_Func");
    TriggerAddEventUnitOrder(gt_Removeimmobilzeonmoveorder, null, AbilityCommand("move", 0));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Moloch Life Steal Freebie
//--------------------------------------------------------------------------------------------------
bool gt_MolochLifeStealFreebie_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetPropertyFixed(UnitFromId(439), c_unitPropLife, c_unitPropCurrent) == UnitGetPropertyFixed(UnitFromId(439), c_unitPropLifeMax, c_unitPropCurrent))) {
        UnitSetPropertyFixed(UnitFromId(439), c_unitPropEnergy, (UnitGetPropertyFixed(UnitFromId(439), c_unitPropEnergy, c_unitPropCurrent) + 2.0));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MolochLifeStealFreebie_Init () {
    gt_MolochLifeStealFreebie = TriggerCreate("gt_MolochLifeStealFreebie_Func");
    TriggerAddEventPlayerEffectUsed(gt_MolochLifeStealFreebie, c_playerAny, "LifeStealModify");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Remove Seraphiel Concentrating
//--------------------------------------------------------------------------------------------------
bool gt_RemoveSeraphielConcentrating_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemovePlayer(UnitFromId(313), "Concentrating", UnitGetOwner(EventUnit()), 1);
    GameDestroyEffects(UnitGetPosition(UnitFromId(313)), 8.0, 0, "SeraphielSnipeLaserBeam");
    if (((EventUnitAbilityStage() == c_unitAbilStageCancel) || (EventUnitAbilityStage() == c_abilEffectStageBail))) {
        if ((UnitHasBehavior(EventUnit(), "SeraphielSnipeShootToken") == false)) {
            UnitSetPropertyFixed(EventUnit(), c_unitPropEnergy, (UnitGetPropertyFixed(EventUnit(), c_unitPropEnergy, c_unitPropCurrent) + 40.0));
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RemoveSeraphielConcentrating_Init () {
    gt_RemoveSeraphielConcentrating = TriggerCreate("gt_RemoveSeraphielConcentrating_Func");
    TriggerAddEventUnitAbility(gt_RemoveSeraphielConcentrating, UnitRefFromUnit(UnitFromId(313)), AbilityCommand("NovaSnipe", 0), c_unitAbilStageCancel, false);
    TriggerAddEventUnitAbility(gt_RemoveSeraphielConcentrating, UnitRefFromUnit(UnitFromId(313)), AbilityCommand("NovaSnipe", 0), c_abilEffectStageFinish, false);
    TriggerAddEventUnitAbility(gt_RemoveSeraphielConcentrating, UnitRefFromUnit(UnitFromId(313)), AbilityCommand("NovaSnipe", 0), c_abilEffectStageBail, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Remove Seraphiel Concentrating 2
//--------------------------------------------------------------------------------------------------
bool gt_RemoveSeraphielConcentrating2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_seraphielSnipeCasting == true)) {
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("NovaSnipe", 1)), c_orderQueueAddToFront);
    }
    else {
        gv_seraphielSnipeCasting = true;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RemoveSeraphielConcentrating2_Init () {
    gt_RemoveSeraphielConcentrating2 = TriggerCreate("gt_RemoveSeraphielConcentrating2_Func");
    TriggerAddEventUnitAbility(gt_RemoveSeraphielConcentrating2, UnitRefFromUnit(UnitFromId(313)), AbilityCommand("NovaSnipe", 0), c_abilEffectStageApproach, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Seraphiel Snipe Issue
//--------------------------------------------------------------------------------------------------
bool gt_SeraphielSnipeIssue_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_seraphielSnipeCasting = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SeraphielSnipeIssue_Init () {
    gt_SeraphielSnipeIssue = TriggerCreate("gt_SeraphielSnipeIssue_Func");
    TriggerAddEventUnitOrder(gt_SeraphielSnipeIssue, UnitRefFromUnit(UnitFromId(313)), AbilityCommand("NovaSnipe2", 0));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Leap Attack Area
//--------------------------------------------------------------------------------------------------
bool gt_LeapAttackArea_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_targetedunits;
    unit lv_targetunit;

    // Automatic Variable Declarations
    unitgroup autoC5CF5981_g;
    int autoC5CF5981_u;
    unit autoC5CF5981_var;

    // Variable Initialization
    lv_targetedunits = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_targetedunits = UnitGroupAlliance(UnitGetOwner(EventUnit()), c_unitAllianceEnemy, RegionCircle(EventUnitTargetPoint(), 2.8), UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterAir) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoC5CF5981_g = lv_targetedunits;
    autoC5CF5981_u = UnitGroupCount(autoC5CF5981_g, c_unitCountAll);
    for (;; autoC5CF5981_u -= 1) {
        autoC5CF5981_var = UnitGroupUnitFromEnd(autoC5CF5981_g, autoC5CF5981_u);
        if (autoC5CF5981_var == null) { break; }
        if ((UnitHasBehavior(autoC5CF5981_var, "targetofleap") == true)) {
            UnitGroupRemove(lv_targetedunits, autoC5CF5981_var);
        }

    }
    lv_targetunit = UnitGroupClosestToPoint(lv_targetedunits, UnitGetPosition(EventUnit()));
    if ((UnitGroupCount(lv_targetedunits, c_unitCountAll) == 0)) {
        UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("LeapAttack", 0), EventUnitTargetPoint()), c_orderQueueAddToFront);
    }
    else {
        UnitIssueOrder(EventUnit(), OrderTargetingUnit(AbilityCommand("LeapAttack", 0), lv_targetunit), c_orderQueueAddToFront);
        UnitBehaviorAdd(lv_targetunit, "targetofleap", EventUnit(), 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LeapAttackArea_Init () {
    gt_LeapAttackArea = TriggerCreate("gt_LeapAttackArea_Func");
    TriggerAddEventUnitAbility(gt_LeapAttackArea, null, AbilityCommand("LeapAssault", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Harpy Land Fail
//--------------------------------------------------------------------------------------------------
bool gt_HarpyLandFail_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(EventUnit(), Order(AbilityCommand("LeapAttackMorphToNormalForm", 0)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HarpyLandFail_Init () {
    gt_HarpyLandFail = TriggerCreate("gt_HarpyLandFail_Func");
    TriggerAddEventUnitAbility(gt_HarpyLandFail, null, AbilityCommand("LeapAttackMorphToNormalForm", 0), c_unitAbilStageCancel, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Predator Visiblity Periodic
//--------------------------------------------------------------------------------------------------
bool gt_PredatorVisiblityPeriodic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto3D2FF30B_g;
    int auto3D2FF30B_u;
    unit auto3D2FF30B_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameData.lv_gameStarted == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto3D2FF30B_g = UnitGroup("Predator", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, 0, (1 << (c_targetFilterDead - 32))), 0);
    auto3D2FF30B_u = UnitGroupCount(auto3D2FF30B_g, c_unitCountAll);
    for (;; auto3D2FF30B_u -= 1) {
        auto3D2FF30B_var = UnitGroupUnitFromEnd(auto3D2FF30B_g, auto3D2FF30B_u);
        if (auto3D2FF30B_var == null) { break; }
        if ((libNtve_gf_UnitIsVisibleToPlayer(auto3D2FF30B_var, gv_gameData.lv_rolesOwners[gv_syn.lv_roleDevil]) == true)) {
            UnitBehaviorRemove(auto3D2FF30B_var, "AmbushPreparing", 1);
            UnitBehaviorRemove(auto3D2FF30B_var, "AmbushPrepared", 1);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PredatorVisiblityPeriodic_Init () {
    gt_PredatorVisiblityPeriodic = TriggerCreate("gt_PredatorVisiblityPeriodic_Func");
    TriggerAddEventTimePeriodic(gt_PredatorVisiblityPeriodic, 1.0, c_timeReal);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Predator Cloak Cooldown
//--------------------------------------------------------------------------------------------------
bool gt_PredatorCloakCooldown_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitAbilityAddCooldown(EventUnit(), "Stalking", "stalk", 20.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PredatorCloakCooldown_Init () {
    gt_PredatorCloakCooldown = TriggerCreate("gt_PredatorCloakCooldown_Func");
    TriggerAddEventUnitAbility(gt_PredatorCloakCooldown, null, AbilityCommand("Stalking", 1), c_abilBehaviorStageUntoggled, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Sammy Hallucinations
//--------------------------------------------------------------------------------------------------
bool gt_SammyHallucinations_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, UnitGetType(EventUnitTargetUnit()), 0, UnitGetOwner(EventUnit()), EventUnitTargetPoint());
    UnitBehaviorAdd(UnitLastCreated(), "HallucinationTimedLife", EventUnit(), 1);
    UnitBehaviorAdd(UnitLastCreated(), "Hallucination", EventUnit(), 1);
    UnitSetTeamColorIndex(UnitLastCreated(), PlayerGetColorIndex(UnitGetOwner(EventUnitTargetUnit()), false));
    if ((UnitGetType(UnitLastCreated()) == "Artanis")) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/5EEAB993"));
        UnitKill(UnitLastCreated());
    }

    if (((UnitGetType(UnitLastCreated()) == "Stalker") || (UnitGetType(UnitLastCreated()) == "DarkTemplar"))) {
        lv_unit = UnitLastCreated();
        while (!((UnitIsAlive(lv_unit) == false))) {
            Wait(0.125, c_timeGame);
        }
        UnitSetOwner(lv_unit, 0, false);
        Wait(1.0, c_timeGame);
        UnitRemove(lv_unit);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SammyHallucinations_Init () {
    gt_SammyHallucinations = TriggerCreate("gt_SammyHallucinations_Func");
    TriggerAddEventUnitAbility(gt_SammyHallucinations, null, AbilityCommand("DemonicParody", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Sammy Siege
//--------------------------------------------------------------------------------------------------
bool gt_SammySiege_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_stacksvar;
    unit lv_target;

    // Automatic Variable Declarations
    string auto226EC5C4_val;

    // Variable Initialization
    lv_target = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemove(lv_target, "SammyazzaInfernalSiegeTriggerToken", 1);
    auto226EC5C4_val = UnitGetType(lv_target);
    if (auto226EC5C4_val == "Hydralisk") {
        lv_stacksvar = 5;
    }
    else if (auto226EC5C4_val == "HunterKiller") {
        lv_stacksvar = 5;
    }
    else if (auto226EC5C4_val == "HunterKillerBurrowed") {
        lv_stacksvar = 5;
    }
    else if (auto226EC5C4_val == "Roach2") {
        lv_stacksvar = 3;
    }
    else if (auto226EC5C4_val == "RoachBurrowed2") {
        lv_stacksvar = 3;
    }
    else if (auto226EC5C4_val == "VikingAssault") {
        lv_stacksvar = 4;
    }
    else if (auto226EC5C4_val == "VikingFighter") {
        lv_stacksvar = 4;
    }
    else if (auto226EC5C4_val == "Immortal") {
        lv_stacksvar = 7;
    }
    else if (auto226EC5C4_val == "Roach") {
        lv_stacksvar = 3;
    }
    else if (auto226EC5C4_val == "SiegeBreakerSieged") {
        lv_stacksvar = 13;
    }
    else if (auto226EC5C4_val == "SiegeBreaker") {
        lv_stacksvar = 13;
    }
    else if (auto226EC5C4_val == "Hydralisk2") {
        lv_stacksvar = 3;
    }
    else if (auto226EC5C4_val == "HydraliskBurrowed2") {
        lv_stacksvar = 6;
    }
    else if (auto226EC5C4_val == "Stalker") {
        lv_stacksvar = 6;
    }
    else if (auto226EC5C4_val == "Odin") {
        lv_stacksvar = 4;
    }
    else if (auto226EC5C4_val == "OdinFlying") {
        lv_stacksvar = 4;
    }
    else if (auto226EC5C4_val == "Mutalisk") {
        lv_stacksvar = 3;
    }
    else if (auto226EC5C4_val == "Karass") {
        lv_stacksvar = 4;
    }
    else if (auto226EC5C4_val == "KerriganCharBurrowed") {
        lv_stacksvar = 4;
    }
    else if (auto226EC5C4_val == "KerriganChar") {
        lv_stacksvar = 4;
    }
    else if (auto226EC5C4_val == "Lurker") {
        libNtve_gf_UIErrorMessage(PlayerGroupSingle(EventPlayer()), StringExternal("Param/Value/A925911D"), SoundLink("UI_GenericError", -1));
    }
    else if (auto226EC5C4_val == "LurkerBurrowed") {
        libNtve_gf_UIErrorMessage(PlayerGroupSingle(EventPlayer()), StringExternal("Param/Value/2CF44D70"), SoundLink("UI_GenericError", -1));
    }
    else {
        libNtve_gf_UIErrorMessage(PlayerGroupSingle(EventPlayer()), StringExternal("Param/Value/E231B4A8"), SoundLink("UI_GenericError", -1));
    }
    UnitBehaviorRemove(lv_target, "InfernalSiege", 20);
    UnitBehaviorAdd(lv_target, "InfernalSiege", lv_target, lv_stacksvar);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SammySiege_Init () {
    gt_SammySiege = TriggerCreate("gt_SammySiege_Func");
    TriggerAddEventUnitBehaviorChange(gt_SammySiege, null, "SammyazzaInfernalSiegeTriggerToken", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Plague Heal
//--------------------------------------------------------------------------------------------------
bool gt_PlagueHeal_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitBehaviorEnabled(EventUnit(), "DefilerMPPlague2") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorSetDurationRemaining(EventUnit(), "DefilerMPPlague2", 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlagueHeal_Init () {
    gt_PlagueHeal = TriggerCreate("gt_PlagueHeal_Func");
    TriggerAddEventUnitHealed(gt_PlagueHeal, null, c_unitVitalLife, "MedivacHealModifyTargetLife2");
    TriggerAddEventUnitHealed(gt_PlagueHeal, null, c_unitVitalLife, "MedivacAPCHeal");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dona Cleanse
//--------------------------------------------------------------------------------------------------
bool gt_DonaCleanse_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitBehaviorEnabled(EventUnit(), "FungalGrowth") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorSetDurationRemaining(EventUnit(), "FungalGrowth", 0.0);
    UnitBehaviorSetDurationRemaining(EventUnit(), "FungalGrowthMovement", 0.0);
    UnitBehaviorSetDurationRemaining(EventUnit(), "FungalSlow75", 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DonaCleanse_Init () {
    gt_DonaCleanse = TriggerCreate("gt_DonaCleanse_Func");
    TriggerAddEventUnitHealed(gt_DonaCleanse, null, c_unitVitalLife, "MedivacHealModifyTargetLife2");
}

//--------------------------------------------------------------------------------------------------
// Trigger: DRH Fungal
//--------------------------------------------------------------------------------------------------
bool gt_DRHFungal_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_timeScale;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_timeScale = 0.5712;

    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "Donatello") || (UnitGetType(EventUnit()) == "Reaper")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorSetDurationRemaining(EventUnit(), "FungalGrowthMovement", (lv_timeScale * UnitBehaviorDuration(EventUnit(), "FungalGrowthMovement")));
    UnitBehaviorSetDurationRemaining(EventUnit(), "FungalGrowthSlowMovement", (lv_timeScale * UnitBehaviorDuration(EventUnit(), "FungalGrowthSlowMovement")));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DRHFungal_Init () {
    gt_DRHFungal = TriggerCreate("gt_DRHFungal_Func");
    TriggerAddEventUnitBehaviorChange(gt_DRHFungal, null, "FungalGrowthMovement", c_unitBehaviorChangeIncrease);
    TriggerAddEventUnitBehaviorChange(gt_DRHFungal, null, "FungalGrowthSlowMovement", c_unitBehaviorChangeIncrease);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tumor color fix
//--------------------------------------------------------------------------------------------------
bool gt_Tumorcolorfix_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetCustomValue(EventUnitCreatedUnit(), gv_syn.lv_unitCustomValueCurrentRole, UnitGetCustomValue(EventUnit(), gv_syn.lv_unitCustomValueCurrentRole));
    if ((UnitGetOwner(EventUnit()) == 15)) {
        UnitSetTeamColorIndex(EventUnitCreatedUnit(), gf_ColorID_To_Color(FixedToInt(UnitGetCustomValue(EventUnitCreatedUnit(), gv_syn.lv_unitCustomValueCurrentRole))));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Tumorcolorfix_Init () {
    gt_Tumorcolorfix = TriggerCreate("gt_Tumorcolorfix_Func");
    TriggerAddEventUnitCreated(gt_Tumorcolorfix, null, "CreepTumorBuild2", null);
    TriggerAddEventUnitCreated(gt_Tumorcolorfix, null, "CreepTumorBuild", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Populate Nyduses
//--------------------------------------------------------------------------------------------------
bool gt_PopulateNyduses_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_group;
    int lv_player;

    // Automatic Variable Declarations
    unitgroup auto0BF7A3A4_g;
    int auto0BF7A3A4_u;
    unit auto0BF7A3A4_var;
    unitgroup auto9DE6DD48_g;
    int auto9DE6DD48_u;
    unit auto9DE6DD48_var;
    unitgroup autoA00CEFE6_g;
    int autoA00CEFE6_u;
    unit autoA00CEFE6_var;

    // Variable Initialization
    lv_group = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = gv_gameData.lv_rolesOwners[gv_syn.lv_roleDevil];
    UnitCargoCreate(gv_gameData.lv_nydusSatan, "Zergling", (20 - (UnitGroupCount(UnitGroupFilter("Zergling", c_playerAny, gv_gameData.lv_playerEvilHordeGroup[1], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), c_unitCountAlive) + 0)));
    UnitGroupAddUnitGroup(gv_gameData.lv_playerEvilHordeGroup[1], UnitCargoLastCreatedGroup());
    UnitGroupAddUnitGroup(lv_group, UnitCargoLastCreatedGroup());
    UnitCargoCreate(gv_gameData.lv_nydusSatan, "Hydralisk", (20 - (UnitGroupCount(UnitGroupFilter("Hydralisk", c_playerAny, gv_gameData.lv_playerEvilHordeGroup[1], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), c_unitCountAlive) + 0)));
    UnitGroupAddUnitGroup(gv_gameData.lv_playerEvilHordeGroup[1], UnitCargoLastCreatedGroup());
    UnitGroupAddUnitGroup(lv_group, UnitCargoLastCreatedGroup());
    UnitCargoCreate(gv_gameData.lv_nydusSatan, "Roach", (20 - (UnitGroupCount(UnitGroupFilter("Roach", c_playerAny, gv_gameData.lv_playerEvilHordeGroup[1], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), c_unitCountAlive) + 0)));
    UnitGroupAddUnitGroup(gv_gameData.lv_playerEvilHordeGroup[1], UnitCargoLastCreatedGroup());
    UnitGroupAddUnitGroup(lv_group, UnitCargoLastCreatedGroup());
    auto0BF7A3A4_g = lv_group;
    auto0BF7A3A4_u = UnitGroupCount(auto0BF7A3A4_g, c_unitCountAll);
    for (;; auto0BF7A3A4_u -= 1) {
        auto0BF7A3A4_var = UnitGroupUnitFromEnd(auto0BF7A3A4_g, auto0BF7A3A4_u);
        if (auto0BF7A3A4_var == null) { break; }
        if ((UnitGetOwner(auto0BF7A3A4_var) != lv_player)) {
            UnitGroupAdd(gv_gameData.lv_claimedTroops[UnitGetOwner(auto0BF7A3A4_var)], auto0BF7A3A4_var);
        }
        else {
            UnitSetTeamColorIndex(auto0BF7A3A4_var, 1);
        }
        UnitSetCustomValue(auto0BF7A3A4_var, 63, lv_player);
        UnitSetCustomValue(auto0BF7A3A4_var, 62, gf_GetRoleNumber("0007"));
    }
    lv_player = gv_gameData.lv_rolesOwners[gv_syn.lv_roleAsmodeus];
    UnitGroupClear(lv_group);
    UnitCargoCreate(gv_gameData.lv_nydusAsmo, "Zergling", (20 - (UnitGroupCount(UnitGroupFilter("Zergling", c_playerAny, gv_gameData.lv_playerEvilHordeGroup[2], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), c_unitCountAlive) + 0)));
    UnitGroupAddUnitGroup(gv_gameData.lv_playerEvilHordeGroup[2], UnitCargoLastCreatedGroup());
    UnitGroupAddUnitGroup(lv_group, UnitCargoLastCreatedGroup());
    UnitCargoCreate(gv_gameData.lv_nydusAsmo, "Hydralisk", (20 - (UnitGroupCount(UnitGroupFilter("Hydralisk", c_playerAny, gv_gameData.lv_playerEvilHordeGroup[2], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), c_unitCountAlive) + 0)));
    UnitGroupAddUnitGroup(gv_gameData.lv_playerEvilHordeGroup[2], UnitCargoLastCreatedGroup());
    UnitGroupAddUnitGroup(lv_group, UnitCargoLastCreatedGroup());
    UnitCargoCreate(gv_gameData.lv_nydusAsmo, "Roach", (20 - (UnitGroupCount(UnitGroupFilter("Roach", c_playerAny, gv_gameData.lv_playerEvilHordeGroup[2], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), c_unitCountAlive) + 0)));
    UnitGroupAddUnitGroup(gv_gameData.lv_playerEvilHordeGroup[2], UnitCargoLastCreatedGroup());
    UnitGroupAddUnitGroup(lv_group, UnitCargoLastCreatedGroup());
    auto9DE6DD48_g = lv_group;
    auto9DE6DD48_u = UnitGroupCount(auto9DE6DD48_g, c_unitCountAll);
    for (;; auto9DE6DD48_u -= 1) {
        auto9DE6DD48_var = UnitGroupUnitFromEnd(auto9DE6DD48_g, auto9DE6DD48_u);
        if (auto9DE6DD48_var == null) { break; }
        if ((UnitGetOwner(auto9DE6DD48_var) != lv_player)) {
            UnitGroupAdd(gv_gameData.lv_claimedTroops[UnitGetOwner(auto9DE6DD48_var)], auto9DE6DD48_var);
        }
        else {
            UnitSetTeamColorIndex(auto9DE6DD48_var, 6);
        }
        UnitSetCustomValue(auto9DE6DD48_var, 63, lv_player);
        UnitSetCustomValue(auto9DE6DD48_var, 62, gf_GetRoleNumber("0008"));
    }
    lv_player = gv_gameData.lv_rolesOwners[gv_syn.lv_roleAstaroth];
    UnitGroupClear(lv_group);
    UnitCargoCreate(gv_gameData.lv_nydusAsta, "Zergling", (20 - (UnitGroupCount(UnitGroupFilter("Zergling", c_playerAny, gv_gameData.lv_playerEvilHordeGroup[3], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), c_unitCountAlive) + 0)));
    UnitGroupAddUnitGroup(gv_gameData.lv_playerEvilHordeGroup[3], UnitCargoLastCreatedGroup());
    UnitGroupAddUnitGroup(lv_group, UnitCargoLastCreatedGroup());
    UnitCargoCreate(gv_gameData.lv_nydusAsta, "Hydralisk", (20 - (UnitGroupCount(UnitGroupFilter("Hydralisk", c_playerAny, gv_gameData.lv_playerEvilHordeGroup[3], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), c_unitCountAlive) + 0)));
    UnitGroupAddUnitGroup(gv_gameData.lv_playerEvilHordeGroup[3], UnitCargoLastCreatedGroup());
    UnitGroupAddUnitGroup(lv_group, UnitCargoLastCreatedGroup());
    UnitCargoCreate(gv_gameData.lv_nydusAsta, "Roach", (20 - (UnitGroupCount(UnitGroupFilter("Roach", c_playerAny, gv_gameData.lv_playerEvilHordeGroup[3], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), c_unitCountAlive) + 0)));
    UnitGroupAddUnitGroup(gv_gameData.lv_playerEvilHordeGroup[3], UnitCargoLastCreatedGroup());
    UnitGroupAddUnitGroup(lv_group, UnitCargoLastCreatedGroup());
    autoA00CEFE6_g = lv_group;
    autoA00CEFE6_u = UnitGroupCount(autoA00CEFE6_g, c_unitCountAll);
    for (;; autoA00CEFE6_u -= 1) {
        autoA00CEFE6_var = UnitGroupUnitFromEnd(autoA00CEFE6_g, autoA00CEFE6_u);
        if (autoA00CEFE6_var == null) { break; }
        if ((UnitGetOwner(autoA00CEFE6_var) != lv_player)) {
            UnitGroupAdd(gv_gameData.lv_claimedTroops[UnitGetOwner(autoA00CEFE6_var)], autoA00CEFE6_var);
        }
        else {
            UnitSetTeamColorIndex(autoA00CEFE6_var, 5);
        }
        UnitSetCustomValue(autoA00CEFE6_var, 63, lv_player);
        UnitSetCustomValue(autoA00CEFE6_var, 62, gf_GetRoleNumber("0009"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PopulateNyduses_Init () {
    gt_PopulateNyduses = TriggerCreate("gt_PopulateNyduses_Func");
    TriggerAddEventTimePeriodic(gt_PopulateNyduses, 2.0, c_timeReal);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SetNydusVar (Devil)
//--------------------------------------------------------------------------------------------------
bool gt_SetNydusVarDevil_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_devil;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_devil = gv_gameData.lv_rolesOwners[gv_syn.lv_roleDevil];

    // Actions
    if (!runActions) {
        return true;
    }

    UnitKill(gv_gameData.lv_nydusSatan);
    gv_gameData.lv_nydusSatan = EventUnitCreatedUnit();
    UnitSetCustomValue(EventUnitCreatedUnit(), 63, lv_devil);
    UnitSetCustomValue(EventUnitCreatedUnit(), 62, gf_GetRoleNumber("0007"));
    if ((UnitGetOwner(gv_gameData.lv_nydusSatan) != lv_devil)) {
        UnitGroupAdd(gv_gameData.lv_claimedTroops[UnitGetOwner(gv_gameData.lv_nydusSatan)], gv_gameData.lv_nydusSatan);
    }
    else {
        UnitSetTeamColorIndex(EventUnitCreatedUnit(), 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SetNydusVarDevil_Init () {
    gt_SetNydusVarDevil = TriggerCreate("gt_SetNydusVarDevil_Func");
    TriggerAddEventUnitCreated(gt_SetNydusVarDevil, UnitRefFromUnit(UnitFromId(784)), null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SetNydusVar (Asmo)
//--------------------------------------------------------------------------------------------------
bool gt_SetNydusVarAsmo_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_asmodeus;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_asmodeus = gv_gameData.lv_rolesOwners[gv_syn.lv_roleAsmodeus];

    // Actions
    if (!runActions) {
        return true;
    }

    UnitKill(gv_gameData.lv_nydusAsmo);
    gv_gameData.lv_nydusAsmo = EventUnitCreatedUnit();
    UnitSetCustomValue(EventUnitCreatedUnit(), 63, lv_asmodeus);
    UnitSetCustomValue(EventUnitCreatedUnit(), 62, gf_GetRoleNumber("0008"));
    if ((UnitGetOwner(gv_gameData.lv_nydusAsmo) != lv_asmodeus)) {
        UnitGroupAdd(gv_gameData.lv_claimedTroops[UnitGetOwner(gv_gameData.lv_nydusAsmo)], gv_gameData.lv_nydusAsmo);
    }
    else {
        UnitSetTeamColorIndex(EventUnitCreatedUnit(), 6);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SetNydusVarAsmo_Init () {
    gt_SetNydusVarAsmo = TriggerCreate("gt_SetNydusVarAsmo_Func");
    TriggerAddEventUnitCreated(gt_SetNydusVarAsmo, UnitRefFromUnit(UnitFromId(709)), null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SetNydusVar (Asta)
//--------------------------------------------------------------------------------------------------
bool gt_SetNydusVarAsta_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_astaroth;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_astaroth = gv_gameData.lv_rolesOwners[gv_syn.lv_roleAstaroth];

    // Actions
    if (!runActions) {
        return true;
    }

    UnitKill(gv_gameData.lv_nydusAsta);
    gv_gameData.lv_nydusAsta = EventUnitCreatedUnit();
    UnitSetCustomValue(EventUnitCreatedUnit(), 63, lv_astaroth);
    UnitSetCustomValue(EventUnitCreatedUnit(), 62, gf_GetRoleNumber("0009"));
    if ((UnitGetOwner(gv_gameData.lv_nydusAsta) != lv_astaroth)) {
        UnitGroupAdd(gv_gameData.lv_claimedTroops[UnitGetOwner(gv_gameData.lv_nydusAsta)], gv_gameData.lv_nydusAsta);
    }
    else {
        UnitSetTeamColorIndex(EventUnitCreatedUnit(), 5);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SetNydusVarAsta_Init () {
    gt_SetNydusVarAsta = TriggerCreate("gt_SetNydusVarAsta_Func");
    TriggerAddEventUnitCreated(gt_SetNydusVarAsta, UnitRefFromUnit(UnitFromId(785)), null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init Nydus Rally
//--------------------------------------------------------------------------------------------------
bool gt_InitNydusRally_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(UnitFromId(648), OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromId(791)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(629), OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromId(789)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(670), OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromId(790)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitNydusRally_Init () {
    gt_InitNydusRally = TriggerCreate("gt_InitNydusRally_Func");
    TriggerEnable(gt_InitNydusRally, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: NydusAutoCast
//--------------------------------------------------------------------------------------------------
bool gt_NydusAutoCast_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((OrderSetAutoCast(AbilityCommand("AutoUnloadAll", 0), true) != EventUnitOrder()))) {
            return false;
        }

        if (!((OrderSetAutoCast(AbilityCommand("AutoUnloadAll", 0), false) != EventUnitOrder()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(EventUnit(), OrderSetAutoCast(OrderGetAbilityCommand(EventUnitOrder()), true), c_orderQueueAddToFront);
    if ((EventUnit() == gv_gameData.lv_nydusSatan)) {
        gv_tutorialData[0].lv_unleashedMinions = true;
    }

    if ((EventUnit() == gv_gameData.lv_nydusAsmo)) {
        gv_tutorialData[1].lv_unleashedMinions = true;
    }

    if ((EventUnit() == gv_gameData.lv_nydusAsta)) {
        gv_tutorialData[2].lv_unleashedMinions = true;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NydusAutoCast_Init () {
    gt_NydusAutoCast = TriggerCreate("gt_NydusAutoCast_Func");
    TriggerAddEventUnitOrder(gt_NydusAutoCast, null, AbilityCommand("AutoUnloadAll", 0));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Send to Heal
//--------------------------------------------------------------------------------------------------
bool gt_SendtoHeal_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_destination;

    // Automatic Variable Declarations
    unitgroup auto863BE5B2_g;
    int auto863BE5B2_u;
    unit auto863BE5B2_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gf_IsPlayerGood(UnitGetOwner(EventUnit())) == false)) {
        if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), RegionGetCenter(RegionFromId(28))) <= DistanceBetweenPoints(UnitGetPosition(EventUnit()), RegionGetCenter(RegionFromId(27)))) && (DistanceBetweenPoints(UnitGetPosition(EventUnit()), RegionGetCenter(RegionFromId(28))) <= DistanceBetweenPoints(UnitGetPosition(EventUnit()), RegionGetCenter(RegionFromId(29)))) && (gv_gameData.lv_healDev == true)) {
            lv_destination = RegionGetCenter(RegionFromId(28));
        }
        else {
            if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), RegionGetCenter(RegionFromId(27))) <= DistanceBetweenPoints(UnitGetPosition(EventUnit()), RegionGetCenter(RegionFromId(29)))) && (DistanceBetweenPoints(UnitGetPosition(EventUnit()), RegionGetCenter(RegionFromId(27))) <= DistanceBetweenPoints(UnitGetPosition(EventUnit()), RegionGetCenter(RegionFromId(28)))) && (gv_gameData.lv_healAsmo == true)) {
                lv_destination = RegionGetCenter(RegionFromId(27));
            }
            else {
                if ((gv_gameData.lv_healAsta == true)) {
                    lv_destination = RegionGetCenter(RegionFromId(29));
                }
                else {
                    if ((gv_gameData.lv_healAsmo == true)) {
                        lv_destination = RegionGetCenter(RegionFromId(27));
                    }
                    else {
                        if ((gv_gameData.lv_healDev == true)) {
                            lv_destination = RegionGetCenter(RegionFromId(28));
                        }
                        else {
                            GameUserDisplayMessage(EventGameUser(), c_messageAreaSubtitle, StringExternal("Param/Value/111C08B9"));
                            lv_destination = null;
                        }
                    }
                }
            }
        }
        UnitGroupIssueOrder(UnitGroupSelected(UnitGetOwner(EventUnit())), OrderTargetingPoint(null, lv_destination), c_orderQueueReplace);
    }
    else {
        auto863BE5B2_g = UnitGroupSelected(EventPlayer());
        auto863BE5B2_u = UnitGroupCount(auto863BE5B2_g, c_unitCountAll);
        for (;; auto863BE5B2_u -= 1) {
            auto863BE5B2_var = UnitGroupUnitFromEnd(auto863BE5B2_g, auto863BE5B2_u);
            if (auto863BE5B2_var == null) { break; }
            if ((UnitTypeTestAttribute(UnitGetType(auto863BE5B2_var), c_unitAttributeHeroic) == true)) {
                if ((DistanceBetweenPoints(UnitGetPosition(auto863BE5B2_var), RegionGetCenter(RegionFromId(16))) <= DistanceBetweenPoints(UnitGetPosition(auto863BE5B2_var), RegionGetCenter(RegionFromId(17)))) && (DistanceBetweenPoints(UnitGetPosition(auto863BE5B2_var), RegionGetCenter(RegionFromId(16))) <= DistanceBetweenPoints(UnitGetPosition(auto863BE5B2_var), RegionGetCenter(RegionFromId(18)))) && (DistanceBetweenPoints(UnitGetPosition(auto863BE5B2_var), RegionGetCenter(RegionFromId(16))) <= DistanceBetweenPoints(UnitGetPosition(auto863BE5B2_var), RegionGetCenter(RegionFromId(19))))) {
                    lv_destination = RegionGetCenter(RegionFromId(16));
                }
                else {
                    if ((DistanceBetweenPoints(UnitGetPosition(auto863BE5B2_var), RegionGetCenter(RegionFromId(17))) <= DistanceBetweenPoints(UnitGetPosition(auto863BE5B2_var), RegionGetCenter(RegionFromId(18)))) && (DistanceBetweenPoints(UnitGetPosition(auto863BE5B2_var), RegionGetCenter(RegionFromId(17))) <= DistanceBetweenPoints(UnitGetPosition(auto863BE5B2_var), RegionGetCenter(RegionFromId(19))))) {
                        lv_destination = RegionGetCenter(RegionFromId(17));
                    }
                    else {
                        if (((DistanceBetweenPoints(UnitGetPosition(auto863BE5B2_var), RegionGetCenter(RegionFromId(18))) <= DistanceBetweenPoints(UnitGetPosition(auto863BE5B2_var), RegionGetCenter(RegionFromId(19)))))) {
                            lv_destination = RegionGetCenter(RegionFromId(18));
                        }
                        else {
                            lv_destination = RegionGetCenter(RegionFromId(19));
                        }
                    }
                }
            }
            else {
                if ((UnitFilterMatch(auto863BE5B2_var, UnitGetOwner(auto863BE5B2_var), UnitFilter((1 << c_targetFilterMechanical), 0, (1 << c_targetFilterBiological) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32)))) == true)) {
                    lv_destination = RegionGetCenter(RegionFromId(20));
                }
                else {
                    if ((UnitFilterMatch(auto863BE5B2_var, UnitGetOwner(auto863BE5B2_var), UnitFilter((1 << c_targetFilterBiological), 0, (1 << c_targetFilterMechanical) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32)))) == true)) {
                        lv_destination = RegionGetCenter(RegionFromId(21));
                    }
                    else {
                        if ((DistanceBetweenPoints(UnitGetPosition(auto863BE5B2_var), RegionGetCenter(RegionFromId(20))) <= DistanceBetweenPoints(UnitGetPosition(auto863BE5B2_var), RegionGetCenter(RegionFromId(21))))) {
                            lv_destination = RegionGetCenter(RegionFromId(20));
                        }
                        else {
                            lv_destination = RegionGetCenter(RegionFromId(21));
                        }
                    }
                }
            }
            UnitIssueOrder(auto863BE5B2_var, OrderTargetingPoint(null, lv_destination), c_orderQueueReplace);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SendtoHeal_Init () {
    gt_SendtoHeal = TriggerCreate("gt_SendtoHeal_Func");
    TriggerAddEventUnitAbility(gt_SendtoHeal, null, AbilityCommand("Stimpack2", 255), c_unitAbilStageExecute, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: HealGood Periodic
//--------------------------------------------------------------------------------------------------
bool gt_HealGoodPeriodic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoDE45D194_g;
    int autoDE45D194_u;
    unit autoDE45D194_var;

    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(UnitFromId(200)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoDE45D194_g = UnitGroup(null, c_playerAny, RegionFromId(16), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoDE45D194_u = UnitGroupCount(autoDE45D194_g, c_unitCountAll);
    for (;; autoDE45D194_u -= 1) {
        autoDE45D194_var = UnitGroupUnitFromEnd(autoDE45D194_g, autoDE45D194_u);
        if (autoDE45D194_var == null) { break; }
        if ((gf_IsPlayerGood(UnitGetOwner(autoDE45D194_var)) == true) && (UnitHasBehavior(autoDE45D194_var, "HealBeacon") == false) && (UnitTypeTestFlag(UnitGetType(autoDE45D194_var), c_unitFlagHero) == true) && ((UnitGetPropertyFixed(autoDE45D194_var, c_unitPropLifePercent, c_unitPropCurrent) < 100.0) || (UnitGetPropertyFixed(autoDE45D194_var, c_unitPropShieldsPercent, c_unitPropCurrent) < 100.0) || (UnitGetPropertyFixed(autoDE45D194_var, c_unitPropEnergyPercent, c_unitPropCurrent) < 100.0))) {
            UnitBehaviorRemove(autoDE45D194_var, "InfernalPoison", 10);
            UnitBehaviorRemove(autoDE45D194_var, "DefilerMPPlague2", 10);
            UnitSetPropertyFixed(autoDE45D194_var, c_unitPropLifePercent, 100.0);
            UnitBehaviorAdd(autoDE45D194_var, "HealBeacon", UnitFromId(22), 1);
            UnitSetPropertyFixed(autoDE45D194_var, c_unitPropShieldsPercent, 100.0);
            UnitSetPropertyFixed(autoDE45D194_var, c_unitPropEnergyPercent, 100.0);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HealGoodPeriodic_Init () {
    gt_HealGoodPeriodic = TriggerCreate("gt_HealGoodPeriodic_Func");
    TriggerAddEventTimePeriodic(gt_HealGoodPeriodic, 2.0, c_timeReal);
}

//--------------------------------------------------------------------------------------------------
// Trigger: HealGood Periodic 2
//--------------------------------------------------------------------------------------------------
bool gt_HealGoodPeriodic2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto342C3154_g;
    int auto342C3154_u;
    unit auto342C3154_var;

    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(UnitFromId(45)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto342C3154_g = UnitGroup(null, c_playerAny, RegionFromId(17), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto342C3154_u = UnitGroupCount(auto342C3154_g, c_unitCountAll);
    for (;; auto342C3154_u -= 1) {
        auto342C3154_var = UnitGroupUnitFromEnd(auto342C3154_g, auto342C3154_u);
        if (auto342C3154_var == null) { break; }
        if ((gf_IsPlayerGood(UnitGetOwner(auto342C3154_var)) == true) && (UnitHasBehavior(auto342C3154_var, "HealBeacon") == false) && (UnitTypeTestFlag(UnitGetType(auto342C3154_var), c_unitFlagHero) == true) && ((UnitGetPropertyFixed(auto342C3154_var, c_unitPropLifePercent, c_unitPropCurrent) < 100.0) || (UnitGetPropertyFixed(auto342C3154_var, c_unitPropShieldsPercent, c_unitPropCurrent) < 100.0) || (UnitGetPropertyFixed(auto342C3154_var, c_unitPropEnergyPercent, c_unitPropCurrent) < 100.0))) {
            UnitBehaviorRemove(auto342C3154_var, "InfernalPoison", 10);
            UnitBehaviorRemove(auto342C3154_var, "DefilerMPPlague2", 10);
            UnitSetPropertyFixed(auto342C3154_var, c_unitPropLifePercent, 100.0);
            UnitBehaviorAdd(auto342C3154_var, "HealBeacon", UnitFromId(22), 1);
            UnitSetPropertyFixed(auto342C3154_var, c_unitPropShieldsPercent, 100.0);
            UnitSetPropertyFixed(auto342C3154_var, c_unitPropEnergyPercent, 100.0);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HealGoodPeriodic2_Init () {
    gt_HealGoodPeriodic2 = TriggerCreate("gt_HealGoodPeriodic2_Func");
    TriggerAddEventTimePeriodic(gt_HealGoodPeriodic2, 2.0, c_timeReal);
}

//--------------------------------------------------------------------------------------------------
// Trigger: HealGood Periodic 2 2
//--------------------------------------------------------------------------------------------------
bool gt_HealGoodPeriodic22_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto93E3937A_g;
    int auto93E3937A_u;
    unit auto93E3937A_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto93E3937A_g = UnitGroup(null, c_playerAny, RegionFromId(18), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto93E3937A_u = UnitGroupCount(auto93E3937A_g, c_unitCountAll);
    for (;; auto93E3937A_u -= 1) {
        auto93E3937A_var = UnitGroupUnitFromEnd(auto93E3937A_g, auto93E3937A_u);
        if (auto93E3937A_var == null) { break; }
        if ((gf_IsPlayerGood(UnitGetOwner(auto93E3937A_var)) == true) && (UnitHasBehavior(auto93E3937A_var, "HealBeacon") == false) && (UnitTypeTestFlag(UnitGetType(auto93E3937A_var), c_unitFlagHero) == true) && ((UnitGetPropertyFixed(auto93E3937A_var, c_unitPropLifePercent, c_unitPropCurrent) < 100.0) || (UnitGetPropertyFixed(auto93E3937A_var, c_unitPropShieldsPercent, c_unitPropCurrent) < 100.0) || (UnitGetPropertyFixed(auto93E3937A_var, c_unitPropEnergyPercent, c_unitPropCurrent) < 100.0))) {
            UnitBehaviorRemove(auto93E3937A_var, "InfernalPoison", 10);
            UnitBehaviorRemove(auto93E3937A_var, "DefilerMPPlague2", 10);
            UnitSetPropertyFixed(auto93E3937A_var, c_unitPropLifePercent, 100.0);
            UnitBehaviorAdd(auto93E3937A_var, "HealBeacon", UnitFromId(22), 1);
            UnitSetPropertyFixed(auto93E3937A_var, c_unitPropShieldsPercent, 100.0);
            UnitSetPropertyFixed(auto93E3937A_var, c_unitPropEnergyPercent, 100.0);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HealGoodPeriodic22_Init () {
    gt_HealGoodPeriodic22 = TriggerCreate("gt_HealGoodPeriodic22_Func");
    TriggerAddEventTimePeriodic(gt_HealGoodPeriodic22, 2.0, c_timeReal);
}

//--------------------------------------------------------------------------------------------------
// Trigger: HealGood Periodic 2 2 2
//--------------------------------------------------------------------------------------------------
bool gt_HealGoodPeriodic222_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto747F255D_g;
    int auto747F255D_u;
    unit auto747F255D_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto747F255D_g = UnitGroup(null, c_playerAny, RegionFromId(19), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto747F255D_u = UnitGroupCount(auto747F255D_g, c_unitCountAll);
    for (;; auto747F255D_u -= 1) {
        auto747F255D_var = UnitGroupUnitFromEnd(auto747F255D_g, auto747F255D_u);
        if (auto747F255D_var == null) { break; }
        if ((gf_IsPlayerGood(UnitGetOwner(auto747F255D_var)) == true) && (UnitHasBehavior(auto747F255D_var, "HealBeacon") == false) && (UnitTypeTestFlag(UnitGetType(auto747F255D_var), c_unitFlagHero) == true) && ((UnitGetPropertyFixed(auto747F255D_var, c_unitPropLifePercent, c_unitPropCurrent) < 100.0) || (UnitGetPropertyFixed(auto747F255D_var, c_unitPropShieldsPercent, c_unitPropCurrent) < 100.0) || (UnitGetPropertyFixed(auto747F255D_var, c_unitPropEnergyPercent, c_unitPropCurrent) < 100.0))) {
            UnitBehaviorRemove(auto747F255D_var, "InfernalPoison", 10);
            UnitBehaviorRemove(auto747F255D_var, "DefilerMPPlague2", 10);
            UnitSetPropertyFixed(auto747F255D_var, c_unitPropLifePercent, 100.0);
            UnitBehaviorAdd(auto747F255D_var, "HealBeacon", UnitFromId(22), 1);
            UnitSetPropertyFixed(auto747F255D_var, c_unitPropShieldsPercent, 100.0);
            UnitSetPropertyFixed(auto747F255D_var, c_unitPropEnergyPercent, 100.0);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HealGoodPeriodic222_Init () {
    gt_HealGoodPeriodic222 = TriggerCreate("gt_HealGoodPeriodic222_Func");
    TriggerAddEventTimePeriodic(gt_HealGoodPeriodic222, 2.0, c_timeReal);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Heal
//--------------------------------------------------------------------------------------------------
bool gt_HeroHeal_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagHero) == true))) {
            return false;
        }

        if (!((gf_IsPlayerGood(UnitGetOwner(EventUnit())) == true))) {
            return false;
        }

        if (!(((UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) < 100.0) || (UnitGetPropertyFixed(EventUnit(), c_unitPropShieldsPercent, c_unitPropCurrent) < 100.0) || (UnitGetPropertyFixed(EventUnit(), c_unitPropEnergyPercent, c_unitPropCurrent) < 100.0)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior(EventUnit(), "HealBeacon") == false)) {
        UnitSetPropertyFixed(EventUnit(), c_unitPropLifePercent, 100.0);
        UnitBehaviorAdd(EventUnit(), "HealBeacon", UnitFromId(22), 1);
        UnitSetPropertyFixed(EventUnit(), c_unitPropShieldsPercent, 100.0);
        UnitSetPropertyFixed(EventUnit(), c_unitPropEnergyPercent, 100.0);
        UnitBehaviorRemove(EventUnit(), "InfernalPoison", 10);
        UnitBehaviorRemove(EventUnit(), "DefilerMPPlague2", 10);
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/C8A214DE"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HeroHeal_Init () {
    gt_HeroHeal = TriggerCreate("gt_HeroHeal_Func");
    TriggerAddEventUnitRegion(gt_HeroHeal, null, RegionFromId(16), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Heal 2
//--------------------------------------------------------------------------------------------------
bool gt_HeroHeal2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagHero) == true))) {
            return false;
        }

        if (!((gf_IsPlayerGood(UnitGetOwner(EventUnit())) == true))) {
            return false;
        }

        if (!(((UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) < 100.0) || (UnitGetPropertyFixed(EventUnit(), c_unitPropShieldsPercent, c_unitPropCurrent) < 100.0) || (UnitGetPropertyFixed(EventUnit(), c_unitPropEnergyPercent, c_unitPropCurrent) < 100.0)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior(EventUnit(), "HealBeacon") == false)) {
        UnitSetPropertyFixed(EventUnit(), c_unitPropLifePercent, 100.0);
        UnitBehaviorAdd(EventUnit(), "HealBeacon", UnitFromId(22), 1);
        UnitSetPropertyFixed(EventUnit(), c_unitPropShieldsPercent, 100.0);
        UnitSetPropertyFixed(EventUnit(), c_unitPropEnergyPercent, 100.0);
        UnitBehaviorRemove(EventUnit(), "InfernalPoison", 10);
        UnitBehaviorRemove(EventUnit(), "DefilerMPPlague2", 10);
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/3275E859"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HeroHeal2_Init () {
    gt_HeroHeal2 = TriggerCreate("gt_HeroHeal2_Func");
    TriggerAddEventUnitRegion(gt_HeroHeal2, null, RegionFromId(17), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Heal 3
//--------------------------------------------------------------------------------------------------
bool gt_HeroHeal3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagHero) == true))) {
            return false;
        }

        if (!((gf_IsPlayerGood(UnitGetOwner(EventUnit())) == true))) {
            return false;
        }

        if (!(((UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) < 100.0) || (UnitGetPropertyFixed(EventUnit(), c_unitPropShieldsPercent, c_unitPropCurrent) < 100.0) || (UnitGetPropertyFixed(EventUnit(), c_unitPropEnergyPercent, c_unitPropCurrent) < 100.0)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior(EventUnit(), "HealBeacon") == false)) {
        UnitSetPropertyFixed(EventUnit(), c_unitPropLifePercent, 100.0);
        UnitBehaviorAdd(EventUnit(), "HealBeacon", UnitFromId(22), 1);
        UnitSetPropertyFixed(EventUnit(), c_unitPropShieldsPercent, 100.0);
        UnitSetPropertyFixed(EventUnit(), c_unitPropEnergyPercent, 100.0);
        UnitBehaviorRemove(EventUnit(), "InfernalPoison", 10);
        UnitBehaviorRemove(EventUnit(), "DefilerMPPlague2", 10);
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/8AE94F56"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HeroHeal3_Init () {
    gt_HeroHeal3 = TriggerCreate("gt_HeroHeal3_Func");
    TriggerAddEventUnitRegion(gt_HeroHeal3, null, RegionFromId(18), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Heal 4
//--------------------------------------------------------------------------------------------------
bool gt_HeroHeal4_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gf_IsPlayerGood(UnitGetOwner(EventUnit())) == true))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagHero) == true))) {
            return false;
        }

        if (!(((UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) < 100.0) || (UnitGetPropertyFixed(EventUnit(), c_unitPropShieldsPercent, c_unitPropCurrent) < 100.0) || (UnitGetPropertyFixed(EventUnit(), c_unitPropEnergyPercent, c_unitPropCurrent) < 100.0)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior(EventUnit(), "HealBeacon") == false)) {
        UnitSetPropertyFixed(EventUnit(), c_unitPropLifePercent, 100.0);
        UnitBehaviorAdd(EventUnit(), "HealBeacon", UnitFromId(22), 1);
        UnitSetPropertyFixed(EventUnit(), c_unitPropShieldsPercent, 100.0);
        UnitSetPropertyFixed(EventUnit(), c_unitPropEnergyPercent, 100.0);
        UnitBehaviorRemove(EventUnit(), "InfernalPoison", 10);
        UnitBehaviorRemove(EventUnit(), "DefilerMPPlague2", 10);
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/3B75F38C"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HeroHeal4_Init () {
    gt_HeroHeal4 = TriggerCreate("gt_HeroHeal4_Func");
    TriggerAddEventUnitRegion(gt_HeroHeal4, null, RegionFromId(19), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Longer Heal CD?
//--------------------------------------------------------------------------------------------------
bool gt_LongerHealCD_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_timeScale;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_timeScale = 0.5712;

    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "Hunterling") || (UnitGetType(EventUnit()) == "Donatello") || (UnitGetType(EventUnit()) == "HunterlingLeaping")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorSetDurationRemaining(EventUnit(), "HealBeacon", (lv_timeScale * UnitBehaviorDuration(EventUnit(), "HealBeacon")));
    UnitBehaviorSetDurationRemaining(EventUnit(), "HealBeaconEvil", (lv_timeScale * UnitBehaviorDuration(EventUnit(), "HealBeaconEvil")));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LongerHealCD_Init () {
    gt_LongerHealCD = TriggerCreate("gt_LongerHealCD_Func");
    TriggerAddEventUnitBehaviorChange(gt_LongerHealCD, null, "HealBeacon", c_unitBehaviorChangeIncrease);
    TriggerAddEventUnitBehaviorChange(gt_LongerHealCD, null, "HealBeaconEvil", c_unitBehaviorChangeIncrease);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Heal Evil Periodic (Devil)
//--------------------------------------------------------------------------------------------------
bool gt_HealEvilPeriodicDevil_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto2645D867_g;
    int auto2645D867_u;
    unit auto2645D867_var;

    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(UnitFromId(784)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto2645D867_g = UnitGroup(null, c_playerAny, RegionFromId(28), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto2645D867_u = UnitGroupCount(auto2645D867_g, c_unitCountAll);
    for (;; auto2645D867_u -= 1) {
        auto2645D867_var = UnitGroupUnitFromEnd(auto2645D867_g, auto2645D867_u);
        if (auto2645D867_var == null) { break; }
        if ((gf_IsPlayerGood(UnitGetOwner(auto2645D867_var)) == false) && (UnitHasBehavior(auto2645D867_var, "HealBeacon") == false) && (UnitHasBehavior(auto2645D867_var, "HealBeaconEvil") == false) && ((UnitGetPropertyFixed(auto2645D867_var, c_unitPropLifePercent, c_unitPropCurrent) < 100.0) || (UnitGetPropertyFixed(auto2645D867_var, c_unitPropShieldsPercent, c_unitPropCurrent) < 100.0) || (UnitGetPropertyFixed(auto2645D867_var, c_unitPropEnergyPercent, c_unitPropCurrent) < 100.0))) {
            UnitSetPropertyFixed(auto2645D867_var, c_unitPropLifePercent, 100.0);
            UnitBehaviorAdd(auto2645D867_var, "HealBeaconEvil", UnitFromId(784), 1);
            UnitCreateEffectUnit(UnitFromId(784), "EvilHealBeamController", auto2645D867_var);
            UnitSetPropertyFixed(auto2645D867_var, c_unitPropShieldsPercent, 100.0);
            UnitSetPropertyFixed(auto2645D867_var, c_unitPropEnergyPercent, 100.0);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HealEvilPeriodicDevil_Init () {
    gt_HealEvilPeriodicDevil = TriggerCreate("gt_HealEvilPeriodicDevil_Func");
    TriggerAddEventTimePeriodic(gt_HealEvilPeriodicDevil, 2.0, c_timeReal);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Heal Evil Periodic (Asmo)
//--------------------------------------------------------------------------------------------------
bool gt_HealEvilPeriodicAsmo_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoB095FCDD_g;
    int autoB095FCDD_u;
    unit autoB095FCDD_var;

    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(UnitFromId(709)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoB095FCDD_g = UnitGroup(null, c_playerAny, RegionFromId(27), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoB095FCDD_u = UnitGroupCount(autoB095FCDD_g, c_unitCountAll);
    for (;; autoB095FCDD_u -= 1) {
        autoB095FCDD_var = UnitGroupUnitFromEnd(autoB095FCDD_g, autoB095FCDD_u);
        if (autoB095FCDD_var == null) { break; }
        if ((gf_IsPlayerGood(UnitGetOwner(autoB095FCDD_var)) == false) && (UnitHasBehavior(autoB095FCDD_var, "HealBeacon") == false) && (UnitHasBehavior(autoB095FCDD_var, "HealBeaconEvil") == false) && ((UnitGetPropertyFixed(autoB095FCDD_var, c_unitPropLifePercent, c_unitPropCurrent) < 100.0) || (UnitGetPropertyFixed(autoB095FCDD_var, c_unitPropShieldsPercent, c_unitPropCurrent) < 100.0) || (UnitGetPropertyFixed(autoB095FCDD_var, c_unitPropEnergyPercent, c_unitPropCurrent) < 100.0))) {
            UnitSetPropertyFixed(autoB095FCDD_var, c_unitPropLifePercent, 100.0);
            UnitBehaviorAdd(autoB095FCDD_var, "HealBeaconEvil", UnitFromId(709), 1);
            UnitCreateEffectUnit(UnitFromId(709), "EvilHealBeamController", autoB095FCDD_var);
            UnitSetPropertyFixed(autoB095FCDD_var, c_unitPropShieldsPercent, 100.0);
            UnitSetPropertyFixed(autoB095FCDD_var, c_unitPropEnergyPercent, 100.0);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HealEvilPeriodicAsmo_Init () {
    gt_HealEvilPeriodicAsmo = TriggerCreate("gt_HealEvilPeriodicAsmo_Func");
    TriggerAddEventTimePeriodic(gt_HealEvilPeriodicAsmo, 2.0, c_timeReal);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Heal Evil Periodic (Asta)
//--------------------------------------------------------------------------------------------------
bool gt_HealEvilPeriodicAsta_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto03F8212B_g;
    int auto03F8212B_u;
    unit auto03F8212B_var;

    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(UnitFromId(785)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto03F8212B_g = UnitGroup(null, c_playerAny, RegionFromId(29), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto03F8212B_u = UnitGroupCount(auto03F8212B_g, c_unitCountAll);
    for (;; auto03F8212B_u -= 1) {
        auto03F8212B_var = UnitGroupUnitFromEnd(auto03F8212B_g, auto03F8212B_u);
        if (auto03F8212B_var == null) { break; }
        if ((gf_IsPlayerGood(UnitGetOwner(auto03F8212B_var)) == false) && (UnitHasBehavior(auto03F8212B_var, "HealBeacon") == false) && (UnitHasBehavior(auto03F8212B_var, "HealBeaconEvil") == false) && ((UnitGetPropertyFixed(auto03F8212B_var, c_unitPropLifePercent, c_unitPropCurrent) < 100.0) || (UnitGetPropertyFixed(auto03F8212B_var, c_unitPropShieldsPercent, c_unitPropCurrent) < 100.0) || (UnitGetPropertyFixed(auto03F8212B_var, c_unitPropEnergyPercent, c_unitPropCurrent) < 100.0))) {
            UnitSetPropertyFixed(auto03F8212B_var, c_unitPropLifePercent, 100.0);
            UnitBehaviorAdd(auto03F8212B_var, "HealBeaconEvil", UnitFromId(785), 1);
            UnitCreateEffectUnit(UnitFromId(785), "EvilHealBeamController", auto03F8212B_var);
            UnitSetPropertyFixed(auto03F8212B_var, c_unitPropShieldsPercent, 100.0);
            UnitSetPropertyFixed(auto03F8212B_var, c_unitPropEnergyPercent, 100.0);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HealEvilPeriodicAsta_Init () {
    gt_HealEvilPeriodicAsta = TriggerCreate("gt_HealEvilPeriodicAsta_Func");
    TriggerAddEventTimePeriodic(gt_HealEvilPeriodicAsta, 2.0, c_timeReal);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Heal Evil (Devil)
//--------------------------------------------------------------------------------------------------
bool gt_HealEvilDevil_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gf_IsPlayerGood(UnitGetOwner(EventUnit())) == false))) {
            return false;
        }

        if (!((UnitIsAlive(UnitFromId(784)) == true))) {
            return false;
        }

        if (!(((UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) < 100.0) || (UnitGetPropertyFixed(EventUnit(), c_unitPropShieldsPercent, c_unitPropCurrent) < 100.0) || (UnitGetPropertyFixed(EventUnit(), c_unitPropEnergyPercent, c_unitPropCurrent) < 100.0)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior(EventUnit(), "HealBeacon") == false) && (UnitHasBehavior(EventUnit(), "HealBeaconEvil") == false)) {
        UnitSetPropertyFixed(EventUnit(), c_unitPropLifePercent, 100.0);
        UnitBehaviorAdd(EventUnit(), "HealBeaconEvil", UnitFromId(784), 1);
        UnitCreateEffectUnit(UnitFromId(784), "EvilHealBeamController", EventUnit());
        UnitSetPropertyFixed(EventUnit(), c_unitPropShieldsPercent, 100.0);
        UnitSetPropertyFixed(EventUnit(), c_unitPropEnergyPercent, 100.0);
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/D60480E0"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HealEvilDevil_Init () {
    gt_HealEvilDevil = TriggerCreate("gt_HealEvilDevil_Func");
    TriggerAddEventUnitRegion(gt_HealEvilDevil, null, RegionFromId(28), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Heal Evil (Asmo)
//--------------------------------------------------------------------------------------------------
bool gt_HealEvilAsmo_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gf_IsPlayerGood(UnitGetOwner(EventUnit())) == false))) {
            return false;
        }

        if (!((UnitIsAlive(UnitFromId(709)) == true))) {
            return false;
        }

        if (!(((UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) < 100.0) || (UnitGetPropertyFixed(EventUnit(), c_unitPropShieldsPercent, c_unitPropCurrent) < 100.0) || (UnitGetPropertyFixed(EventUnit(), c_unitPropEnergyPercent, c_unitPropCurrent) < 100.0)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior(EventUnit(), "HealBeacon") == false) && (UnitHasBehavior(EventUnit(), "HealBeaconEvil") == false)) {
        UnitSetPropertyFixed(EventUnit(), c_unitPropLifePercent, 100.0);
        UnitBehaviorAdd(EventUnit(), "HealBeaconEvil", UnitFromId(709), 1);
        UnitCreateEffectUnit(UnitFromId(709), "EvilHealBeamController", EventUnit());
        UnitSetPropertyFixed(EventUnit(), c_unitPropShieldsPercent, 100.0);
        UnitSetPropertyFixed(EventUnit(), c_unitPropEnergyPercent, 100.0);
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/69FF0D72"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HealEvilAsmo_Init () {
    gt_HealEvilAsmo = TriggerCreate("gt_HealEvilAsmo_Func");
    TriggerAddEventUnitRegion(gt_HealEvilAsmo, null, RegionFromId(27), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Heal Evil (Asta)
//--------------------------------------------------------------------------------------------------
bool gt_HealEvilAsta_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gf_IsPlayerGood(UnitGetOwner(EventUnit())) == false))) {
            return false;
        }

        if (!((UnitIsAlive(UnitFromId(785)) == true))) {
            return false;
        }

        if (!(((UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) < 100.0) || (UnitGetPropertyFixed(EventUnit(), c_unitPropShieldsPercent, c_unitPropCurrent) < 100.0) || (UnitGetPropertyFixed(EventUnit(), c_unitPropEnergyPercent, c_unitPropCurrent) < 100.0)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior(EventUnit(), "HealBeacon") == false) && (UnitHasBehavior(EventUnit(), "HealBeaconEvil") == false)) {
        UnitSetPropertyFixed(EventUnit(), c_unitPropLifePercent, 100.0);
        UnitBehaviorAdd(EventUnit(), "HealBeaconEvil", UnitFromId(785), 1);
        UnitCreateEffectUnit(UnitFromId(785), "EvilHealBeamController", EventUnit());
        UnitSetPropertyFixed(EventUnit(), c_unitPropShieldsPercent, 100.0);
        UnitSetPropertyFixed(EventUnit(), c_unitPropEnergyPercent, 100.0);
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/EA620235"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HealEvilAsta_Init () {
    gt_HealEvilAsta = TriggerCreate("gt_HealEvilAsta_Func");
    TriggerAddEventUnitRegion(gt_HealEvilAsta, null, RegionFromId(29), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Heal Organic
//--------------------------------------------------------------------------------------------------
bool gt_HealOrganic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_tempunit;
    unitgroup lv_healcandidates;
    unit lv_healee;

    // Automatic Variable Declarations
    unitgroup auto1FC39C38_g;
    int auto1FC39C38_u;

    // Variable Initialization
    lv_healcandidates = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_healcandidates = UnitGroupAlliance(UnitGetOwner(UnitFromId(22)), c_unitAllianceAlly, RegionFromId(21), UnitFilter((1 << c_targetFilterBiological), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto1FC39C38_g = lv_healcandidates;
    auto1FC39C38_u = UnitGroupCount(auto1FC39C38_g, c_unitCountAll);
    for (;; auto1FC39C38_u -= 1) {
        lv_tempunit = UnitGroupUnitFromEnd(auto1FC39C38_g, auto1FC39C38_u);
        if (lv_tempunit == null) { break; }
        if ((UnitGetPropertyFixed(lv_tempunit, c_unitPropLifePercent, c_unitPropCurrent) >= 100.0)) {
            UnitGroupRemove(lv_healcandidates, lv_tempunit);
        }

    }
    lv_healee = UnitGroupRandomUnit(lv_healcandidates, c_unitCountAlive);
    if ((lv_healee != null)) {
        UnitBehaviorAddPlayer(lv_healee, "CommonHealVisual", UnitGetOwner(lv_healee), 1);
        UnitSetPropertyFixed(lv_healee, c_unitPropLife, (UnitGetPropertyFixed(lv_healee, c_unitPropLife, c_unitPropCurrent) + 70.0));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HealOrganic_Init () {
    gt_HealOrganic = TriggerCreate("gt_HealOrganic_Func");
    TriggerAddEventTimePeriodic(gt_HealOrganic, 0.35, c_timeReal);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Heal Mechanic
//--------------------------------------------------------------------------------------------------
bool gt_HealMechanic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_tempunit;
    unitgroup lv_healcandidates;
    unit lv_healee;

    // Automatic Variable Declarations
    unitgroup auto2649BF0E_g;
    int auto2649BF0E_u;

    // Variable Initialization
    lv_healcandidates = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_healcandidates = UnitGroupAlliance(UnitGetOwner(UnitFromId(22)), c_unitAllianceAlly, RegionFromId(20), UnitFilter((1 << c_targetFilterMechanical), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto2649BF0E_g = lv_healcandidates;
    auto2649BF0E_u = UnitGroupCount(auto2649BF0E_g, c_unitCountAll);
    for (;; auto2649BF0E_u -= 1) {
        lv_tempunit = UnitGroupUnitFromEnd(auto2649BF0E_g, auto2649BF0E_u);
        if (lv_tempunit == null) { break; }
        if ((UnitGetPropertyFixed(lv_tempunit, c_unitPropLifePercent, c_unitPropCurrent) >= 100.0)) {
            UnitGroupRemove(lv_healcandidates, lv_tempunit);
        }

    }
    lv_healee = UnitGroupRandomUnit(lv_healcandidates, c_unitCountAlive);
    if ((lv_healee != null)) {
        UnitBehaviorAddPlayer(lv_healee, "CommonHealVisual", UnitGetOwner(lv_healee), 1);
        UnitSetPropertyFixed(lv_healee, c_unitPropLife, (UnitGetPropertyFixed(lv_healee, c_unitPropLife, c_unitPropCurrent) + 50.0));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HealMechanic_Init () {
    gt_HealMechanic = TriggerCreate("gt_HealMechanic_Func");
    TriggerAddEventTimePeriodic(gt_HealMechanic, 0.35, c_timeReal);
}

//--------------------------------------------------------------------------------------------------
// Trigger: -Untake All TEXT COMMAND
//--------------------------------------------------------------------------------------------------
bool gt_UntakeAllTEXTCOMMAND_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto92F0350B_g;
    int auto92F0350B_u;
    unit auto92F0350B_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto92F0350B_g = gv_gameData.lv_claimedTroops[EventPlayer()];
    auto92F0350B_u = UnitGroupCount(auto92F0350B_g, c_unitCountAll);
    for (;; auto92F0350B_u -= 1) {
        auto92F0350B_var = UnitGroupUnitFromEnd(auto92F0350B_g, auto92F0350B_u);
        if (auto92F0350B_var == null) { break; }
        gf_TakeUntakeGiveAftermathStatTracking(EventPlayer(), FixedToInt(UnitGetCustomValue(auto92F0350B_var, gv_syn.lv_unitCustomValueOriginalPlayer)), auto92F0350B_var);
        libNtve_gf_RescueUnit(auto92F0350B_var, FixedToInt(UnitGetCustomValue(auto92F0350B_var, gv_syn.lv_unitCustomValueOriginalPlayer)), true);
        UnitSetTeamColorIndex(auto92F0350B_var, gf_ColorID_To_Color(FixedToInt(UnitGetCustomValue(auto92F0350B_var, gv_syn.lv_unitCustomValueOriginalRole))));
        UnitGroupRemove(gv_gameData.lv_claimedTroops[EventPlayer()], auto92F0350B_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UntakeAllTEXTCOMMAND_Init () {
    gt_UntakeAllTEXTCOMMAND = TriggerCreate("gt_UntakeAllTEXTCOMMAND_Func");
    TriggerAddEventChatMessage(gt_UntakeAllTEXTCOMMAND, c_playerAny, "-Untake All", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: -Untake TEXT COMMAND
//--------------------------------------------------------------------------------------------------
bool gt_UntakeTEXTCOMMAND_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto04436BF9_g;
    int auto04436BF9_u;
    unit auto04436BF9_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto04436BF9_g = UnitGroupSelected(EventPlayer());
    auto04436BF9_u = UnitGroupCount(auto04436BF9_g, c_unitCountAll);
    for (;; auto04436BF9_u -= 1) {
        auto04436BF9_var = UnitGroupUnitFromEnd(auto04436BF9_g, auto04436BF9_u);
        if (auto04436BF9_var == null) { break; }
        if ((UnitGroupHasUnit(gv_gameData.lv_claimedTroops[EventPlayer()], auto04436BF9_var) == true)) {
            gf_TakeUntakeGiveAftermathStatTracking(EventPlayer(), FixedToInt(UnitGetCustomValue(auto04436BF9_var, gv_syn.lv_unitCustomValueOriginalPlayer)), auto04436BF9_var);
            libNtve_gf_RescueUnit(auto04436BF9_var, FixedToInt(UnitGetCustomValue(auto04436BF9_var, gv_syn.lv_unitCustomValueOriginalPlayer)), true);
            UnitSetTeamColorIndex(auto04436BF9_var, gf_ColorID_To_Color(FixedToInt(UnitGetCustomValue(auto04436BF9_var, gv_syn.lv_unitCustomValueOriginalRole))));
            UnitGroupRemove(gv_gameData.lv_claimedTroops[EventPlayer()], auto04436BF9_var);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UntakeTEXTCOMMAND_Init () {
    gt_UntakeTEXTCOMMAND = TriggerCreate("gt_UntakeTEXTCOMMAND_Func");
    TriggerAddEventChatMessage(gt_UntakeTEXTCOMMAND, c_playerAny, "-Untake", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: -TakeTEXT COMMAND
//--------------------------------------------------------------------------------------------------
bool gt_TakeTEXTCOMMAND_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_hasVeteran;

    // Automatic Variable Declarations
    playergroup autoFB9CFEC7_g;
    int autoFB9CFEC7_var;
    playergroup auto0FE95D36_g;
    int auto0FE95D36_var;
    unitgroup auto27694A8B_g;
    int auto27694A8B_u;
    unit auto27694A8B_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_playerData[EventPlayer()].lv_totalGames < 10)) {
        if ((PlayerGroupHasPlayer(gv_gameData.lv_playerGroupHeaven, EventPlayer()) == true)) {
            autoFB9CFEC7_g = gv_gameData.lv_playerGroupHeaven;
            autoFB9CFEC7_var = -1;
            while (true) {
                autoFB9CFEC7_var = PlayerGroupNextPlayer(autoFB9CFEC7_g, autoFB9CFEC7_var);
                if (autoFB9CFEC7_var < 0) { break; }
                if ((gv_playerData[autoFB9CFEC7_var].lv_totalGames >= 10)) {
                    lv_hasVeteran = true;
                }

            }
        }

        if ((PlayerGroupHasPlayer(gv_gameData.lv_playerGroupHell, EventPlayer()) == true)) {
            auto0FE95D36_g = gv_gameData.lv_playerGroupHell;
            auto0FE95D36_var = -1;
            while (true) {
                auto0FE95D36_var = PlayerGroupNextPlayer(auto0FE95D36_g, auto0FE95D36_var);
                if (auto0FE95D36_var < 0) { break; }
                if ((gv_playerData[auto0FE95D36_var].lv_totalGames >= 10)) {
                    lv_hasVeteran = true;
                }

            }
        }

        if ((lv_hasVeteran == true)) {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/E08A1884"));
            return true;
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/F3A33938"));
        }
    }

    auto27694A8B_g = UnitGroupSelected(EventPlayer());
    auto27694A8B_u = UnitGroupCount(auto27694A8B_g, c_unitCountAll);
    for (;; auto27694A8B_u -= 1) {
        auto27694A8B_var = UnitGroupUnitFromEnd(auto27694A8B_g, auto27694A8B_u);
        if (auto27694A8B_var == null) { break; }
        if ((PlayerGetAlliance(UnitGetOwner(auto27694A8B_var), c_allianceIdPassive, EventPlayer()) == true) && ((PlayerStatus(UnitGetOwner(auto27694A8B_var)) == c_playerStatusUnused) || (PlayerStatus(UnitGetOwner(auto27694A8B_var)) == c_playerStatusLeft)) && (UnitGetType(auto27694A8B_var) != "RoboticsBay") && (UnitGetType(auto27694A8B_var) != "WarpGate") && (UnitGetType(auto27694A8B_var) != "Gateway") && (UnitGetType(auto27694A8B_var) != "Assimilator") && (UnitGetType(auto27694A8B_var) != "FleetBeacon")) {
            gf_TakeUntakeGiveAftermathStatTracking(FixedToInt(UnitGetCustomValue(auto27694A8B_var, gv_syn.lv_unitCustomValueOriginalPlayer)), EventPlayer(), auto27694A8B_var);
            UnitSetCustomValue(auto27694A8B_var, gv_syn.lv_unitCustomValueOriginalPlayer, UnitGetOwner(auto27694A8B_var));
            libNtve_gf_RescueUnit(auto27694A8B_var, EventPlayer(), true);
            UnitGroupAdd(gv_gameData.lv_claimedTroops[EventPlayer()], auto27694A8B_var);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TakeTEXTCOMMAND_Init () {
    gt_TakeTEXTCOMMAND = TriggerCreate("gt_TakeTEXTCOMMAND_Func");
    TriggerAddEventChatMessage(gt_TakeTEXTCOMMAND, c_playerAny, "-Take", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Give Teal
//--------------------------------------------------------------------------------------------------
bool gt_GiveTeal_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    unitgroup autoC7DDA36D_g;
    int autoC7DDA36D_u;
    unit autoC7DDA36D_var;

    // Variable Initialization
    lv_player = gv_gameData.lv_rolesOwners[gv_syn.lv_roleMichael];

    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(gv_gameData.lv_playerGroupHeaven, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoC7DDA36D_g = UnitGroupSelected(EventPlayer());
    autoC7DDA36D_u = UnitGroupCount(autoC7DDA36D_g, c_unitCountAll);
    for (;; autoC7DDA36D_u -= 1) {
        autoC7DDA36D_var = UnitGroupUnitFromEnd(autoC7DDA36D_g, autoC7DDA36D_u);
        if (autoC7DDA36D_var == null) { break; }
        if ((UnitGetOwner(autoC7DDA36D_var) == EventPlayer())) {
            gf_TakeUntakeGiveAftermathStatTracking(EventPlayer(), lv_player, autoC7DDA36D_var);
            UnitSetOwner(autoC7DDA36D_var, lv_player, true);
            UnitControlGroupAddUnits(lv_player, 0, libNtve_gf_ConvertUnitToUnitGroup(autoC7DDA36D_var));
        }

    }
    UIDisplayMessage(PlayerGroupSingle(lv_player), c_messageAreaSubtitle, StringExternal("Param/Value/F9F05F4E"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GiveTeal_Init () {
    gt_GiveTeal = TriggerCreate("gt_GiveTeal_Func");
    TriggerAddEventChatMessage(gt_GiveTeal, c_playerAny, "-give teal", true);
    TriggerAddEventChatMessage(gt_GiveTeal, c_playerAny, "-give michael", true);
    TriggerAddEventChatMessage(gt_GiveTeal, c_playerAny, "-give Michael", true);
    TriggerAddEventChatMessage(gt_GiveTeal, c_playerAny, "-give light blue", true);
    TriggerAddEventChatMessage(gt_GiveTeal, c_playerAny, "-give blue", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Give White
//--------------------------------------------------------------------------------------------------
bool gt_GiveWhite_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    unitgroup auto806567A2_g;
    int auto806567A2_u;
    unit auto806567A2_var;

    // Variable Initialization
    lv_player = gv_gameData.lv_rolesOwners[gv_syn.lv_roleMessiah];

    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(gv_gameData.lv_playerGroupHeaven, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto806567A2_g = UnitGroupSelected(EventPlayer());
    auto806567A2_u = UnitGroupCount(auto806567A2_g, c_unitCountAll);
    for (;; auto806567A2_u -= 1) {
        auto806567A2_var = UnitGroupUnitFromEnd(auto806567A2_g, auto806567A2_u);
        if (auto806567A2_var == null) { break; }
        if ((UnitGetOwner(auto806567A2_var) == EventPlayer())) {
            gf_TakeUntakeGiveAftermathStatTracking(EventPlayer(), lv_player, auto806567A2_var);
            UnitSetOwner(auto806567A2_var, lv_player, true);
            UnitControlGroupAddUnits(lv_player, 0, libNtve_gf_ConvertUnitToUnitGroup(auto806567A2_var));
        }

    }
    UIDisplayMessage(PlayerGroupSingle(lv_player), c_messageAreaSubtitle, StringExternal("Param/Value/B47FF7AA"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GiveWhite_Init () {
    gt_GiveWhite = TriggerCreate("gt_GiveWhite_Func");
    TriggerAddEventChatMessage(gt_GiveWhite, c_playerAny, "-give white", true);
    TriggerAddEventChatMessage(gt_GiveWhite, c_playerAny, "-give messiah", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Give Brown
//--------------------------------------------------------------------------------------------------
bool gt_GiveBrown_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    unitgroup autoCBD772F5_g;
    int autoCBD772F5_u;
    unit autoCBD772F5_var;

    // Variable Initialization
    lv_player = gv_gameData.lv_rolesOwners[gv_syn.lv_roleJehoel];

    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(gv_gameData.lv_playerGroupHeaven, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoCBD772F5_g = UnitGroupSelected(EventPlayer());
    autoCBD772F5_u = UnitGroupCount(autoCBD772F5_g, c_unitCountAll);
    for (;; autoCBD772F5_u -= 1) {
        autoCBD772F5_var = UnitGroupUnitFromEnd(autoCBD772F5_g, autoCBD772F5_u);
        if (autoCBD772F5_var == null) { break; }
        if ((UnitGetOwner(autoCBD772F5_var) == EventPlayer())) {
            gf_TakeUntakeGiveAftermathStatTracking(EventPlayer(), lv_player, autoCBD772F5_var);
            UnitSetOwner(autoCBD772F5_var, lv_player, true);
            UnitControlGroupAddUnits(lv_player, 0, libNtve_gf_ConvertUnitToUnitGroup(autoCBD772F5_var));
        }

    }
    UIDisplayMessage(PlayerGroupSingle(lv_player), c_messageAreaSubtitle, StringExternal("Param/Value/3B4B7DA3"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GiveBrown_Init () {
    gt_GiveBrown = TriggerCreate("gt_GiveBrown_Func");
    TriggerAddEventChatMessage(gt_GiveBrown, c_playerAny, "-give brown", true);
    TriggerAddEventChatMessage(gt_GiveBrown, c_playerAny, "-give jehoel", true);
    TriggerAddEventChatMessage(gt_GiveBrown, c_playerAny, "-give Jehoel", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Give Green
//--------------------------------------------------------------------------------------------------
bool gt_GiveGreen_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    unitgroup autoBA44E9F7_g;
    int autoBA44E9F7_u;
    unit autoBA44E9F7_var;

    // Variable Initialization
    lv_player = gv_gameData.lv_rolesOwners[gv_syn.lv_roleUriel];

    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(gv_gameData.lv_playerGroupHeaven, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoBA44E9F7_g = UnitGroupSelected(EventPlayer());
    autoBA44E9F7_u = UnitGroupCount(autoBA44E9F7_g, c_unitCountAll);
    for (;; autoBA44E9F7_u -= 1) {
        autoBA44E9F7_var = UnitGroupUnitFromEnd(autoBA44E9F7_g, autoBA44E9F7_u);
        if (autoBA44E9F7_var == null) { break; }
        if ((UnitGetOwner(autoBA44E9F7_var) == EventPlayer())) {
            gf_TakeUntakeGiveAftermathStatTracking(EventPlayer(), lv_player, autoBA44E9F7_var);
            UnitSetOwner(autoBA44E9F7_var, lv_player, true);
            UnitControlGroupAddUnits(lv_player, 0, libNtve_gf_ConvertUnitToUnitGroup(autoBA44E9F7_var));
        }

    }
    UIDisplayMessage(PlayerGroupSingle(lv_player), c_messageAreaSubtitle, StringExternal("Param/Value/D74EB7E8"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GiveGreen_Init () {
    gt_GiveGreen = TriggerCreate("gt_GiveGreen_Func");
    TriggerAddEventChatMessage(gt_GiveGreen, c_playerAny, "-give green", true);
    TriggerAddEventChatMessage(gt_GiveGreen, c_playerAny, "-give uriel", true);
    TriggerAddEventChatMessage(gt_GiveGreen, c_playerAny, "-give Uriel", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Give Purple
//--------------------------------------------------------------------------------------------------
bool gt_GivePurple_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    unitgroup auto0F3C1892_g;
    int auto0F3C1892_u;
    unit auto0F3C1892_var;

    // Variable Initialization
    lv_player = gv_gameData.lv_rolesOwners[gv_syn.lv_roleSeraphiel];

    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(gv_gameData.lv_playerGroupHeaven, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto0F3C1892_g = UnitGroupSelected(EventPlayer());
    auto0F3C1892_u = UnitGroupCount(auto0F3C1892_g, c_unitCountAll);
    for (;; auto0F3C1892_u -= 1) {
        auto0F3C1892_var = UnitGroupUnitFromEnd(auto0F3C1892_g, auto0F3C1892_u);
        if (auto0F3C1892_var == null) { break; }
        if ((UnitGetOwner(auto0F3C1892_var) == EventPlayer())) {
            gf_TakeUntakeGiveAftermathStatTracking(EventPlayer(), lv_player, auto0F3C1892_var);
            UnitSetOwner(auto0F3C1892_var, lv_player, true);
            UnitControlGroupAddUnits(lv_player, 0, libNtve_gf_ConvertUnitToUnitGroup(auto0F3C1892_var));
        }

    }
    UIDisplayMessage(PlayerGroupSingle(lv_player), c_messageAreaSubtitle, StringExternal("Param/Value/97055799"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GivePurple_Init () {
    gt_GivePurple = TriggerCreate("gt_GivePurple_Func");
    TriggerAddEventChatMessage(gt_GivePurple, c_playerAny, "-give purple", true);
    TriggerAddEventChatMessage(gt_GivePurple, c_playerAny, "-give seraphiel", true);
    TriggerAddEventChatMessage(gt_GivePurple, c_playerAny, "-give Seraphiel", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Give Gray
//--------------------------------------------------------------------------------------------------
bool gt_GiveGray_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    unitgroup auto2306B5C6_g;
    int auto2306B5C6_u;
    unit auto2306B5C6_var;

    // Variable Initialization
    lv_player = gv_gameData.lv_rolesOwners[gv_syn.lv_roleZadkiel];

    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(gv_gameData.lv_playerGroupHeaven, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto2306B5C6_g = UnitGroupSelected(EventPlayer());
    auto2306B5C6_u = UnitGroupCount(auto2306B5C6_g, c_unitCountAll);
    for (;; auto2306B5C6_u -= 1) {
        auto2306B5C6_var = UnitGroupUnitFromEnd(auto2306B5C6_g, auto2306B5C6_u);
        if (auto2306B5C6_var == null) { break; }
        if ((UnitGetOwner(auto2306B5C6_var) == EventPlayer())) {
            gf_TakeUntakeGiveAftermathStatTracking(EventPlayer(), lv_player, auto2306B5C6_var);
            UnitSetOwner(auto2306B5C6_var, lv_player, true);
            UnitControlGroupAddUnits(lv_player, 0, libNtve_gf_ConvertUnitToUnitGroup(auto2306B5C6_var));
        }

    }
    UIDisplayMessage(PlayerGroupSingle(lv_player), c_messageAreaSubtitle, StringExternal("Param/Value/3C0572BE"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GiveGray_Init () {
    gt_GiveGray = TriggerCreate("gt_GiveGray_Func");
    TriggerAddEventChatMessage(gt_GiveGray, c_playerAny, "-give black", true);
    TriggerAddEventChatMessage(gt_GiveGray, c_playerAny, "-give grey", true);
    TriggerAddEventChatMessage(gt_GiveGray, c_playerAny, "-give gray", true);
    TriggerAddEventChatMessage(gt_GiveGray, c_playerAny, "-give zadkiel", true);
    TriggerAddEventChatMessage(gt_GiveGray, c_playerAny, "-give Zadkiel", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Give Red
//--------------------------------------------------------------------------------------------------
bool gt_GiveRed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_tmp;
    int lv_player;

    // Automatic Variable Declarations
    unitgroup auto9A1DC489_g;
    int auto9A1DC489_u;
    unit auto9A1DC489_var;

    // Variable Initialization
    lv_tmp = 1;
    lv_player = gv_gameData.lv_rolesOwners[gv_syn.lv_roleDevil];

    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(gv_gameData.lv_playerGroupHell, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto9A1DC489_g = UnitGroupSelected(EventPlayer());
    auto9A1DC489_u = UnitGroupCount(auto9A1DC489_g, c_unitCountAll);
    for (;; auto9A1DC489_u -= 1) {
        auto9A1DC489_var = UnitGroupUnitFromEnd(auto9A1DC489_g, auto9A1DC489_u);
        if (auto9A1DC489_var == null) { break; }
        if ((UnitGetOwner(auto9A1DC489_var) == EventPlayer()) && (UnitGetType(auto9A1DC489_var) != "Hydralisk") && (UnitGetType(auto9A1DC489_var) != "Zergling") && (UnitGetType(auto9A1DC489_var) != "Roach") && (UnitTypeTestAttribute(UnitGetType(auto9A1DC489_var), c_unitAttributeStructure) == false)) {
            if ((UnitGroupHasUnit(gv_gameData.lv_claimedTroops[EventPlayer()], auto9A1DC489_var) == true)) {
                UnitGroupRemove(gv_gameData.lv_claimedTroops[EventPlayer()], auto9A1DC489_var);
                UnitGroupAdd(gv_gameData.lv_claimedTroops[lv_player], auto9A1DC489_var);
            }

            gf_TakeUntakeGiveAftermathStatTracking(EventPlayer(), lv_player, auto9A1DC489_var);
            UnitSetOwner(auto9A1DC489_var, lv_player, true);
            UnitControlGroupAddUnits(lv_player, 0, libNtve_gf_ConvertUnitToUnitGroup(auto9A1DC489_var));
            UnitSetCustomValue(auto9A1DC489_var, gv_syn.lv_unitCustomValueCurrentRole, IntToFixed(gv_syn.lv_roleDevil));
        }

    }
    UIDisplayMessage(PlayerGroupSingle(lv_player), c_messageAreaSubtitle, StringExternal("Param/Value/ECED7C25"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GiveRed_Init () {
    gt_GiveRed = TriggerCreate("gt_GiveRed_Func");
    TriggerAddEventChatMessage(gt_GiveRed, c_playerAny, "-give red", true);
    TriggerAddEventChatMessage(gt_GiveRed, c_playerAny, "-give RED", true);
    TriggerAddEventChatMessage(gt_GiveRed, c_playerAny, "-give devil", true);
    TriggerAddEventChatMessage(gt_GiveRed, c_playerAny, "-give Devil", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Give Orange
//--------------------------------------------------------------------------------------------------
bool gt_GiveOrange_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_tmp;
    int lv_player;

    // Automatic Variable Declarations
    unitgroup auto7F5B25BF_g;
    int auto7F5B25BF_u;
    unit auto7F5B25BF_var;

    // Variable Initialization
    lv_tmp = 1;
    lv_player = gv_gameData.lv_rolesOwners[gv_syn.lv_roleAsmodeus];

    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(gv_gameData.lv_playerGroupHell, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto7F5B25BF_g = UnitGroupSelected(EventPlayer());
    auto7F5B25BF_u = UnitGroupCount(auto7F5B25BF_g, c_unitCountAll);
    for (;; auto7F5B25BF_u -= 1) {
        auto7F5B25BF_var = UnitGroupUnitFromEnd(auto7F5B25BF_g, auto7F5B25BF_u);
        if (auto7F5B25BF_var == null) { break; }
        if ((UnitGetOwner(auto7F5B25BF_var) == EventPlayer()) && (UnitGetType(auto7F5B25BF_var) != "Hydralisk") && (UnitGetType(auto7F5B25BF_var) != "Zergling") && (UnitGetType(auto7F5B25BF_var) != "Roach") && (UnitTypeTestAttribute(UnitGetType(auto7F5B25BF_var), c_unitAttributeStructure) == false)) {
            if ((UnitGroupHasUnit(gv_gameData.lv_claimedTroops[EventPlayer()], auto7F5B25BF_var) == true)) {
                UnitGroupRemove(gv_gameData.lv_claimedTroops[EventPlayer()], auto7F5B25BF_var);
                UnitGroupAdd(gv_gameData.lv_claimedTroops[lv_player], auto7F5B25BF_var);
            }

            gf_TakeUntakeGiveAftermathStatTracking(EventPlayer(), lv_player, auto7F5B25BF_var);
            UnitSetOwner(auto7F5B25BF_var, lv_player, true);
            UnitControlGroupAddUnits(lv_player, 0, libNtve_gf_ConvertUnitToUnitGroup(auto7F5B25BF_var));
            UnitSetCustomValue(auto7F5B25BF_var, gv_syn.lv_unitCustomValueCurrentRole, IntToFixed(gv_syn.lv_roleAsmodeus));
        }

    }
    UIDisplayMessage(PlayerGroupSingle(lv_player), c_messageAreaSubtitle, StringExternal("Param/Value/2D56B603"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GiveOrange_Init () {
    gt_GiveOrange = TriggerCreate("gt_GiveOrange_Func");
    TriggerAddEventChatMessage(gt_GiveOrange, c_playerAny, "-give orange", true);
    TriggerAddEventChatMessage(gt_GiveOrange, c_playerAny, "-give asmodeus", true);
    TriggerAddEventChatMessage(gt_GiveOrange, c_playerAny, "-give Asmodeus", true);
    TriggerAddEventChatMessage(gt_GiveOrange, c_playerAny, "-give oj", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Give Yellow
//--------------------------------------------------------------------------------------------------
bool gt_GiveYellow_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_tmp;
    int lv_player;

    // Automatic Variable Declarations
    unitgroup autoB266D738_g;
    int autoB266D738_u;
    unit autoB266D738_var;

    // Variable Initialization
    lv_tmp = 1;
    lv_player = gv_gameData.lv_rolesOwners[gv_syn.lv_roleAstaroth];

    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(gv_gameData.lv_playerGroupHell, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoB266D738_g = UnitGroupSelected(EventPlayer());
    autoB266D738_u = UnitGroupCount(autoB266D738_g, c_unitCountAll);
    for (;; autoB266D738_u -= 1) {
        autoB266D738_var = UnitGroupUnitFromEnd(autoB266D738_g, autoB266D738_u);
        if (autoB266D738_var == null) { break; }
        if ((UnitGetOwner(autoB266D738_var) == EventPlayer()) && (UnitGetType(autoB266D738_var) != "Hydralisk") && (UnitGetType(autoB266D738_var) != "Zergling") && (UnitGetType(autoB266D738_var) != "Roach") && (UnitTypeTestAttribute(UnitGetType(autoB266D738_var), c_unitAttributeStructure) == false)) {
            if ((UnitGroupHasUnit(gv_gameData.lv_claimedTroops[EventPlayer()], autoB266D738_var) == true)) {
                UnitGroupRemove(gv_gameData.lv_claimedTroops[EventPlayer()], autoB266D738_var);
                UnitGroupAdd(gv_gameData.lv_claimedTroops[lv_player], autoB266D738_var);
            }

            gf_TakeUntakeGiveAftermathStatTracking(EventPlayer(), lv_player, autoB266D738_var);
            UnitSetOwner(autoB266D738_var, lv_player, true);
            UnitControlGroupAddUnits(lv_player, 0, libNtve_gf_ConvertUnitToUnitGroup(autoB266D738_var));
            UnitSetCustomValue(autoB266D738_var, gv_syn.lv_unitCustomValueCurrentRole, IntToFixed(gv_syn.lv_roleAstaroth));
        }

    }
    UIDisplayMessage(PlayerGroupSingle(lv_player), c_messageAreaSubtitle, StringExternal("Param/Value/8B86F0D5"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GiveYellow_Init () {
    gt_GiveYellow = TriggerCreate("gt_GiveYellow_Func");
    TriggerAddEventChatMessage(gt_GiveYellow, c_playerAny, "-give yellow", true);
    TriggerAddEventChatMessage(gt_GiveYellow, c_playerAny, "-give astaroth", true);
    TriggerAddEventChatMessage(gt_GiveYellow, c_playerAny, "-give Astaroth", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Give Pink
//--------------------------------------------------------------------------------------------------
bool gt_GivePink_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_tmp;
    int lv_player;

    // Automatic Variable Declarations
    unitgroup autoCF7CC836_g;
    int autoCF7CC836_u;
    unit autoCF7CC836_var;

    // Variable Initialization
    lv_tmp = 1;
    lv_player = gv_gameData.lv_rolesOwners[gv_syn.lv_roleMoloch];

    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(gv_gameData.lv_playerGroupHell, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoCF7CC836_g = UnitGroupSelected(EventPlayer());
    autoCF7CC836_u = UnitGroupCount(autoCF7CC836_g, c_unitCountAll);
    for (;; autoCF7CC836_u -= 1) {
        autoCF7CC836_var = UnitGroupUnitFromEnd(autoCF7CC836_g, autoCF7CC836_u);
        if (autoCF7CC836_var == null) { break; }
        if ((UnitGetOwner(autoCF7CC836_var) == EventPlayer()) && (UnitGetType(autoCF7CC836_var) != "Hydralisk") && (UnitGetType(autoCF7CC836_var) != "Zergling") && (UnitGetType(autoCF7CC836_var) != "Roach") && (UnitTypeTestAttribute(UnitGetType(autoCF7CC836_var), c_unitAttributeStructure) == false)) {
            if ((UnitGroupHasUnit(gv_gameData.lv_claimedTroops[EventPlayer()], autoCF7CC836_var) == true)) {
                UnitGroupRemove(gv_gameData.lv_claimedTroops[EventPlayer()], autoCF7CC836_var);
                UnitGroupAdd(gv_gameData.lv_claimedTroops[lv_player], autoCF7CC836_var);
            }

            gf_TakeUntakeGiveAftermathStatTracking(EventPlayer(), lv_player, autoCF7CC836_var);
            UnitSetOwner(autoCF7CC836_var, lv_player, true);
            UnitControlGroupAddUnits(lv_player, 0, libNtve_gf_ConvertUnitToUnitGroup(autoCF7CC836_var));
            UnitSetCustomValue(autoCF7CC836_var, gv_syn.lv_unitCustomValueCurrentRole, IntToFixed(gv_syn.lv_roleMoloch));
        }

    }
    UIDisplayMessage(PlayerGroupSingle(lv_player), c_messageAreaSubtitle, StringExternal("Param/Value/5FB7EB46"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GivePink_Init () {
    gt_GivePink = TriggerCreate("gt_GivePink_Func");
    TriggerAddEventChatMessage(gt_GivePink, c_playerAny, "-give pink", true);
    TriggerAddEventChatMessage(gt_GivePink, c_playerAny, "-give moloch", true);
    TriggerAddEventChatMessage(gt_GivePink, c_playerAny, "-give Moloch", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tie Text Trigger
//--------------------------------------------------------------------------------------------------
bool gt_TieTextTrigger_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto031816CD_ae = 10;
    int auto031816CD_var;
    playergroup auto64D70625_g;
    int auto64D70625_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameData.lv_tieTriggered == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_gameData.lv_tieTriggered = true;
    gv_gameData.lv_tieYesCount = 0;
    gv_gameData.lv_tieNoCount = 0;
    gv_gameData.lv_tieAbstainCount = 0;
    auto031816CD_var = 1;
    for ( ; auto031816CD_var <= auto031816CD_ae; auto031816CD_var += 1 ) {
        gv_playerData[auto031816CD_var].lv_tiehasPlayerVoted = false;
    }
    gf_CreateTieDialog();
    if ((gf_TieVoteProcessandOutcome() == true)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/0B48B9F8"));
        TriggerExecute(gt_DecreaseGamesPlayedTie, true, true);
        TriggerExecute(gt_PeriodicBankSave, true, false);
        gf_UpdateStatsDisplay();
        Wait(2.0, c_timeGame);
        auto64D70625_g = PlayerGroupActive();
        auto64D70625_var = -1;
        while (true) {
            auto64D70625_var = PlayerGroupNextPlayer(auto64D70625_g, auto64D70625_var);
            if (auto64D70625_var < 0) { break; }
            GameOver(auto64D70625_var, c_gameOverTie, true, true);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/605A50A2"));
    }
    DialogDestroy(gv_gameData.lv_tieDialog);
    Wait(60.0, c_timeGame);
    gv_gameData.lv_tieTriggered = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TieTextTrigger_Init () {
    gt_TieTextTrigger = TriggerCreate("gt_TieTextTrigger_Func");
    TriggerEnable(gt_TieTextTrigger, false);
    TriggerAddEventChatMessage(gt_TieTextTrigger, c_playerAny, "-tie", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tie Dialog Clicked
//--------------------------------------------------------------------------------------------------
bool gt_TieDialogClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto3D380DA0_val;

    // Conditions
    if (testConds) {
        if (!((DialogControlGetDialog(EventDialogControl()) == gv_gameData.lv_tieDialog))) {
            return false;
        }

        if (!((gv_playerData[EventPlayer()].lv_tiehasPlayerVoted == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto3D380DA0_val = EventDialogControl();
    if (auto3D380DA0_val == gv_gameData.lv_tieYes) {
        gv_playerData[EventPlayer()].lv_tiehasPlayerVoted = true;
        gv_gameData.lv_tieYesCount += 1;
        DialogSetVisible(gv_gameData.lv_tieDialog, PlayerGroupSingle(EventPlayer()), false);
    }
    else if (auto3D380DA0_val == gv_gameData.lv_tieNo) {
        gv_playerData[EventPlayer()].lv_tiehasPlayerVoted = true;
        gv_gameData.lv_tieNoCount += 1;
        DialogSetVisible(gv_gameData.lv_tieDialog, PlayerGroupSingle(EventPlayer()), false);
        if ((PlayerGroupHasPlayer(gv_gameData.lv_playerGroupHeaven, EventPlayer()) == true)) {
            gv_gameData.lv_tieHeavenRejectCount += 1;
        }
        else {
            gv_gameData.lv_tieHellRejectCount += 1;
        }
    }
    else if (auto3D380DA0_val == gv_gameData.lv_tieAbstain) {
        gv_playerData[EventPlayer()].lv_tiehasPlayerVoted = true;
        gv_gameData.lv_tieAbstainCount += 1;
        DialogSetVisible(gv_gameData.lv_tieDialog, PlayerGroupSingle(EventPlayer()), false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TieDialogClicked_Init () {
    gt_TieDialogClicked = TriggerCreate("gt_TieDialogClicked_Func");
    TriggerAddEventDialogControl(gt_TieDialogClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mute
//--------------------------------------------------------------------------------------------------
bool gt_Mute_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(gv_funGroup, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupRemove(gv_funGroup, EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Mute_Init () {
    gt_Mute = TriggerCreate("gt_Mute_Func");
    TriggerAddEventChatMessage(gt_Mute, c_playerAny, "-mute", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unmute
//--------------------------------------------------------------------------------------------------
bool gt_Unmute_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(gv_funGroup, EventPlayer()) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupAdd(gv_funGroup, EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Unmute_Init () {
    gt_Unmute = TriggerCreate("gt_Unmute_Func");
    TriggerAddEventChatMessage(gt_Unmute, c_playerAny, "-unmute", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Perd Turret Init
//--------------------------------------------------------------------------------------------------
bool gt_PerdTurretInit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(gv_perdGroup, UnitFromId(46));
    UnitGroupAdd(gv_perdGroup, UnitFromId(45));
    UnitGroupAdd(gv_perdGroup, UnitFromId(47));
    UnitGroupAdd(gv_perdGroup, UnitFromId(22));
    UnitGroupAdd(gv_perdGroup, UnitFromId(200));
    UnitGroupAdd(gv_perdGroup, UnitFromId(784));
    UnitGroupAdd(gv_perdGroup, UnitFromId(709));
    UnitGroupAdd(gv_perdGroup, UnitFromId(785));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PerdTurretInit_Init () {
    gt_PerdTurretInit = TriggerCreate("gt_PerdTurretInit_Func");
    TriggerAddEventMapInit(gt_PerdTurretInit);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Perd Turrets
//--------------------------------------------------------------------------------------------------
bool gt_PerdTurrets_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_perdTurretActive;

    // Automatic Variable Declarations
    unitgroup autoD965DB20_g;
    int autoD965DB20_u;
    unit autoD965DB20_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((lv_perdTurretActive == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoD965DB20_g = gv_perdGroup;
    autoD965DB20_u = UnitGroupCount(autoD965DB20_g, c_unitCountAll);
    for (;; autoD965DB20_u -= 1) {
        autoD965DB20_var = UnitGroupUnitFromEnd(autoD965DB20_g, autoD965DB20_u);
        if (autoD965DB20_var == null) { break; }
        libNtve_gf_UnitSetVariation(autoD965DB20_var, "PerditionTurret", 0, "");
    }
    lv_perdTurretActive = true;
    Wait(20.0, c_timeGame);
    libNtve_gf_UnitSetVariation(UnitFromId(784), "NydusNetwork", 0, "");
    libNtve_gf_UnitSetVariation(UnitFromId(709), "NydusNetwork", 0, "");
    libNtve_gf_UnitSetVariation(UnitFromId(785), "NydusNetwork", 0, "");
    libNtve_gf_UnitSetVariation(UnitFromId(46), "Assimilator", 0, "");
    libNtve_gf_UnitSetVariation(UnitFromId(200), "Gateway", 1, "");
    libNtve_gf_UnitSetVariation(UnitFromId(47), "FleetBeacon", 0, "");
    libNtve_gf_UnitSetVariation(UnitFromId(45), "Gateway", 0, "");
    libNtve_gf_UnitSetVariation(UnitFromId(22), "RoboticsBay", 0, "");
    lv_perdTurretActive = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PerdTurrets_Init () {
    gt_PerdTurrets = TriggerCreate("gt_PerdTurrets_Func");
    TriggerAddEventChatMessage(gt_PerdTurrets, c_playerAny, "This game needs more Perdition Turrets.", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: BerithDeath
//--------------------------------------------------------------------------------------------------
bool gt_BerithDeath_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsAlive(UnitFromId(708)) == true)) {
        TextExpressionSetToken("Param/Expression/CC3524E6", "A", StringExternal("Param/Value/EE254DDC"));
        TextExpressionSetToken("Param/Expression/CC3524E6", "B", TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))));
        TextExpressionSetToken("Param/Expression/CC3524E6", "C", StringExternal("Param/Value/50750886"));
        UIDisplayMessage(gv_funGroup, c_messageAreaChat, TextExpressionAssemble("Param/Expression/CC3524E6"));
    }
    else {
        UIDisplayMessage(gv_funGroup, c_messageAreaSubtitle, StringExternal("Param/Value/E8B1C8AB"));
        TextExpressionSetToken("Param/Expression/C64A5C5F", "A", StringExternal("Param/Value/E830961D"));
        TextExpressionSetToken("Param/Expression/C64A5C5F", "B", TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))));
        UIDisplayMessage(gv_funGroup, c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/C64A5C5F"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BerithDeath_Init () {
    gt_BerithDeath = TriggerCreate("gt_BerithDeath_Func");
    TriggerAddEventChatMessage(gt_BerithDeath, c_playerAny, "Berith always dies!", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Badkids
//--------------------------------------------------------------------------------------------------
bool gt_Badkids_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_bkPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_bkPlayer = -1;

    // Actions
    if (!runActions) {
        return true;
    }

    if (((EventChatMessage(false) == "white is a badkid") || (EventChatMessage(false) == "messi is a badkid") || (EventChatMessage(false) == "messiah is a badkid") || (EventChatMessage(false) == "the messiah is a badkid") || (EventChatMessage(false) == "white is a bk") || (EventChatMessage(false) == "messi is a bk") || (EventChatMessage(false) == "messiah is a bk") || (EventChatMessage(false) == "the messiah is a bk"))) {
        lv_bkPlayer = gv_gameData.lv_rolesOwners[gv_syn.lv_roleMessiah];
    }

    if (((EventChatMessage(false) == "green is a badkid") || (EventChatMessage(false) == "uri is a badkid") || (EventChatMessage(false) == "uriel is a badkid") || (EventChatMessage(false) == "green is a bk") || (EventChatMessage(false) == "uri is a bk") || (EventChatMessage(false) == "uriel is a bk"))) {
        lv_bkPlayer = gv_gameData.lv_rolesOwners[gv_syn.lv_roleUriel];
    }

    if (((EventChatMessage(false) == "purp is a badkid") || (EventChatMessage(false) == "purple is a badkid") || (EventChatMessage(false) == "sera is a badkid") || (EventChatMessage(false) == "seraphiel is a badkid") || (EventChatMessage(false) == "purp is a bk") || (EventChatMessage(false) == "purple is a bk") || (EventChatMessage(false) == "sera is a bk") || (EventChatMessage(false) == "seraphiel is a bk"))) {
        lv_bkPlayer = gv_gameData.lv_rolesOwners[gv_syn.lv_roleSeraphiel];
    }

    if (((EventChatMessage(false) == "teal is a badkid") || (EventChatMessage(false) == "mich is a badkid") || (EventChatMessage(false) == "mike is a badkid") || (EventChatMessage(false) == "michael is a badkid") || (EventChatMessage(false) == "teal is a bk") || (EventChatMessage(false) == "mich is a bk") || (EventChatMessage(false) == "mike is a bk") || (EventChatMessage(false) == "michael is a bk"))) {
        lv_bkPlayer = gv_gameData.lv_rolesOwners[gv_syn.lv_roleMichael];
    }

    if (((EventChatMessage(false) == "brown is a badkid") || (EventChatMessage(false) == "jeh is a badkid") || (EventChatMessage(false) == "jeho is a badkid") || (EventChatMessage(false) == "jehoel is a badkid") || (EventChatMessage(false) == "brown is a bk") || (EventChatMessage(false) == "jeh is a bk") || (EventChatMessage(false) == "jeho is a bk") || (EventChatMessage(false) == "jehoel is a bk"))) {
        lv_bkPlayer = gv_gameData.lv_rolesOwners[gv_syn.lv_roleJehoel];
    }

    if (((EventChatMessage(false) == "black is a badkid") || (EventChatMessage(false) == "zad is a badkid") || (EventChatMessage(false) == "zadkiel is a badkid") || (EventChatMessage(false) == "black is a bk") || (EventChatMessage(false) == "zad is a bk") || (EventChatMessage(false) == "zadkiel is a bk"))) {
        lv_bkPlayer = gv_gameData.lv_rolesOwners[gv_syn.lv_roleZadkiel];
    }

    if (((EventChatMessage(false) == "red is a badkid") || (EventChatMessage(false) == "dev is a badkid") || (EventChatMessage(false) == "devil is a badkid") || (EventChatMessage(false) == "the devil is a badkid") || (EventChatMessage(false) == "red is a bk") || (EventChatMessage(false) == "dev is a bk") || (EventChatMessage(false) == "devil is a bk") || (EventChatMessage(false) == "the devil is a bk"))) {
        lv_bkPlayer = gv_gameData.lv_rolesOwners[gv_syn.lv_roleDevil];
    }

    if (((EventChatMessage(false) == "oj is a badkid") || (EventChatMessage(false) == "orange is a badkid") || (EventChatMessage(false) == "asmo is a badkid") || (EventChatMessage(false) == "asmodeus is a badkid") || (EventChatMessage(false) == "oj is a bk") || (EventChatMessage(false) == "orange is a bk") || (EventChatMessage(false) == "asmo is a bk") || (EventChatMessage(false) == "asmodeus is a bk"))) {
        lv_bkPlayer = gv_gameData.lv_rolesOwners[gv_syn.lv_roleAsmodeus];
    }

    if (((EventChatMessage(false) == "yellow is a badkid") || (EventChatMessage(false) == "asta is a badkid") || (EventChatMessage(false) == "astaroth is a badkid") || (EventChatMessage(false) == "yellow is a bk") || (EventChatMessage(false) == "asta is a bk") || (EventChatMessage(false) == "astaroth is a bk"))) {
        lv_bkPlayer = gv_gameData.lv_rolesOwners[gv_syn.lv_roleAstaroth];
    }

    if (((EventChatMessage(false) == "pink is a badkid") || (EventChatMessage(false) == "molo is a badkid") || (EventChatMessage(false) == "moloch is a badkid") || (EventChatMessage(false) == "pink is a bk") || (EventChatMessage(false) == "molo is a bk") || (EventChatMessage(false) == "moloch is a bk"))) {
        lv_bkPlayer = gv_gameData.lv_rolesOwners[gv_syn.lv_roleMoloch];
    }

    if ((lv_bkPlayer != -1) && (lv_bkPlayer != EventPlayer())) {
        TextExpressionSetToken("Param/Expression/3DDDBA36", "A", TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))));
        TextExpressionSetToken("Param/Expression/3DDDBA36", "B", TextWithColor(PlayerName(lv_bkPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_bkPlayer, false))));
        UIDisplayMessage(gv_funGroup, c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/3DDDBA36"));
        lv_bkPlayer = -1;
    }
    else {
        if ((lv_bkPlayer != -1) && (lv_bkPlayer == EventPlayer())) {
            TextExpressionSetToken("Param/Expression/0FFF1F61", "A", TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))));
            TextExpressionSetToken("Param/Expression/0FFF1F61", "A", TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))));
            UIDisplayMessage(gv_funGroup, c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/0FFF1F61"));
            lv_bkPlayer = -1;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Badkids_Init () {
    gt_Badkids = TriggerCreate("gt_Badkids_Func");
    TriggerAddEventChatMessage(gt_Badkids, c_playerAny, "is a badkid", false);
    TriggerAddEventChatMessage(gt_Badkids, c_playerAny, "is a bk", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: For wabbit
//--------------------------------------------------------------------------------------------------
bool gt_Forwabbit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_rng;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitFilterMatch(EventUnit(), UnitGetOwner(EventUnit()), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterHallucination - 32)) | (1 << (c_targetFilterSummoned - 32)))) == true))) {
            return false;
        }

        if (!((PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-1123858"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_rng = RandomInt(0, 1);
    if ((lv_rng == 1)) {
        TextExpressionSetToken("Param/Expression/763B1E64", "A", TextWithColor(StringExternal("Param/Value/592CB9E8"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(UnitGetOwner(EventUnit()), false))));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/763B1E64"));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Forwabbit_Init () {
    gt_Forwabbit = TriggerCreate("gt_Forwabbit_Func");
    TriggerAddEventUnitDied(gt_Forwabbit, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Handle Initial Leavers
//--------------------------------------------------------------------------------------------------
bool gt_HandleInitialLeavers_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playplaya;
    int lv_playa;

    // Automatic Variable Declarations
    playergroup auto4E1D9466_g;
    playergroup autoA54EC808_g;
    playergroup auto168C90B6_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto4E1D9466_g = PlayerGroupAll();
    lv_playa = -1;
    while (true) {
        lv_playa = PlayerGroupNextPlayer(auto4E1D9466_g, lv_playa);
        if (lv_playa < 0) { break; }
        if ((PlayerStatus(lv_playa) != c_playerStatusActive) && (PlayerType(lv_playa) == c_playerTypeUser) && (PlayerGroupHasPlayer(gv_gameData.lv_playerGroupObservers, lv_playa) == false)) {
            libNtve_gf_SetUpgradeLevelForPlayer(lv_playa, "PassiveController", (TechTreeUpgradeCount(lv_playa, "PassiveController", c_techCountCompleteOnly)+1));
            if ((gf_isRoleGood2(gv_playerData[lv_playa].lv_currentRole) == true)) {
                auto168C90B6_g = gv_gameData.lv_playerGroupHeaven;
                lv_playplaya = -1;
                while (true) {
                    lv_playplaya = PlayerGroupNextPlayer(auto168C90B6_g, lv_playplaya);
                    if (lv_playplaya < 0) { break; }
                    libNtve_gf_SetAllianceOneWay(lv_playa, lv_playplaya, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndControl);
                }
            }
            else {
                autoA54EC808_g = gv_gameData.lv_playerGroupHell;
                lv_playplaya = -1;
                while (true) {
                    lv_playplaya = PlayerGroupNextPlayer(autoA54EC808_g, lv_playplaya);
                    if (lv_playplaya < 0) { break; }
                    libNtve_gf_SetAllianceOneWay(lv_playa, lv_playplaya, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndControl);
                }
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HandleInitialLeavers_Init () {
    gt_HandleInitialLeavers = TriggerCreate("gt_HandleInitialLeavers_Func");
    TriggerAddEventTimeElapsed(gt_HandleInitialLeavers, 1.0, c_timeReal);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Handle Leavers
//--------------------------------------------------------------------------------------------------
bool gt_HandleLeavers_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playplaya;
    bool lv_someoneplaying;

    // Automatic Variable Declarations
    unitgroup auto45E7EBD0_g;
    int auto45E7EBD0_u;
    unit auto45E7EBD0_var;
    playergroup autoE4C9EC86_g;
    playergroup autoA57805E2_g;
    playergroup auto193EAD93_g;
    int auto193EAD93_var;
    playergroup auto93F55FA8_g;
    int auto93F55FA8_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(gv_gameData.lv_playerGroupObservers, EventPlayer()) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto45E7EBD0_g = gv_gameData.lv_claimedTroops[EventPlayer()];
    auto45E7EBD0_u = UnitGroupCount(auto45E7EBD0_g, c_unitCountAll);
    for (;; auto45E7EBD0_u -= 1) {
        auto45E7EBD0_var = UnitGroupUnitFromEnd(auto45E7EBD0_g, auto45E7EBD0_u);
        if (auto45E7EBD0_var == null) { break; }
        libNtve_gf_RescueUnit(auto45E7EBD0_var, FixedToInt(UnitGetCustomValue(auto45E7EBD0_var, 63)), true);
        UnitSetTeamColorIndex(auto45E7EBD0_var, gf_ColorID_To_Color(FixedToInt(UnitGetCustomValue(auto45E7EBD0_var, 62))));
        UnitGroupRemove(gv_gameData.lv_claimedTroops[EventPlayer()], auto45E7EBD0_var);
    }
    PlayerGroupRemove(gv_gameData.lv_humansPlaying, EventPlayer());
    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "PassiveController", (TechTreeUpgradeCount(EventPlayer(), "PassiveController", c_techCountCompleteOnly)+1));
    if ((gv_gameData.lv_gameStarted == false)) {
        return true;
    }

    if ((gv_gameData.lv_heavenHasWon == false) && (gv_gameData.lv_hellHasWon == false)) {
        if ((PlayerGroupHasPlayer(gv_gameData.lv_playerGroupHeaven, EventPlayer()) == true)) {
            TextExpressionSetToken("Param/Expression/3BC42BFD", "A", gf_GetRoleNameColored(gv_playerData[EventPlayer()].lv_currentRole));
            TextExpressionSetToken("Param/Expression/3BC42BFD", "B", StringExternal("Param/Value/38B375B2"));
            TextExpressionSetToken("Param/Expression/3BC42BFD", "C", gf_HandleLeaversGetforcestext(EventPlayer()));
            UIDisplayMessage(gv_gameData.lv_playerGroupHeaven, c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/3BC42BFD"));
            TextExpressionSetToken("Param/Expression/6DE7EA72", "A", gf_GetRoleNameColored(gv_playerData[EventPlayer()].lv_currentRole));
            TextExpressionSetToken("Param/Expression/6DE7EA72", "B", StringExternal("Param/Value/AAFB3D1D"));
            UIDisplayMessage(gv_gameData.lv_playerGroupHell, c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/6DE7EA72"));
        }

        if ((PlayerGroupHasPlayer(gv_gameData.lv_playerGroupHell, EventPlayer()) == true)) {
            TextExpressionSetToken("Param/Expression/0124A74D", "A", gf_GetRoleNameColored(gv_playerData[EventPlayer()].lv_currentRole));
            TextExpressionSetToken("Param/Expression/0124A74D", "B", StringExternal("Param/Value/E2889F9D"));
            TextExpressionSetToken("Param/Expression/0124A74D", "C", gf_HandleLeaversGetforcestext(EventPlayer()));
            UIDisplayMessage(gv_gameData.lv_playerGroupHell, c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/0124A74D"));
            TextExpressionSetToken("Param/Expression/127EAE20", "A", gf_GetRoleNameColored(gv_playerData[EventPlayer()].lv_currentRole));
            TextExpressionSetToken("Param/Expression/127EAE20", "B", StringExternal("Param/Value/E4159A66"));
            UIDisplayMessage(gv_gameData.lv_playerGroupHeaven, c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/127EAE20"));
        }

    }

    if ((gv_gameData.lv_aftermathDialog != c_invalidDialogId)) {
        gf_AftermathGrayOutLeavers(EventPlayer());
    }

    if ((gf_IsPlayerGood(EventPlayer()) == true)) {
        autoA57805E2_g = gv_gameData.lv_playerGroupHeaven;
        lv_playplaya = -1;
        while (true) {
            lv_playplaya = PlayerGroupNextPlayer(autoA57805E2_g, lv_playplaya);
            if (lv_playplaya < 0) { break; }
            libNtve_gf_SetAllianceOneWay(EventPlayer(), lv_playplaya, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndControl);
        }
    }
    else {
        autoE4C9EC86_g = gv_gameData.lv_playerGroupHell;
        lv_playplaya = -1;
        while (true) {
            lv_playplaya = PlayerGroupNextPlayer(autoE4C9EC86_g, lv_playplaya);
            if (lv_playplaya < 0) { break; }
            libNtve_gf_SetAllianceOneWay(EventPlayer(), lv_playplaya, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndControl);
        }
    }
    Wait(10.0, c_timeGame);
    auto193EAD93_g = gv_gameData.lv_playerGroupHell;
    auto193EAD93_var = -1;
    while (true) {
        auto193EAD93_var = PlayerGroupNextPlayer(auto193EAD93_g, auto193EAD93_var);
        if (auto193EAD93_var < 0) { break; }
        if ((PlayerStatus(auto193EAD93_var) == c_playerStatusActive)) {
            lv_someoneplaying = true;
        }

    }
    if ((lv_someoneplaying == false)) {
        gf_HeavenVictoryTriggeredByPrimeDeath(true);
    }

    lv_someoneplaying = false;
    auto93F55FA8_g = gv_gameData.lv_playerGroupHeaven;
    auto93F55FA8_var = -1;
    while (true) {
        auto93F55FA8_var = PlayerGroupNextPlayer(auto93F55FA8_g, auto93F55FA8_var);
        if (auto93F55FA8_var < 0) { break; }
        if ((PlayerStatus(auto93F55FA8_var) == c_playerStatusActive)) {
            lv_someoneplaying = true;
        }

    }
    if ((lv_someoneplaying == false)) {
        gf_HellVictoryTriggeredByThroneDeath(true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HandleLeavers_Init () {
    gt_HandleLeavers = TriggerCreate("gt_HandleLeavers_Func");
    TriggerAddEventPlayerLeft(gt_HandleLeavers, c_playerAny, c_gameResultUndecided);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bank Initialize
//--------------------------------------------------------------------------------------------------
bool gt_BankInitialize_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_rolevar;
    int lv_playa;
    string lv_string;
    int lv_ctrlgrp;

    // Automatic Variable Declarations
    playergroup auto423705F4_g;
    int auto423705F4_var;
    const int auto025F42DD_ae = 9;
    const int auto025F42DD_ai = 1;
    const int auto0A21B1DC_ae = 9;
    const int auto0A21B1DC_ai = 1;

    // Variable Initialization
    lv_string = "";

    // Actions
    if (!runActions) {
        return true;
    }

    BankLoad("HeavenBesiegedCL", 1);
    gv_banks.lv_playerBanks[1] = BankLastCreated();
    BankLoad("HeavenBesiegedCL", 2);
    gv_banks.lv_playerBanks[2] = BankLastCreated();
    BankLoad("HeavenBesiegedCL", 3);
    gv_banks.lv_playerBanks[3] = BankLastCreated();
    BankLoad("HeavenBesiegedCL", 4);
    gv_banks.lv_playerBanks[4] = BankLastCreated();
    BankLoad("HeavenBesiegedCL", 5);
    gv_banks.lv_playerBanks[5] = BankLastCreated();
    BankLoad("HeavenBesiegedCL", 6);
    gv_banks.lv_playerBanks[6] = BankLastCreated();
    BankLoad("HeavenBesiegedCL", 7);
    gv_banks.lv_playerBanks[7] = BankLastCreated();
    BankLoad("HeavenBesiegedCL", 8);
    gv_banks.lv_playerBanks[8] = BankLastCreated();
    BankLoad("HeavenBesiegedCL", 9);
    gv_banks.lv_playerBanks[9] = BankLastCreated();
    BankLoad("HeavenBesiegedCL", 10);
    gv_banks.lv_playerBanks[10] = BankLastCreated();
    BankLoad("HeavenBesiegedCL", 11);
    gv_banks.lv_playerBanks[11] = BankLastCreated();
    BankLoad("HeavenBesiegedCL", 12);
    gv_banks.lv_playerBanks[12] = BankLastCreated();
    BankLoad("HeavenBesiegedCL", 13);
    gv_banks.lv_playerBanks[13] = BankLastCreated();
    auto423705F4_g = PlayerGroupActive();
    auto423705F4_var = -1;
    while (true) {
        auto423705F4_var = PlayerGroupNextPlayer(auto423705F4_g, auto423705F4_var);
        if (auto423705F4_var < 0) { break; }
        BankOptionSet(gv_banks.lv_playerBanks[auto423705F4_var], c_bankOptionSignature, true);
        if ((BankVerify(gv_banks.lv_playerBanks[auto423705F4_var]) == true)) {
            lv_rolevar = 0;
            for ( ; ( (auto025F42DD_ai >= 0 && lv_rolevar <= auto025F42DD_ae) || (auto025F42DD_ai < 0 && lv_rolevar >= auto025F42DD_ae) ) ; lv_rolevar += auto025F42DD_ai ) {
                gv_banks.lv_gamesStarted[auto423705F4_var][lv_rolevar] = BankValueGetAsInt(gv_banks.lv_playerBanks[auto423705F4_var], "GamesStarted", IntToString(lv_rolevar));
                gv_playerData[auto423705F4_var].lv_totalGames += gv_banks.lv_gamesStarted[auto423705F4_var][lv_rolevar];
                gv_banks.lv_wins[auto423705F4_var][lv_rolevar] = BankValueGetAsInt(gv_banks.lv_playerBanks[auto423705F4_var], "Wins", IntToString(lv_rolevar));
                gv_banks.lv_losses[auto423705F4_var][lv_rolevar] = BankValueGetAsInt(gv_banks.lv_playerBanks[auto423705F4_var], "Losses", IntToString(lv_rolevar));
                gv_banks.lv_heroKills[auto423705F4_var][lv_rolevar] = BankValueGetAsInt(gv_banks.lv_playerBanks[auto423705F4_var], "HeroKills", IntToString(lv_rolevar));
                gv_banks.lv_heroLosses[auto423705F4_var][lv_rolevar] = BankValueGetAsInt(gv_banks.lv_playerBanks[auto423705F4_var], "HeroLosses", IntToString(lv_rolevar));
                gv_banks.lv_assists[auto423705F4_var][lv_rolevar] = BankValueGetAsInt(gv_banks.lv_playerBanks[auto423705F4_var], "Assists", IntToString(lv_rolevar));
                gv_banks.lv_smileyKills[auto423705F4_var][lv_rolevar] = BankValueGetAsInt(gv_banks.lv_playerBanks[auto423705F4_var], "SmileyKills", IntToString(lv_rolevar));
                gv_banks.lv_kudosRecieved[auto423705F4_var][lv_rolevar] = BankValueGetAsInt(gv_banks.lv_playerBanks[auto423705F4_var], "Kudos", IntToString(lv_rolevar));
                lv_ctrlgrp = 0;
                for ( ; ( (auto0A21B1DC_ai >= 0 && lv_ctrlgrp <= auto0A21B1DC_ae) || (auto0A21B1DC_ai < 0 && lv_ctrlgrp >= auto0A21B1DC_ae) ) ; lv_ctrlgrp += auto0A21B1DC_ai ) {
                    gv_banks.lv_controlGroups[auto423705F4_var][lv_rolevar][lv_ctrlgrp] = BankValueGetAsInt(gv_banks.lv_playerBanks[auto423705F4_var], "ControlGroups", IntToString((lv_ctrlgrp + (lv_rolevar * 10))));
                    gv_cCGData.lv_savedGroups[auto423705F4_var][lv_rolevar][lv_ctrlgrp] = gv_banks.lv_controlGroups[auto423705F4_var][lv_rolevar][lv_ctrlgrp];
                }
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BankInitialize_Init () {
    gt_BankInitialize = TriggerCreate("gt_BankInitialize_Func");
    TriggerEnable(gt_BankInitialize, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Setup Stats Display Dialogs
//--------------------------------------------------------------------------------------------------
bool gt_SetupStatsDisplayDialogs_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_dialogwidth;
    int lv_dialogheight;
    int lv_dialogwidthIndepth;
    int lv_dialogheightIndepth;

    // Automatic Variable Declarations
    const int auto1793A23C_ae = 5;
    int auto1793A23C_var;
    const int auto6E8D430C_ae = 9;
    int auto6E8D430C_var;

    // Variable Initialization
    lv_dialogwidth = 375;
    lv_dialogheight = 385;
    lv_dialogwidthIndepth = 550;
    lv_dialogheightIndepth = 475;

    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(lv_dialogwidth, lv_dialogheight, c_anchorTopRight, 20, 150, false);
    gv_banks.lv_statisticsDialog = DialogLastCreated();
    DialogSetImage(DialogLastCreated(), "Assets\\Textures\\ui_battlenet_glue_listboxframe.dds");
    DialogSetTransparency(DialogLastCreated(), 40.0);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/3149E60B"), PlayerGroupAll());
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, 50, 25);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 550, 50);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, 233, 10, StringExternal("Param/Value/729D3F35"), Color(100,100,100), false, 2.0);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeListBox);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_battlenet_glue_listboxframe.dds", PlayerGroupAll());
    gv_banks.lv_statisticsItem = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "HBStatisticsMono", PlayerGroupAll());
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, 160, 50);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), (lv_dialogwidth - 170), (lv_dialogheight - 60));
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeListBox);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_battlenet_glue_listboxframe.dds", PlayerGroupAll());
    gv_banks.lv_statisticsItemNames = DialogControlLastCreated();
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, 10, 50);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 150, (lv_dialogheight - 60));
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_banks.lv_statisticsButtonToMinimize = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "HBCentered", PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 35, 35);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopRight, 0, 0);
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/9FD5A5C8"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\black.dds", PlayerGroupAll());
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
    DialogCreate(130, 40, c_anchorTopRight, 355, 0, false);
    DialogSetImage(DialogLastCreated(), "Assets\\Textures\\black.dds");
    gv_banks.lv_statisticsDialogMinimized = DialogLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 0, 0);
    gv_banks.lv_statisticsButtonToMaximize = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 130, 40);
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/03200AEA"), PlayerGroupAll());
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogCreate(lv_dialogwidthIndepth, lv_dialogheightIndepth, c_anchorTop, 125, 150, false);
    gv_banks.lv_indepthStatisticsDialog = DialogLastCreated();
    DialogSetTransparency(DialogLastCreated(), 40.0);
    DialogSetImage(DialogLastCreated(), "Assets\\Textures\\ui_battlenet_glue_listboxframe.dds");
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
    DialogControlCreate(gv_banks.lv_indepthStatisticsDialog, c_triggerControlTypeListBox);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_battlenet_glue_listboxframe.dds", PlayerGroupAll());
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, 145, 50);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), (lv_dialogwidthIndepth - 155), (lv_dialogheightIndepth - 60));
    gv_banks.lv_indepthList = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "HBStatisticsMono", PlayerGroupAll());
    DialogControlCreate(gv_banks.lv_indepthStatisticsDialog, c_triggerControlTypeListBox);
    gv_banks.lv_indepthRoleList = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "HBStatistics", PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_battlenet_glue_listboxframe.dds", PlayerGroupAll());
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, 10, 50);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 135, (lv_dialogheightIndepth - 60));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/85118945"));
    auto1793A23C_var = 0;
    for ( ; auto1793A23C_var <= auto1793A23C_ae; auto1793A23C_var += 1 ) {
        DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), (StringToText("") + gf_GetRoleNameColored(auto1793A23C_var)));
    }
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/2A6BBA51"));
    auto6E8D430C_var = 6;
    for ( ; auto6E8D430C_var <= auto6E8D430C_ae; auto6E8D430C_var += 1 ) {
        DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), (StringToText("") + gf_GetRoleNameColored(auto6E8D430C_var)));
    }
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/4C9576E2"));
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopRight, 0, 0);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 35, 35);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "HBCentered", PlayerGroupAll());
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/8BA670AD"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\blank.dds", PlayerGroupAll());
    gv_banks.lv_indepthCloseButton = DialogControlLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeListBox);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_battlenet_glue_listboxframe.dds", PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 190, 28);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, 0, 0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 190, 50, c_anchorTopLeft, 5, 5, StringExternal("Param/Value/1E16E2E6"), Color(100,100,100), false, 2.0);
    gv_banks.lv_indepthTitleLabel = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), (lv_dialogwidthIndepth - 50), 35, c_anchorTop, 25, 29, StringExternal("Param/Value/E45E2186"), Color(100,100,100), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 35, c_anchorTopLeft, 215, 14, StringExternal("Param/Value/6DE1C0F7"), Color(100,100,100), false, 2.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SetupStatsDisplayDialogs_Init () {
    gt_SetupStatsDisplayDialogs = TriggerCreate("gt_SetupStatsDisplayDialogs_Func");
    TriggerEnable(gt_SetupStatsDisplayDialogs, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Death Bank Update
//--------------------------------------------------------------------------------------------------
bool gt_HeroDeathBankUpdate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_losingplaya;
    int lv_killingplaya;
    int lv_losingrole;
    int lv_killingrole;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_banks.lv_statsdisabled == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_losingplaya = UnitGetOwner(EventUnit());
    lv_losingrole = gv_playerData[lv_losingplaya].lv_currentRole;
    if ((lv_losingrole < 0)) {
        lv_losingrole = 0;
    }

    gv_banks.lv_heroLosses[lv_losingplaya][lv_losingrole] += 1;
    gv_banks.lv_bankUpdated[lv_losingplaya] = true;
    lv_killingplaya = UnitGetOwner(libNtve_gf_KillingUnit());
    lv_killingrole = gv_playerData[lv_killingplaya].lv_currentRole;
    if ((lv_killingrole < 0)) {
        lv_killingrole = 0;
    }

    gv_banks.lv_heroKills[lv_killingplaya][lv_killingrole] += 1;
    gv_banks.lv_bankUpdated[lv_killingplaya] = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HeroDeathBankUpdate_Init () {
    gt_HeroDeathBankUpdate = TriggerCreate("gt_HeroDeathBankUpdate_Func");
    TriggerAddEventUnitDied(gt_HeroDeathBankUpdate, UnitRefFromUnit(UnitFromId(707)));
    TriggerAddEventUnitDied(gt_HeroDeathBankUpdate, UnitRefFromUnit(UnitFromId(692)));
    TriggerAddEventUnitDied(gt_HeroDeathBankUpdate, UnitRefFromUnit(UnitFromId(783)));
    TriggerAddEventUnitDied(gt_HeroDeathBankUpdate, UnitRefFromUnit(UnitFromId(704)));
    TriggerAddEventUnitDied(gt_HeroDeathBankUpdate, UnitRefFromUnit(UnitFromId(706)));
    TriggerAddEventUnitDied(gt_HeroDeathBankUpdate, UnitRefFromUnit(UnitFromId(708)));
    TriggerAddEventUnitDied(gt_HeroDeathBankUpdate, UnitRefFromUnit(UnitFromId(622)));
    TriggerAddEventUnitDied(gt_HeroDeathBankUpdate, UnitRefFromUnit(UnitFromId(347)));
    TriggerAddEventUnitDied(gt_HeroDeathBankUpdate, UnitRefFromUnit(UnitFromId(710)));
    TriggerAddEventUnitDied(gt_HeroDeathBankUpdate, UnitRefFromUnit(UnitFromId(729)));
    TriggerAddEventUnitDied(gt_HeroDeathBankUpdate, UnitRefFromUnit(UnitFromId(330)));
    TriggerAddEventUnitDied(gt_HeroDeathBankUpdate, UnitRefFromUnit(UnitFromId(348)));
    TriggerAddEventUnitDied(gt_HeroDeathBankUpdate, UnitRefFromUnit(UnitFromId(439)));
    TriggerAddEventUnitDied(gt_HeroDeathBankUpdate, UnitRefFromUnit(UnitFromId(211)));
    TriggerAddEventUnitDied(gt_HeroDeathBankUpdate, UnitRefFromUnit(UnitFromId(703)));
    TriggerAddEventUnitDied(gt_HeroDeathBankUpdate, UnitRefFromUnit(UnitFromId(238160895)));
    TriggerAddEventUnitDied(gt_HeroDeathBankUpdate, UnitRefFromUnit(UnitFromId(313)));
    TriggerAddEventUnitDied(gt_HeroDeathBankUpdate, UnitRefFromUnit(UnitFromId(705)));
    TriggerAddEventUnitDied(gt_HeroDeathBankUpdate, UnitRefFromUnit(UnitFromId(501)));
    TriggerAddEventUnitDied(gt_HeroDeathBankUpdate, UnitRefFromUnit(UnitFromId(65)));
    TriggerAddEventUnitDied(gt_HeroDeathBankUpdate, UnitRefFromUnit(UnitFromId(711)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: PeriodicBankSave
//--------------------------------------------------------------------------------------------------
bool gt_PeriodicBankSave_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_rolevar;
    int lv_ctrlgrp;
    string lv_string;

    // Automatic Variable Declarations
    playergroup auto37E9038D_g;
    int auto37E9038D_var;
    playergroup auto66BCA2DD_g;
    int auto66BCA2DD_var;

    // Variable Initialization
    lv_string = "";

    // Conditions
    if (testConds) {
        if (!((gv_gameData.lv_gameStarted == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto37E9038D_g = gv_gameData.lv_humansPlaying;
    auto37E9038D_var = -1;
    while (true) {
        auto37E9038D_var = PlayerGroupNextPlayer(auto37E9038D_g, auto37E9038D_var);
        if (auto37E9038D_var < 0) { break; }
        if ((gv_banks.lv_bankUpdated[auto37E9038D_var] == true)) {
            gf_UpdateStatsDisplay();
            break;
        }

    }
    auto66BCA2DD_g = gv_gameData.lv_humansPlaying;
    auto66BCA2DD_var = -1;
    while (true) {
        auto66BCA2DD_var = PlayerGroupNextPlayer(auto66BCA2DD_g, auto66BCA2DD_var);
        if (auto66BCA2DD_var < 0) { break; }
        if ((gv_banks.lv_bankUpdated[auto66BCA2DD_var] == true)) {
            lv_rolevar = gv_playerData[auto66BCA2DD_var].lv_currentRole;
            BankValueSetFromInt(gv_banks.lv_playerBanks[auto66BCA2DD_var], "GamesStarted", IntToString(lv_rolevar), gv_banks.lv_gamesStarted[auto66BCA2DD_var][lv_rolevar]);
            BankValueSetFromInt(gv_banks.lv_playerBanks[auto66BCA2DD_var], "Wins", IntToString(lv_rolevar), gv_banks.lv_wins[auto66BCA2DD_var][lv_rolevar]);
            BankValueSetFromInt(gv_banks.lv_playerBanks[auto66BCA2DD_var], "Losses", IntToString(lv_rolevar), gv_banks.lv_losses[auto66BCA2DD_var][lv_rolevar]);
            BankValueSetFromInt(gv_banks.lv_playerBanks[auto66BCA2DD_var], "HeroKills", IntToString(lv_rolevar), gv_banks.lv_heroKills[auto66BCA2DD_var][lv_rolevar]);
            BankValueSetFromInt(gv_banks.lv_playerBanks[auto66BCA2DD_var], "HeroLosses", IntToString(lv_rolevar), gv_banks.lv_heroLosses[auto66BCA2DD_var][lv_rolevar]);
            BankValueSetFromInt(gv_banks.lv_playerBanks[auto66BCA2DD_var], "Assists", IntToString(lv_rolevar), gv_banks.lv_assists[auto66BCA2DD_var][lv_rolevar]);
            BankValueSetFromInt(gv_banks.lv_playerBanks[auto66BCA2DD_var], "SmileyKills", IntToString(lv_rolevar), gv_banks.lv_smileyKills[auto66BCA2DD_var][lv_rolevar]);
            BankValueSetFromInt(gv_banks.lv_playerBanks[auto66BCA2DD_var], "Kudos", IntToString(lv_rolevar), gv_banks.lv_kudosRecieved[auto66BCA2DD_var][lv_rolevar]);
            BankSave(gv_banks.lv_playerBanks[auto66BCA2DD_var]);
            gv_banks.lv_bankUpdated[auto66BCA2DD_var] = false;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PeriodicBankSave_Init () {
    gt_PeriodicBankSave = TriggerCreate("gt_PeriodicBankSave_Func");
    TriggerAddEventTimePeriodic(gt_PeriodicBankSave, 20.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: BankMinimize
//--------------------------------------------------------------------------------------------------
bool gt_BankMinimize_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventDialogControl() == gv_banks.lv_statisticsButtonToMinimize)) {
        DialogSetVisible(gv_banks.lv_statisticsDialog, PlayerGroupSingle(EventPlayer()), false);
        DialogSetVisible(gv_banks.lv_statisticsDialogMinimized, PlayerGroupSingle(EventPlayer()), true);
    }
    else {
        if ((EventDialogControl() == gv_banks.lv_statisticsButtonToMaximize)) {
            DialogSetVisible(gv_banks.lv_statisticsDialogMinimized, PlayerGroupSingle(EventPlayer()), false);
            DialogSetVisible(gv_banks.lv_statisticsDialog, PlayerGroupSingle(EventPlayer()), true);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BankMinimize_Init () {
    gt_BankMinimize = TriggerCreate("gt_BankMinimize_Func");
    TriggerAddEventDialogControl(gt_BankMinimize, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: IndepthClose
//--------------------------------------------------------------------------------------------------
bool gt_IndepthClose_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_banks.lv_indepthCloseButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetVisible(gv_banks.lv_indepthStatisticsDialog, PlayerGroupSingle(EventPlayer()), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IndepthClose_Init () {
    gt_IndepthClose = TriggerCreate("gt_IndepthClose_Func");
    TriggerAddEventDialogControl(gt_IndepthClose, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: IndepthOpen
//--------------------------------------------------------------------------------------------------
bool gt_IndepthOpen_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_rolevar;
    int lv_playa;
    int lv_gamesSum;
    int lv_winsSum;
    int lv_loseSum;
    int lv_killsSum;
    int lv_deathsSum;
    int lv_assistsSum;

    // Automatic Variable Declarations
    const int auto8F7B64C2_ae = 5;
    const int auto8F7B64C2_ai = 1;
    const int autoCBAF70B4_ae = 5;
    const int autoCBAF70B4_ai = 1;
    const int autoFFBA7ADE_ae = 9;
    const int autoFFBA7ADE_ai = 1;
    const int auto65E35EF7_ae = 9;
    const int auto65E35EF7_ai = 1;
    const int auto8EDB1155_ae = 9;
    const int auto8EDB1155_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_banks.lv_statisticsItem))) {
            return false;
        }

        if (!((DialogControlGetSelectedItem(EventDialogControl(), EventPlayer()) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSelectItem(gv_banks.lv_statisticsItemNames, PlayerGroupSingle(EventPlayer()), DialogControlGetSelectedItem(EventDialogControl(), EventPlayer()));
    lv_playa = gv_gameData.lv_rolesOwners[(DialogControlGetSelectedItem(EventDialogControl(), EventPlayer())-1)];
    DialogSetVisible(gv_banks.lv_indepthStatisticsDialog, PlayerGroupSingle(EventPlayer()), true);
    DialogControlRemoveAllItems(gv_banks.lv_indepthList, PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_banks.lv_indepthTitleLabel, TextWithColor(PlayerName(lv_playa), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_playa, false))), PlayerGroupSingle(EventPlayer()));
    lv_rolevar = 0;
    for ( ; ( (auto8F7B64C2_ai >= 0 && lv_rolevar <= auto8F7B64C2_ae) || (auto8F7B64C2_ai < 0 && lv_rolevar >= auto8F7B64C2_ae) ) ; lv_rolevar += auto8F7B64C2_ai ) {
        lv_gamesSum += gv_banks.lv_gamesStarted[lv_playa][lv_rolevar];
        lv_winsSum += gv_banks.lv_wins[lv_playa][lv_rolevar];
        lv_loseSum += gv_banks.lv_losses[lv_playa][lv_rolevar];
        lv_killsSum += gv_banks.lv_heroKills[lv_playa][lv_rolevar];
        lv_deathsSum += gv_banks.lv_heroLosses[lv_playa][lv_rolevar];
        lv_assistsSum += gv_banks.lv_assists[lv_playa][lv_rolevar];
    }
    DialogControlAddItem(gv_banks.lv_indepthList, PlayerGroupSingle(EventPlayer()), (StringToText("") + StringExternal("Param/Value/B763EFD5") + StringToText(gf_numberwithspaces(lv_gamesSum)) + StringExternal("Param/Value/2199F73B") + TextWithColor(StringToText(gf_numberwithspaces(lv_winsSum)), Color(98.04, 78.43, 78.43)) + StringExternal("Param/Value/2EEEF239") + StringToText(gf_numberwithspaces(lv_loseSum)) + StringExternal("Param/Value/F3A7B0BA") + TextWithColor(StringToText(gf_numberwithspaces(lv_killsSum)), Color(98.04, 78.43, 78.43)) + StringExternal("Param/Value/EB2E5A08") + StringToText(gf_numberwithspaces(lv_deathsSum)) + StringExternal("Param/Value/D6BAE43E") + TextWithColor(StringToText(gf_numberwithspaces(lv_assistsSum)), Color(98.04, 78.43, 78.43))));
    lv_rolevar = 0;
    for ( ; ( (autoCBAF70B4_ai >= 0 && lv_rolevar <= autoCBAF70B4_ae) || (autoCBAF70B4_ai < 0 && lv_rolevar >= autoCBAF70B4_ae) ) ; lv_rolevar += autoCBAF70B4_ai ) {
        DialogControlAddItem(gv_banks.lv_indepthList, PlayerGroupSingle(EventPlayer()), (StringToText("") + StringExternal("Param/Value/FE505123") + StringToText(gf_numberwithspaces(gv_banks.lv_gamesStarted[lv_playa][lv_rolevar])) + StringExternal("Param/Value/F6C66CAA") + TextWithColor(StringToText(gf_numberwithspaces(gv_banks.lv_wins[lv_playa][lv_rolevar])), Color(98.04, 78.43, 78.43)) + StringExternal("Param/Value/5A50B236") + StringToText(gf_numberwithspaces(gv_banks.lv_losses[lv_playa][lv_rolevar])) + StringExternal("Param/Value/5FA71B13") + TextWithColor(StringToText(gf_numberwithspaces(gv_banks.lv_heroKills[lv_playa][lv_rolevar])), Color(98.04, 78.43, 78.43)) + StringExternal("Param/Value/27C8B4FA") + StringToText(gf_numberwithspaces(gv_banks.lv_heroLosses[lv_playa][lv_rolevar])) + StringExternal("Param/Value/87E98916") + TextWithColor(StringToText(gf_numberwithspaces(gv_banks.lv_assists[lv_playa][lv_rolevar])), Color(98.04, 78.43, 78.43))));
    }
    lv_gamesSum = 0;
    lv_winsSum = 0;
    lv_loseSum = 0;
    lv_killsSum = 0;
    lv_deathsSum = 0;
    lv_assistsSum = 0;
    lv_rolevar = 6;
    for ( ; ( (autoFFBA7ADE_ai >= 0 && lv_rolevar <= autoFFBA7ADE_ae) || (autoFFBA7ADE_ai < 0 && lv_rolevar >= autoFFBA7ADE_ae) ) ; lv_rolevar += autoFFBA7ADE_ai ) {
        lv_gamesSum += gv_banks.lv_gamesStarted[lv_playa][lv_rolevar];
        lv_winsSum += gv_banks.lv_wins[lv_playa][lv_rolevar];
        lv_loseSum += gv_banks.lv_losses[lv_playa][lv_rolevar];
        lv_killsSum += gv_banks.lv_heroKills[lv_playa][lv_rolevar];
        lv_deathsSum += gv_banks.lv_heroLosses[lv_playa][lv_rolevar];
        lv_assistsSum += gv_banks.lv_assists[lv_playa][lv_rolevar];
    }
    DialogControlAddItem(gv_banks.lv_indepthList, PlayerGroupSingle(EventPlayer()), (StringToText("") + StringExternal("Param/Value/64A65A1F") + StringToText(gf_numberwithspaces(lv_gamesSum)) + StringExternal("Param/Value/A5D3541D") + TextWithColor(StringToText(gf_numberwithspaces(lv_winsSum)), Color(98.04, 78.43, 78.43)) + StringExternal("Param/Value/B9C0DF34") + StringToText(gf_numberwithspaces(lv_loseSum)) + StringExternal("Param/Value/2A3F9B2C") + TextWithColor(StringToText(gf_numberwithspaces(lv_killsSum)), Color(98.04, 78.43, 78.43)) + StringExternal("Param/Value/A167B8E1") + StringToText(gf_numberwithspaces(lv_deathsSum)) + StringExternal("Param/Value/D1EDA8BA") + TextWithColor(StringToText(gf_numberwithspaces(lv_assistsSum)), Color(98.04, 78.43, 78.43))));
    lv_rolevar = 6;
    for ( ; ( (auto65E35EF7_ai >= 0 && lv_rolevar <= auto65E35EF7_ae) || (auto65E35EF7_ai < 0 && lv_rolevar >= auto65E35EF7_ae) ) ; lv_rolevar += auto65E35EF7_ai ) {
        DialogControlAddItem(gv_banks.lv_indepthList, PlayerGroupSingle(EventPlayer()), (StringToText("") + StringExternal("Param/Value/C44143CC") + StringToText(gf_numberwithspaces(gv_banks.lv_gamesStarted[lv_playa][lv_rolevar])) + StringExternal("Param/Value/3BB367C2") + TextWithColor(StringToText(gf_numberwithspaces(gv_banks.lv_wins[lv_playa][lv_rolevar])), Color(98.04, 78.43, 78.43)) + StringExternal("Param/Value/F3DE79F9") + StringToText(gf_numberwithspaces(gv_banks.lv_losses[lv_playa][lv_rolevar])) + StringExternal("Param/Value/622B1B20") + TextWithColor(StringToText(gf_numberwithspaces(gv_banks.lv_heroKills[lv_playa][lv_rolevar])), Color(98.04, 78.43, 78.43)) + StringExternal("Param/Value/9BC0608E") + StringToText(gf_numberwithspaces(gv_banks.lv_heroLosses[lv_playa][lv_rolevar])) + StringExternal("Param/Value/7A43853E") + TextWithColor(StringToText(gf_numberwithspaces(gv_banks.lv_assists[lv_playa][lv_rolevar])), Color(98.04, 78.43, 78.43))));
    }
    lv_gamesSum = 0;
    lv_winsSum = 0;
    lv_loseSum = 0;
    lv_killsSum = 0;
    lv_deathsSum = 0;
    lv_assistsSum = 0;
    lv_rolevar = 0;
    for ( ; ( (auto8EDB1155_ai >= 0 && lv_rolevar <= auto8EDB1155_ae) || (auto8EDB1155_ai < 0 && lv_rolevar >= auto8EDB1155_ae) ) ; lv_rolevar += auto8EDB1155_ai ) {
        lv_gamesSum += gv_banks.lv_gamesStarted[lv_playa][lv_rolevar];
        lv_winsSum += gv_banks.lv_wins[lv_playa][lv_rolevar];
        lv_loseSum += gv_banks.lv_losses[lv_playa][lv_rolevar];
        lv_killsSum += gv_banks.lv_heroKills[lv_playa][lv_rolevar];
        lv_deathsSum += gv_banks.lv_heroLosses[lv_playa][lv_rolevar];
        lv_assistsSum += gv_banks.lv_assists[lv_playa][lv_rolevar];
    }
    DialogControlAddItem(gv_banks.lv_indepthList, PlayerGroupSingle(EventPlayer()), (StringToText("") + StringExternal("Param/Value/1D164731") + StringToText(gf_numberwithspaces(lv_gamesSum)) + StringExternal("Param/Value/04119FB6") + TextWithColor(StringToText(gf_numberwithspaces(lv_winsSum)), Color(98.04, 78.43, 78.43)) + StringExternal("Param/Value/8AF0186F") + StringToText(gf_numberwithspaces(lv_loseSum)) + StringExternal("Param/Value/D2312749") + TextWithColor(StringToText(gf_numberwithspaces(lv_killsSum)), Color(98.04, 78.43, 78.43)) + StringExternal("Param/Value/D631CBDD") + StringToText(gf_numberwithspaces(lv_deathsSum)) + StringExternal("Param/Value/7FE5D644") + TextWithColor(StringToText(gf_numberwithspaces(lv_assistsSum)), Color(98.04, 78.43, 78.43))));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IndepthOpen_Init () {
    gt_IndepthOpen = TriggerCreate("gt_IndepthOpen_Func");
    TriggerAddEventDialogControl(gt_IndepthOpen, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeSelectionChanged);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ListSelectionRedirect Names
//--------------------------------------------------------------------------------------------------
bool gt_ListSelectionRedirectNames_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_banks.lv_statisticsItemNames))) {
            return false;
        }

        if (!((DialogControlGetSelectedItem(EventDialogControl(), EventPlayer()) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSelectItem(gv_banks.lv_statisticsItem, PlayerGroupSingle(EventPlayer()), DialogControlGetSelectedItem(EventDialogControl(), EventPlayer()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ListSelectionRedirectNames_Init () {
    gt_ListSelectionRedirectNames = TriggerCreate("gt_ListSelectionRedirectNames_Func");
    TriggerAddEventDialogControl(gt_ListSelectionRedirectNames, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeSelectionChanged);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ListSelectionRedirect Roles
//--------------------------------------------------------------------------------------------------
bool gt_ListSelectionRedirectRoles_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_banks.lv_indepthRoleList))) {
            return false;
        }

        if (!((DialogControlGetSelectedItem(EventDialogControl(), EventPlayer()) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSelectItem(gv_banks.lv_indepthRoleList, PlayerGroupSingle(EventPlayer()), DialogControlGetSelectedItem(EventDialogControl(), EventPlayer()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ListSelectionRedirectRoles_Init () {
    gt_ListSelectionRedirectRoles = TriggerCreate("gt_ListSelectionRedirectRoles_Func");
    TriggerAddEventDialogControl(gt_ListSelectionRedirectRoles, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeSelectionChanged);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ListSelectionRedirect Roles 2
//--------------------------------------------------------------------------------------------------
bool gt_ListSelectionRedirectRoles2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_banks.lv_indepthList))) {
            return false;
        }

        if (!((DialogControlGetSelectedItem(EventDialogControl(), EventPlayer()) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSelectItem(gv_banks.lv_indepthRoleList, PlayerGroupSingle(EventPlayer()), DialogControlGetSelectedItem(EventDialogControl(), EventPlayer()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ListSelectionRedirectRoles2_Init () {
    gt_ListSelectionRedirectRoles2 = TriggerCreate("gt_ListSelectionRedirectRoles2_Func");
    TriggerAddEventDialogControl(gt_ListSelectionRedirectRoles2, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeSelectionChanged);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Increment Games Played
//--------------------------------------------------------------------------------------------------
bool gt_IncrementGamesPlayed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_rolevar;

    // Automatic Variable Declarations
    const int autoDEF9E70C_ae = 13;
    int autoDEF9E70C_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_banks.lv_statsdisabled == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoDEF9E70C_var = 1;
    for ( ; autoDEF9E70C_var <= autoDEF9E70C_ae; autoDEF9E70C_var += 1 ) {
        lv_rolevar = gv_playerData[autoDEF9E70C_var].lv_currentRole;
        if ((lv_rolevar >= 0)) {
            gv_banks.lv_bankUpdated[autoDEF9E70C_var] = true;
            gv_banks.lv_gamesStarted[autoDEF9E70C_var][lv_rolevar] += 1;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IncrementGamesPlayed_Init () {
    gt_IncrementGamesPlayed = TriggerCreate("gt_IncrementGamesPlayed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Decrease Games Played (Tie)
//--------------------------------------------------------------------------------------------------
bool gt_DecreaseGamesPlayedTie_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_rolevar;

    // Automatic Variable Declarations
    const int autoDD1A7F18_ae = 13;
    int autoDD1A7F18_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_banks.lv_statsdisabled == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoDD1A7F18_var = 1;
    for ( ; autoDD1A7F18_var <= autoDD1A7F18_ae; autoDD1A7F18_var += 1 ) {
        lv_rolevar = gv_playerData[autoDD1A7F18_var].lv_currentRole;
        if ((lv_rolevar >= 0)) {
            gv_banks.lv_bankUpdated[autoDD1A7F18_var] = true;
            gv_banks.lv_gamesStarted[autoDD1A7F18_var][lv_rolevar] -= 1;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DecreaseGamesPlayedTie_Init () {
    gt_DecreaseGamesPlayedTie = TriggerCreate("gt_DecreaseGamesPlayedTie_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Votekick
//--------------------------------------------------------------------------------------------------
bool gt_Votekick_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playerToBeKicked;

    // Automatic Variable Declarations
    string autoAE1C41A0_val;
    const int auto16F9440D_ae = 10;
    int auto16F9440D_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameData.lv_votekickVotekickInProgress == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_playerData[EventPlayer()].lv_hasPlayerAlreadyInitiatedAKick == true)) {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/F8C4A8EF"));
        return true;
    }

    autoAE1C41A0_val = EventChatMessage(false);
    if (autoAE1C41A0_val == "-kick 1") {
        lv_playerToBeKicked = 1;
    }
    else if (autoAE1C41A0_val == "-kick 2") {
        lv_playerToBeKicked = 2;
    }
    else if (autoAE1C41A0_val == "-kick 3") {
        lv_playerToBeKicked = 3;
    }
    else if (autoAE1C41A0_val == "-kick 4") {
        lv_playerToBeKicked = 4;
    }
    else if (autoAE1C41A0_val == "-kick 5") {
        lv_playerToBeKicked = 5;
    }
    else if (autoAE1C41A0_val == "-kick 6") {
        lv_playerToBeKicked = 6;
    }
    else if (autoAE1C41A0_val == "-kick 7") {
        lv_playerToBeKicked = 7;
    }
    else if (autoAE1C41A0_val == "-kick 8") {
        lv_playerToBeKicked = 8;
    }
    else if (autoAE1C41A0_val == "-kick 9") {
        lv_playerToBeKicked = 9;
    }
    else if (autoAE1C41A0_val == "-kick 10") {
        lv_playerToBeKicked = 10;
    }
    else if (autoAE1C41A0_val == "-kick white") {
        lv_playerToBeKicked = gv_gameData.lv_rolesOwners[gv_syn.lv_roleMessiah];
    }
    else if (autoAE1C41A0_val == "-kick teal") {
        lv_playerToBeKicked = gv_gameData.lv_rolesOwners[gv_syn.lv_roleMichael];
    }
    else if (autoAE1C41A0_val == "-kick blue") {
        lv_playerToBeKicked = gv_gameData.lv_rolesOwners[gv_syn.lv_roleMichael];
    }
    else if (autoAE1C41A0_val == "-kick green") {
        lv_playerToBeKicked = gv_gameData.lv_rolesOwners[gv_syn.lv_roleUriel];
    }
    else if (autoAE1C41A0_val == "-kick brown") {
        lv_playerToBeKicked = gv_gameData.lv_rolesOwners[gv_syn.lv_roleJehoel];
    }
    else if (autoAE1C41A0_val == "-kick purple") {
        lv_playerToBeKicked = gv_gameData.lv_rolesOwners[gv_syn.lv_roleSeraphiel];
    }
    else if (autoAE1C41A0_val == "-kick grey") {
        lv_playerToBeKicked = gv_gameData.lv_rolesOwners[gv_syn.lv_roleZadkiel];
    }
    else if (autoAE1C41A0_val == "-kick gray") {
        lv_playerToBeKicked = gv_gameData.lv_rolesOwners[gv_syn.lv_roleZadkiel];
    }
    else if (autoAE1C41A0_val == "-kick black") {
        lv_playerToBeKicked = gv_gameData.lv_rolesOwners[gv_syn.lv_roleZadkiel];
    }
    else if (autoAE1C41A0_val == "-kick red") {
        lv_playerToBeKicked = gv_gameData.lv_rolesOwners[gv_syn.lv_roleDevil];
    }
    else if (autoAE1C41A0_val == "-kick orange") {
        lv_playerToBeKicked = gv_gameData.lv_rolesOwners[gv_syn.lv_roleAsmodeus];
    }
    else if (autoAE1C41A0_val == "-kick yellow") {
        lv_playerToBeKicked = gv_gameData.lv_rolesOwners[gv_syn.lv_roleAstaroth];
    }
    else if (autoAE1C41A0_val == "-kick pink") {
        lv_playerToBeKicked = gv_gameData.lv_rolesOwners[gv_syn.lv_roleMoloch];
    }
    else {
        return true;
    }
    if (((lv_playerToBeKicked < 1) || (lv_playerToBeKicked > 13))) {
        return true;
    }

    if ((PlayerStatus(lv_playerToBeKicked) != c_playerStatusActive)) {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/D30EFEEC"));
        return true;
    }

    if ((gv_gameData.lv_gameStarted == true)) {
        if ((((PlayerGroupHasPlayer(gv_gameData.lv_playerGroupHeaven, EventPlayer()) == true) && (PlayerGroupHasPlayer(gv_gameData.lv_playerGroupHeaven, lv_playerToBeKicked) == false)) || ((PlayerGroupHasPlayer(gv_gameData.lv_playerGroupHell, EventPlayer()) == true) && (PlayerGroupHasPlayer(gv_gameData.lv_playerGroupHell, lv_playerToBeKicked) == false)))) {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/902A84A0"));
            return true;
        }

    }

    gv_playerData[EventPlayer()].lv_hasPlayerAlreadyInitiatedAKick = true;
    gv_gameData.lv_votekickVotekickInProgress = true;
    gv_gameData.lv_votekickYesVoteAmount = 0;
    gv_gameData.lv_votekickNoVoteAmount = 0;
    gv_gameData.lv_votekickAbstainedAmount = 0;
    auto16F9440D_var = 1;
    for ( ; auto16F9440D_var <= auto16F9440D_ae; auto16F9440D_var += 1 ) {
        gv_playerData[auto16F9440D_var].lv_hasPlayerVoted = false;
    }
    gf_CreateVotekickDialog(lv_playerToBeKicked);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_playerToBeKicked, "PassiveController", (TechTreeUpgradeCount(lv_playerToBeKicked, "PassiveController", c_techCountCompleteOnly)+1));
    if ((gf_VotekickingProcessOutcome() == true)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (PlayerName(lv_playerToBeKicked) + StringExternal("Param/Value/D54DAA39")));
        GameOver(lv_playerToBeKicked, c_gameOverDefeat, false, false);
        gf_KickMoveUnits(lv_playerToBeKicked);
    }
    else {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (PlayerName(lv_playerToBeKicked) + StringExternal("Param/Value/BE7C2186")));
    }
    libNtve_gf_SetUpgradeLevelForPlayer(lv_playerToBeKicked, "PassiveController", (TechTreeUpgradeCount(lv_playerToBeKicked, "PassiveController", c_techCountCompleteOnly)-1));
    DialogDestroy(gv_gameData.lv_votekickDialog);
    gv_gameData.lv_votekickVotekickInProgress = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Votekick_Init () {
    gt_Votekick = TriggerCreate("gt_Votekick_Func");
    TriggerAddEventChatMessage(gt_Votekick, c_playerAny, "-kick", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ANY DIALOG ITEM IS USED - Votekicking
//--------------------------------------------------------------------------------------------------
bool gt_ANYDIALOGITEMISUSEDVotekicking_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto3F9CBEE9_val;

    // Conditions
    if (testConds) {
        if (!((DialogControlGetDialog(EventDialogControl()) == gv_gameData.lv_votekickDialog))) {
            return false;
        }

        if (!((gv_playerData[EventPlayer()].lv_hasPlayerVoted == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto3F9CBEE9_val = EventDialogControl();
    if (auto3F9CBEE9_val == gv_gameData.lv_votekickYESButton) {
        gv_playerData[EventPlayer()].lv_hasPlayerVoted = true;
        gv_gameData.lv_votekickYesVoteAmount += 1;
        DialogSetVisible(gv_gameData.lv_votekickDialog, PlayerGroupSingle(EventPlayer()), false);
    }
    else if (auto3F9CBEE9_val == gv_gameData.lv_votekickNOButton) {
        gv_playerData[EventPlayer()].lv_hasPlayerVoted = true;
        gv_gameData.lv_votekickNoVoteAmount += 1;
        DialogSetVisible(gv_gameData.lv_votekickDialog, PlayerGroupSingle(EventPlayer()), false);
    }
    else if (auto3F9CBEE9_val == gv_gameData.lv_votekickABSTAINButton) {
        gv_playerData[EventPlayer()].lv_hasPlayerVoted = true;
        gv_gameData.lv_votekickAbstainedAmount += 1;
        DialogSetVisible(gv_gameData.lv_votekickDialog, PlayerGroupSingle(EventPlayer()), false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ANYDIALOGITEMISUSEDVotekicking_Init () {
    gt_ANYDIALOGITEMISUSEDVotekicking = TriggerCreate("gt_ANYDIALOGITEMISUSEDVotekicking_Func");
    TriggerAddEventDialogControl(gt_ANYDIALOGITEMISUSEDVotekicking, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_MainInitialization_Init();
    gt_InitializeVariables_Init();
    gt_LagHack_Init();
    gt_initHumansPlaying_Init();
    gt_ColorFixSaveUnitGroupsPrepareunitsforCinematic_Init();
    gt_NewInitializationHookup_Init();
    gt_DisplayPlayerHandles_Init();
    gt_RemoveReducedModeBlockers_Init();
    gt_PreloadUnits_Init();
    gt_TESTMODE_Init();
    gt_HelpCommand_Init();
    gt_AllyOnCommand_Init();
    gt_AllyOffCommand_Init();
    gt_ExpCommand_Init();
    gt_ResOnCommand_Init();
    gt_ResurrectCommand_Init();
    gt_ResOffCommand_Init();
    gt_SpawnGod_Init();
    gt_IntroCinematic_Init();
    gt_CinematicTextTags_Init();
    gt_CleanupCinematic_Init();
    gt_DuckRoleSelectorDialogV2_Init();
    gt_DuckRoleSelectorSelectSlotPressConfirmPressObserve_Init();
    gt_DuckRoleSelectorHighlightIcons_Init();
    gt_DuckRankTable_Init();
    gt_DuckPlayerLeavesDuringSelection_Init();
    gt_DPPushButtons3_Init();
    gt_CCGDialogs_Init();
    gt_CCGToggle_Init();
    gt_CCGUseButton_Init();
    gt_ReducedMode_Init();
    gt_RoleSelectorFinished2_Init();
    gt_StartActualGame_Init();
    gt_Tips_Init();
    gt_MoveNydusForwardTip_Init();
    gt_RoleInitialization_Init();
    gt_CommandGroups_Init();
    gt_CustomControlGroups_Init();
    gt_IntroText_Init();
    gt_CreateRaphaelCargo_Init();
    gt_AftermathDialogResponses_Init();
    gt_CreateGodTimerWindow_Init();
    gt_Justtobesure_Init();
    gt_SpawnGateway_Init();
    gt_SpawnEnclave_Init();
    gt_SpawnCitadel_Init();
    gt_PostGodSpawnThrone_Init();
    gt_EliteSpawnSatan_Init();
    gt_EliteSpawnAsmo_Init();
    gt_EliteSpawnAsta_Init();
    gt_TheMessiahDiesDP_Init();
    gt_GabrielDies_Init();
    gt_DumaDies_Init();
    gt_UrielDies_Init();
    gt_DonatelloDies_Init();
    gt_SeraphielDies_Init();
    gt_NathanielDies_Init();
    gt_MichaelDies_Init();
    gt_RaphaelDies_Init();
    gt_JehoelDies_Init();
    gt_MetatronDies_Init();
    gt_ZadkielDiesDP_Init();
    gt_MolochDiesDP_Init();
    gt_AzazelDies_Init();
    gt_SammyazzaDies_Init();
    gt_BerithalwaysDies_Init();
    gt_AbaddonDies_Init();
    gt_BeelzebubDies_Init();
    gt_MammonDies_Init();
    gt_AsmodeusDies_Init();
    gt_DevilDies_Init();
    gt_AstarothDies_Init();
    gt_GodDies_Init();
    gt_HellgatedeathDevil_Init();
    gt_HellgatedeathAsmodeus_Init();
    gt_HellgatedeathAstaroth_Init();
    gt_HellgatedeathMoloch_Init();
    gt_DieBene_Init();
    gt_DieGateway_Init();
    gt_DieCitadel_Init();
    gt_DieEnclave_Init();
    gt_DieThrone_Init();
    gt_GodReturns_Init();
    gt_TextTags_Init();
    gt_BenedictionZapper_Init();
    gt_DuckIdleButtonRally_Init();
    gt_periodicAPMcheck_Init();
    gt_XPdisplayMoloch_Init();
    gt_XPdisplayZadkiel_Init();
    gt_NewInit2_Init();
    gt_NewUpdateZad2_Init();
    gt_NewUpdateMolo2_Init();
    gt_ReanimateMoloch_Init();
    gt_ReanimateZad_Init();
    gt_StopRedirect2_Init();
    gt_AttackRedirectInitial_Init();
    gt_AttackRedirectFinal_Init();
    gt_HandleCargoLoadUnload_Init();
    gt_No4GolRaph_Init();
    gt_RaphGolCountDown_Init();
    gt_DonatellorepairAutocasttoggle_Init();
    gt_GabrielHolyStorm_Init();
    gt_MolochTransferLife_Init();
    gt_DonatelloStopBeams_Init();
    gt_Removeimmobilzeonmoveorder_Init();
    gt_MolochLifeStealFreebie_Init();
    gt_RemoveSeraphielConcentrating_Init();
    gt_RemoveSeraphielConcentrating2_Init();
    gt_SeraphielSnipeIssue_Init();
    gt_LeapAttackArea_Init();
    gt_HarpyLandFail_Init();
    gt_PredatorVisiblityPeriodic_Init();
    gt_PredatorCloakCooldown_Init();
    gt_SammyHallucinations_Init();
    gt_SammySiege_Init();
    gt_PlagueHeal_Init();
    gt_DonaCleanse_Init();
    gt_DRHFungal_Init();
    gt_Tumorcolorfix_Init();
    gt_PopulateNyduses_Init();
    gt_SetNydusVarDevil_Init();
    gt_SetNydusVarAsmo_Init();
    gt_SetNydusVarAsta_Init();
    gt_InitNydusRally_Init();
    gt_NydusAutoCast_Init();
    gt_SendtoHeal_Init();
    gt_HealGoodPeriodic_Init();
    gt_HealGoodPeriodic2_Init();
    gt_HealGoodPeriodic22_Init();
    gt_HealGoodPeriodic222_Init();
    gt_HeroHeal_Init();
    gt_HeroHeal2_Init();
    gt_HeroHeal3_Init();
    gt_HeroHeal4_Init();
    gt_LongerHealCD_Init();
    gt_HealEvilPeriodicDevil_Init();
    gt_HealEvilPeriodicAsmo_Init();
    gt_HealEvilPeriodicAsta_Init();
    gt_HealEvilDevil_Init();
    gt_HealEvilAsmo_Init();
    gt_HealEvilAsta_Init();
    gt_HealOrganic_Init();
    gt_HealMechanic_Init();
    gt_UntakeAllTEXTCOMMAND_Init();
    gt_UntakeTEXTCOMMAND_Init();
    gt_TakeTEXTCOMMAND_Init();
    gt_GiveTeal_Init();
    gt_GiveWhite_Init();
    gt_GiveBrown_Init();
    gt_GiveGreen_Init();
    gt_GivePurple_Init();
    gt_GiveGray_Init();
    gt_GiveRed_Init();
    gt_GiveOrange_Init();
    gt_GiveYellow_Init();
    gt_GivePink_Init();
    gt_TieTextTrigger_Init();
    gt_TieDialogClicked_Init();
    gt_Mute_Init();
    gt_Unmute_Init();
    gt_PerdTurretInit_Init();
    gt_PerdTurrets_Init();
    gt_BerithDeath_Init();
    gt_Badkids_Init();
    gt_Forwabbit_Init();
    gt_HandleInitialLeavers_Init();
    gt_HandleLeavers_Init();
    gt_BankInitialize_Init();
    gt_SetupStatsDisplayDialogs_Init();
    gt_HeroDeathBankUpdate_Init();
    gt_PeriodicBankSave_Init();
    gt_BankMinimize_Init();
    gt_IndepthClose_Init();
    gt_IndepthOpen_Init();
    gt_ListSelectionRedirectNames_Init();
    gt_ListSelectionRedirectRoles_Init();
    gt_ListSelectionRedirectRoles2_Init();
    gt_IncrementGamesPlayed_Init();
    gt_DecreaseGamesPlayedTie_Init();
    gt_Votekick_Init();
    gt_ANYDIALOGITEMISUSEDVotekicking_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitCustomScript();
    InitTriggers();
}
